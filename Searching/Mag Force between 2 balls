https://leetcode.com/problems/magnetic-force-between-two-balls/
import java.util.Arrays;

class Solution {
    /**
     * Optimized Approach: Binary Search + Greedy Check
     * 1. Sort the positions array to enable greedy placement.
     * 2. Use binary search to find the maximum possible minimum distance (low=1, high=1e9).
     * 3. For each candidate distance 'mid', check if it's possible to place 'm' balls using a greedy approach.
     * 
     * Brute-force Approach: 
     * 1. Check every possible distance starting from maximum possible down to 1.
     * 2. For each distance, check if placement is possible (greedily).
     * 3. Stop at the first valid distance (maximum possible). 
     *    This is infeasible due to high time complexity (O(n * D), where D can be up to 1e9).
     * 
     * Time Complexity (Optimized): O(n log n + n log D) where D is max distance (1e9)
     * Space Complexity (Optimized): O(1) excluding input, O(log n) for sorting (in-place sort)
     * 
     * Dry Run Example:
     * Input: position = [1,3,5,7,9], m = 3
     * Sorted positions: [1,3,5,7,9]
     * Binary Search Steps:
     * low=1, high=9 → mid=5 → Check if 3 balls can be placed with min distance 5:
     * Place at 1, next at 6 (not present) → not possible. So search lower half (high=4).
     * Next mid=2 → Check distance 4 (mid=2+4//2? Wait, binary search process correction:
     * Correct binary search steps would find the maximum valid distance. For the example, the correct answer is 4 (positions 1,5,9). 
     * The code would validate mid=4 as possible, then search higher until convergence.
     */
    
    /**
     * Checks if 'm' balls can be placed with at least 'k' distance apart using greedy approach.
     * @param arr Sorted array of basket positions
     * @param m Number of balls to place
     * @param k Minimum required distance between balls
     * @return True if possible, False otherwise
     */
    public boolean isPossible(int[] arr, int m, int k) {
        int prev = arr[0]; // Place first ball at the first position
        m -= 1; // One ball placed
        
        for (int i = 1; i < arr.length; i++) {
            int val = arr[i];
            // If current position is at least 'k' away from previous, place a ball here
            if (val - prev >= k) {
                m -= 1;
                prev = val; // Update last placed ball position
            }
            if (m <= 0) return true; // All balls placed successfully
        }
        return false; // Could not place all balls
    }
    
    /**
     * Finds the maximum possible minimum distance between 'm' balls placed in baskets.
     * @param positions Array of basket positions
     * @param m Number of balls to place
     * @return Maximum possible minimum distance
     */
    public int maxDistance(int[] position, int m) {
        Arrays.sort(position); // Sort to enable greedy placement
        
        int l = 1; // Minimum possible distance
        int r = position[position.length - 1] - position[0]; // Max possible distance
        
        // Binary search for the optimal distance
        while (l <= r) {
            int mid = l + (r - l) / 2; // Avoid overflow
            if (isPossible(position, m, mid)) {
                l = mid + 1; // Try for a larger distance
            } else {
                r = mid - 1; // Reduce distance
            }
        }
        return r; // 'r' will be the maximum valid distance
    }
    
    /**
     * Brute-force Approach (Commented out for reference):
     * 1. Iterate from maximum possible distance down to 1.
     * 2. For each distance, check if 'm' balls can be placed.
     * 3. Return first valid distance (maximum found).
     * Time Complexity: O(n * D) → Infeasible for large D (up to 1e9)
     * Space Complexity: O(1)
     */
    /*
    public int bruteForceMaxDistance(int[] position, int m) {
        Arrays.sort(position);
        int maxDist = position[position.length - 1] - position[0];
        
        for (int d = maxDist; d >= 1; d--) {
            if (isPossible(position, m, d)) {
                return d;
            }
        }
        return 0;
    }
    */
}

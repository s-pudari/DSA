https://www.geeksforgeeks.org/batch/gfg-160-problems/track/searching-bonus-problems/problem/maximum-value-in-a-bitonic-array3001
/*
✅ Approach Explanation:
- **Optimized Approach (Approach 2)**: 
  - This approach uses **Binary Search** to find the maximum element in an **unsorted bitonic array** (an array that increases and then decreases).
  - The goal is to find the peak element using mid-point comparison.
  - If the middle element is greater than its neighbors, it's the maximum.
  - If the middle element is greater than the previous but smaller than the next, the maximum lies on the right.
  - Otherwise, it lies on the left.
  - **Edge Cases**: 
    - Single-element array.
    - If the first or last element is greater than its adjacent element, it is the peak.

- **Brute Force Approach (Approach 1)**:
  - A simple linear traversal through the array to check for the element where the next one is smaller.
  - Return the current element as the maximum.

---

✅ Time and Space Complexity:
- **Optimized Approach**:
  - **Time Complexity:** \( O(\log N) \) → Due to Binary Search.
  - **Space Complexity:** \( O(1) \) → No extra space used.
- **Brute Force Approach**:
  - **Time Complexity:** \( O(N) \) → Linear traversal.
  - **Space Complexity:** \( O(1) \) → No extra space used.

---

✅ Dry Run with Example:
Input: [1, 3, 8, 12, 4, 2]

1. Start: s = 1, e = 4 (Ignore edges)
2. mid = (1 + 4) / 2 → mid = 2 → arr[mid] = 8
    - arr[mid] > arr[mid-1] → Go Right
3. s = 3, e = 4
4. mid = (3 + 4) / 2 → mid = 3 → arr[mid] = 12
    - arr[mid] > arr[mid-1] and arr[mid] > arr[mid+1] → **Maximum Found**
Output: **12**

---

✅ **Optimized Approach (Using Binary Search)** 
*/

class Solution {
    public int findMaximum(int[] arr) {
        int n = arr.length;
        
        // Handle edge cases
        if (n == 1 || arr[0] > arr[1]) {
            return arr[0];
        }
        
        if (arr[n-1] > arr[n-2]) {
            return arr[n-1];
        }
        
        int s = 1;
        int e = n - 2;
        
        // Perform Binary Search
        while (s <= e) {
            int mid = s + (e - s) / 2;
            
            // Check if mid is the peak
            if (arr[mid] >= arr[mid-1] && arr[mid] > arr[mid+1]) {
                return arr[mid];
            }
            
            // If ascending, move right
            if (arr[mid] > arr[mid-1]) {
                s = mid + 1;
            } else {
                e = mid - 1; // Move left
            }
        }
        return arr[e];
    }

    // -------------------------------------------------------------------------------
    
    // ❗❗ Brute Force Approach
    /*
    public int findMaximum(int[] arr) {
        int n = arr.length;
        
        // Traverse through the array to find the maximum
        for (int i = 1; i < n; i++) {
            if (arr[i-1] > arr[i]) {
                return arr[i-1];
            }
        }
        return arr[n-1];
    }
    */
}

https://leetcode.com/problems/maximum-count-of-positive-integer-and-negative-integer/
/*
Approach Explanation:

Optimized Approach (Using Binary Search):
- The problem is to find the maximum count of either negative or positive numbers from the given sorted array.
- Using binary search, we efficiently find:
  1. `neg` → The index of the first non-negative number (i.e., the leftmost 0 or positive number).
  2. `one` → The index of the first positive number (leftmost number greater than or equal to 1).
  3. `pos` → Total positive numbers using the formula `nums.length - one`.
- Finally, return the maximum of `neg` and `pos`.

Time Complexity: **O(log N)** → Due to binary search.
Space Complexity: **O(1)** → Constant space used.

Brute-Force Approach:
- Iterate through the entire array to count the number of negatives and positives using simple loops.
- Time Complexity: **O(N)**, Space Complexity: **O(1)**.

Dry Run:
Example: nums = [-5, -3, -1, 0, 2, 3, 5]
1. neg = leftMost(nums, 0) → Index 3 (First non-negative)
2. one = leftMost(nums, 1) → Index 4 (First number ≥ 1)
3. pos = 7 - 4 = 3 (Count of positives)
4. Maximum Count = max(3, 3) = **3**
*/

class Solution {

    // Optimized Binary Search to find the leftmost index where a number is >= target
    public int leftMost(int[] nums, int target) {
        int lo = 0;
        int hi = nums.length - 1;

        // Perform binary search
        while (lo <= hi) {
            int mid = lo + (hi - lo) / 2;

            // If nums[mid] is greater than or equal to the target, check left part
            if (nums[mid] >= target) {
                hi = mid - 1;
            } else {
                lo = mid + 1; // Check the right part
            }
        }
        return lo; // Return the leftmost position
    }

    // Function to calculate maximum count of positive or negative numbers
    public int maximumCount(int[] nums) {
        // Find the leftmost index for 0 and 1 using binary search
        int neg = leftMost(nums, 0);
        int one = leftMost(nums, 1);

        // Calculate the count of positive numbers
        int pos = nums.length - one;

        // Return the maximum of negatives and positives
        return Math.max(neg, pos);
    }
}

/* 
Brute-Force Approach (Commented Out):
-----------------------------------------
This approach uses simple iteration to count negative and positive numbers.

public int maximumCount(int[] nums) {
    int negCount = 0;
    int posCount = 0;
    
    for (int num : nums) {
        if (num < 0) {
            negCount++;
        } else if (num > 0) {
            posCount++;
        }
    }
    return Math.max(negCount, posCount);
}

Time Complexity: O(N) - Single pass through the array.
Space Complexity: O(1) - No extra space used.
*/

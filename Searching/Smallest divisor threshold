https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/
/*
Approach Explanation:

Optimized Approach (Using Binary Search):
- The goal is to find the smallest divisor `k` such that the sum of the results of `nums[i] / k` (rounded up) does not exceed the given threshold.
- Perform a binary search on possible divisor values between 1 and 10^6 (since the divisor can't exceed the max value in the array).
- The helper function `isPossible()` checks whether the given divisor is valid by calculating the sum of `ceil(nums[i] / k)` using integer math.

Time Complexity: **O(N * log M)** → N for checking using `isPossible()`, log M for binary search (M = 10^6).
Space Complexity: **O(1)** → Constant space used.

Brute-Force Approach:
- Test all divisors from 1 to max(nums) and check if it satisfies the threshold using a loop.
- Time Complexity: **O(N * M)**, Space Complexity: **O(1)**.

Dry Run:
Example: nums = [1, 2, 5, 9], threshold = 6
1. Search range → l = 1, r = 10^6
2. mid = (1 + 10^6) / 2 → mid = 500000 (Too large, decrease `r`)
3. Continue halving and checking using `isPossible()`
4. Final divisor found → **k = 5**
*/

class Solution {

    // Helper function to check if a divisor 'k' satisfies the threshold
    public boolean isPossible(int[] nums, int threshold, int k) {

        // Iterate through the array to calculate the sum
        for (int i = 0; i < nums.length; i++) {
            int val = nums[i];
            
            // Calculate the result of ceil(nums[i] / k) using integer math
            int temp = val / k;
            if (val % k != 0) {
                temp++; // Equivalent to Math.ceil
            }

            // Subtract from the threshold
            threshold -= temp;

            // If the threshold becomes negative, return false
            if (threshold < 0) {
                return false;
            }
        }
        return true; // Return true if the threshold is not crossed
    }

    // Main function to find the smallest divisor
    public int smallestDivisor(int[] nums, int threshold) {
        Arrays.sort(nums); // Sorting the array (though not necessary for the logic)

        // Initialize binary search bounds
        int l = 1;
        int r = (int) Math.pow(10, 6);

        while (l <= r) {
            int mid = l + (r - l) / 2;

            // Check if mid is a possible divisor
            if (isPossible(nums, threshold, mid)) {
                r = mid - 1; // Search for a smaller divisor
            } else {
                l = mid + 1; // Increase the divisor
            }
        }

        return l; // Return the smallest valid divisor
    }
}

/* 
Brute-Force Approach (Commented Out):
-----------------------------------------
- Check all possible divisors from 1 to the maximum element of the array.
- For each divisor, calculate the sum using Math.ceil(nums[i] / k).
- Return the smallest divisor that satisfies the threshold.

public int smallestDivisor(int[] nums, int threshold) {
    int maxVal = Arrays.stream(nums).max().getAsInt();
    
    for (int k = 1; k <= maxVal; k++) {
        int sum = 0;
        for (int num : nums) {
            sum += Math.ceil((double) num / k);
        }
        if (sum <= threshold) {
            return k;
        }
    }
    return -1;
}

Time Complexity: O(N * M) - N for array traversal, M for divisor range.
Space Complexity: O(1) - Constant space.
*/

/*
 * Approach Explanation:
 * 
 * Problem: 
 * - Find the first and last positions of a given `target` in a sorted array `nums`.
 * - If the target is not found, return `[-1, -1]`.
 * 
 * Optimized Approach (Binary Search):
 * - Use **Binary Search** to efficiently find the leftmost and rightmost occurrences of the target.
 * - Perform a search twice: 
 *   - **Leftmost Search**: Finds the first occurrence of the target by checking if `nums[mid] >= target`.
 *   - **Rightmost Search**: Finds the last occurrence of the target by checking if `nums[mid] > target`.
 * 
 * Time Complexity: O(log n) → Due to binary search.
 * Space Complexity: O(1) → Constant space used for variables.
 * 
 * ---------------------------
 * 
 * Brute Force Approach:
 * - Traverse the entire array to find the first and last occurrences of the target.
 * - Time Complexity: O(n) → Linear search.
 * - Space Complexity: O(1).
 * 
 * ---------------------------
 * 
 * Example Dry Run (nums = [5, 7, 7, 8, 8, 10], target = 8):
 * 
 * **Leftmost Search**:
 * Step 1: l=0, r=5 → mid=2 → nums[mid]=7 (Less than 8) → l=3
 * Step 2: l=3, r=5 → mid=4 → nums[mid]=8 (Equal to target) → r=3
 * Step 3: l=3, r=3 → mid=3 → nums[mid]=8 (Equal to target) → r=2
 * Leftmost Index = 3
 * 
 * **Rightmost Search**:
 * Step 1: l=0, r=5 → mid=2 → nums[mid]=7 (Less than 8) → l=3
 * Step 2: l=3, r=5 → mid=4 → nums[mid]=8 (Equal to target) → l=5
 * Step 3: l=5, r=5 → mid=5 → nums[mid]=10 (Greater than 8) → r=4
 * Rightmost Index = 4
 * 
 * Final Result: [3, 4]
 */

class Solution {

    // Find Leftmost Occurrence using Binary Search
    public int leftMost(int[] nums, int target) {
        int l = 0, r = nums.length - 1;

        while (l <= r) {
            int mid = l + (r - l) / 2;

            // If nums[mid] >= target, search on the left
            if (nums[mid] >= target) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        // Check for out of bounds or if the target is not found
        if (l >= nums.length || nums[l] != target) {
            return -1;
        }
        return l;
    }

    // Find Rightmost Occurrence using Binary Search
    public int rightMost(int[] nums, int target) {
        int l = 0, r = nums.length - 1;

        while (l <= r) {
            int mid = l + (r - l) / 2;

            // If nums[mid] > target, search on the left
            if (nums[mid] > target) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        // Check for out of bounds or if the target is not found
        if (r < 0 || nums[r] != target) {
            return -1;
        }
        return r;
    }

    // Main Function to Get Leftmost and Rightmost Positions
    public int[] searchRange(int[] nums, int target) {
        if (nums.length == 0) {
            return new int[]{-1, -1}; // Return [-1, -1] if array is empty
        }
        int ans[] = new int[2];
        ans[0] = leftMost(nums, target);
        ans[1] = rightMost(nums, target);
        return ans;
    }
}

/*
 * Brute Force Approach (Commented Out)
 *
 * public int[] searchRange(int[] nums, int target) {
 *     int first = -1, last = -1;
 *     
 *     // Traverse to find the first occurrence
 *     for (int i = 0; i < nums.length; i++) {
 *         if (nums[i] == target) {
 *             if (first == -1) {
 *                 first = i;
 *             }
 *             last = i;
 *         }
 *     }
 *     return new int[]{first, last};
 * }
 */

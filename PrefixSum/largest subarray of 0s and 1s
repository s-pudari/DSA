https://www.geeksforgeeks.org/batch/gfg-160-problems/track/prefix-sum-gfg-160/problem/largest-subarray-of-0s-and-1s
//Approach 2 using prefixSum T.C --> O(n) S.C-->O(1)
import java.util.HashMap;

class Solution {
    public int maxLen(int[] arr) {
        // Get the length of the array
        int n = arr.length;

        // Variable to store the prefix sum
        int preSum = 0;

        // Variable to store the maximum length of the subarray with equal 0s and 1s
        int res = 0;

        // HashMap to store the first occurrence of a prefix sum
        HashMap<Integer, Integer> hm = new HashMap<>();

        // Traverse the array
        for (int i = 0; i < n; i++) {
            // Convert 0 to -1 to balance the sum
            if (arr[i] == 0) {
                preSum -= 1;
            } else {
                preSum += 1;
            }

            // If the prefix sum is 0, it means we found a subarray from index 0 to i
            if (preSum == 0) {
                res = i + 1;
            }

            // If preSum is already in the HashMap, update the maximum length
            if (hm.containsKey(preSum)) {
                res = Math.max(res, i - hm.get(preSum));
            } else {
                // Store the first occurrence of this prefix sum
                hm.put(preSum, i);
            }
        }
        
        // Return the maximum length of the balanced subarray
        return res;
    }
}

//Approach 1 using Brute Force T.C --> O(n^2) S.C --> O(1)
class Solution {
    public int maxLen(int[] arr) {
        // Get the length of the array
        int n = arr.length;
       
        // Variable to store the maximum length of a subarray with equal 0s and 1s
        int res = 0;
        
        // Iterate through all possible starting points of the subarray
        for (int i = 0; i < n; i++) {
            int sum = 0;
            
            // Iterate through all possible ending points of the subarray
            for (int j = i; j < n; j++) {
                // Treat 0 as -1 and 1 as +1 to balance the sum
                if (arr[j] == 0) {
                    sum -= 1;
                } else {
                    sum += 1;
                }
                
                // If sum becomes 0, it means we found a valid subarray
                if (sum == 0) {
                    res = Math.max(res, j - i + 1); // Update max length
                }
            }
        }
        
        // Return the maximum length of the balanced subarray
        return res;
    }
}

//https://www.geeksforgeeks.org/batch/gfg-160-problems/track/prefix-sum-gfg-160/problem/longest-sub-array-with-sum-k0809
//Approach 1 using brute T.C --> O(n^2) S.C-->O(1) its easy run two for loops
//Approach 2 using prefixsum T.C & S.C --> O(n) 
class Solution {
    public int longestSubarray(int[] arr, int k) {
        // code here
        int n=arr.length;
        int res=0;
        int prefixsum=0;
        HashMap<Integer,Integer> hm = new HashMap<>();
        
        for(int i=0;i<n;i++){
            
             prefixsum +=arr[i];
             
             if(prefixsumsum==k){
                 res=i+1;
             }
             
             else if(hm.containsKey(prefixsum-k)){
                 res=Math.max(res,i-hm.get(prefixsum-k));
             }
             
             if(!hm.containsKey(prefixsum)){
             hm.put(prefixsum,i);
             }
        }
        return res;
    }
}

//Approach 2 optimising the Space Complexity T.C --> O(n) S.C --> O(1)
class Solution {
    // Function to find equilibrium point in the array.
    public static int findEquilibrium(int arr[]) {
        // code here
        int n=arr.length;
        int totalSum=0,leftSum=0;
        
        for(int num : arr){
            totalSum+=num;
        }
        
        for(int i=0;i<n;i++){
            int rightSum = totalSum - (arr[i]+leftSum);
            
            if(rightSum==leftSum){
                return i;
            }
            leftSum+=arr[i];
        }
        return -1;
    }
}
//Approach 1 using Brute Force T.C --> O(n) S.C--> O(2n)
class Solution {
    // Function to find equilibrium point in the array.
    public static int findEquilibrium(int arr[]) {
        // code here
        int n=arr.length;
        int suffixSum[]= new int[n];
        
         suffixSum[n-1]=arr[n-1];
        for(int i=n-2;i>=0;i--){
            suffixSum[i]=suffixSum[i+1]+arr[i];
        }
        
        int prefixSum[] = new int[n];
         prefixSum[0]=arr[0];
        for(int i=1;i<n;i++){
            prefixSum[i]=arr[i]+prefixSum[i-1];
            
        }
        
        for(int i=1;i<n-1;i++){
            if(prefixSum[i-1]==suffixSum[i+1]){
                return i;
            }
        }
        return -1;
    }
}

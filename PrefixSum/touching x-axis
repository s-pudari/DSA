https://www.geeksforgeeks.org/batch/gfg-160-problems/track/prefix-sum-bonus-problem/problem/number-of-times-graph-cuts-x-axis
/*
Approach Explanation:

- **Optimized Approach:** 
  - Track the current sum while iterating through the array.
  - Check if the sum transitions from negative to non-negative (or vice versa) to detect when it touches or crosses the x-axis.
  - Efficiently keeps track using a constant space variable.

- **Brute Force Approach (Commented):**
  - Calculate cumulative sums for every index.
  - Check for sign changes using nested loops.
  - Time-consuming and inefficient.

Time Complexity:
- Optimized: **O(n)**  
- Brute Force: **O(nÂ²)**

Space Complexity:
- Optimized: **O(1)**
- Brute Force: **O(1)**

Dry Run Example:
Input: [5, -10, 3, 7, -8]

Initial curr = 0, res = 0

1. prev = 0, curr = 5 => No x-axis touch.
2. prev = 5, curr = -5 => Touches x-axis, res++ (res = 1)
3. prev = -5, curr = -2 => No x-axis touch.
4. prev = -2, curr = 5 => Touches x-axis, res++ (res = 2)
5. prev = 5, curr = -3 => Touches x-axis, res++ (res = 3)

Output: 3
*/

class Solution {
    public int touchedXaxis(int[] arr) {
        // Optimized Approach
        int curr = 0;
        int res = 0;
        
        for (int i = 0; i < arr.length; i++) {
            int prev = curr;
            curr += arr[i];
            
            // Check for x-axis touch or crossing
            if ((prev < 0 && curr >= 0) || (prev > 0 && curr <= 0)) {
                res++;
            }
        }
        return res;
    }

    /*
    // Brute Force Approach
    public int touchedXaxis(int[] arr) {
        int res = 0;
        for (int i = 0; i < arr.length; i++) {
            int sum = 0;
            for (int j = 0; j <= i; j++) {
                sum += arr[j];
            }
            if (i > 0) {
                int prevSum = sum - arr[i];
                if ((prevSum < 0 && sum >= 0) || (prevSum > 0 && sum <= 0)) {
                    res++;
                }
            }
        }
        return res;
    }
    */
}

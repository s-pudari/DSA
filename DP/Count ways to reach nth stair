https://www.geeksforgeeks.org/batch/gfg-160-problems/track/dynamic-programming-gfg-160/problem/count-ways-to-reach-the-nth-stair-1587115620
class Solution {

    /* 
     * Problem: Count ways to reach the nth stair where you can take either 1 step or 2 steps at a time.
     *
     * ➤ Optimized Approach (Space Optimization):
     * - This is similar to calculating the nth Fibonacci number.
     * - At any step `i`, you can reach it either from `i-1` (1 step before) or `i-2` (2 steps before).
     * - So, total ways to reach `i` = ways(i-1) + ways(i-2).
     * - We maintain only two variables to store results of previous steps.
     *
     * Time Complexity: O(n)
     * Space Complexity: O(1)
     *
     * ➤ Brute Force (Recursive):
     * - Recursively break down the problem by calling the function for (n-1) and (n-2).
     * - No memoization or caching, leading to exponential calls.
     *
     * Time Complexity: O(2^n)
     * Space Complexity: O(n) (due to recursion stack)
     *
     * Dry Run (n = 4):
     * ----------------
     * Ways(4) = Ways(3) + Ways(2)
     *         = (Ways(2) + Ways(1)) + (Ways(1) + Ways(0))
     *         = ((Ways(1) + Ways(0)) + 1) + (1 + 1)
     *         = ((1 + 1) + 1) + 2 = 5
     */

    // -------------------------------------------------------------
    // Approach 4: Optimized Space (Best among all)
    // -------------------------------------------------------------
    int countWays(int n) {
        if (n == 0 || n == 1) return 1;

        int prev0 = 1; // ways to reach step 0
        int prev1 = 1; // ways to reach step 1
        int curr = 0;

        for (int i = 2; i <= n; i++) {
            curr = prev0 + prev1; // current ways = sum of previous two
            prev0 = prev1;        // update prev0 to previous step
            prev1 = curr;         // update prev1 to current
        }

        return curr; // total ways to reach step n
    }

    // -------------------------------------------------------------
    // Approach 3: Bottom-Up Tabulation (DP Array)
    // -------------------------------------------------------------
    /*
    int countWays(int n) {
        if (n == 0 || n == 1) return 1;

        int[] dp = new int[n + 1];
        dp[0] = 1; // 1 way to stay at ground level
        dp[1] = 1; // 1 way to reach step 1

        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2]; // sum of last two steps
        }

        return dp[n]; // total ways to reach step n
    }
    */

    // -------------------------------------------------------------
    // Approach 2: Top-Down DP with Memoization
    // -------------------------------------------------------------
    /*
    int countWays(int n) {
        int[] dp = new int[n + 1];

        // Initialize all values as -1 to indicate uncomputed states
        for (int i = 0; i <= n; i++) {
            dp[i] = -1;
        }

        return recDP(n, dp);
    }

    int recDP(int n, int[] dp) {
        if (n == 0 || n == 1) {
            return dp[n] = 1; // base cases
        }

        if (dp[n] != -1) {
            return dp[n]; // return cached result if already computed
        }

        /* 
         * Recursive calls to compute number of ways to reach (n-1) and (n-2)
         * Memoize the result in dp[n] to avoid recomputation
         */
        return dp[n] = recDP(n - 1, dp) + recDP(n - 2, dp);
    }
    */

    // -------------------------------------------------------------
    // Approach 1: Brute-force Recursive (No Memoization)
    // -------------------------------------------------------------
    /*
    int countWays(int n) {
        return rec(n);
    }

    int rec(int n) {
        if (n == 0 || n == 1) {
            return 1; // Only 1 way to reach step 0 or 1
        }

        // Two recursive calls to compute ways from previous two steps
        return rec(n - 1) + rec(n - 2);
    }
    */
}


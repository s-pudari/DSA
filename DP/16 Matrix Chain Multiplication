https://www.geeksforgeeks.org/batch/gfg-160-problems/track/dynamic-programming-gfg-160/problem/matrix-chain-multiplication0303
class Solution {
    
    /*
    Matrix Chain Multiplication Problem:
    Given an array arr[] of size n that represents dimensions of matrices such that
    the ith matrix has dimensions (arr[i-1] x arr[i]), we need to find the minimum number 
    of scalar multiplications needed to multiply the chain.

    ---------------------
    ✅ Optimized Approach (Memoization - Top Down):
    We use recursion + DP to store results of overlapping subproblems.

    Time Complexity: O(n^3)
    Space Complexity: O(n^2) for DP table

    Dry run for arr = {40, 20, 30, 10, 30}
    Matrices:
        A1: 40x20
        A2: 20x30
        A3: 30x10
        A4: 10x30

    We want to find minimum cost for multiplying A1*A2*A3*A4.
    Let’s try split at different k:
        For k=1: cost = (40*20*30) + solve(1,1) + solve(2,4)
        For k=2: cost = (40*30*10) + solve(1,2) + solve(3,4)
        For k=3: cost = (40*10*30) + solve(1,3) + solve(4,4)
    We find the minimum of these options.
    ---------------------

    ✅ Brute Force Approach (Commented Below):
    Same recursive logic, but without storing subproblem results.

    Time Complexity: Exponential O(2^n)
    Space Complexity: O(n) (Recursion stack)

    Dry Run: Same as above, but recomputes subproblems many times.
    ---------------------
    */

    // Optimized approach using memoization (Top-Down DP)
    static int matrixMultiplication(int arr[]) {
        int n = arr.length;

        /* Create dp table of size n x n and initialize all values as -1 
           dp[i][j] represents minimum multiplication cost from matrix i to j */
        int[][] dp = new int[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                dp[i][j] = -1;
            }
        }

        // We start from 1 to n-1 because matrix A1 is arr[0]xarr[1], A2 is arr[1]xarr[2], etc.
        return rec(1, n - 1, arr, dp);
    }

    static int rec(int i, int j, int[] arr, int[][] dp) {
        // Base case: only one matrix, no multiplication needed
        if(i == j) return 0;

        // Return already computed result
        if(dp[i][j] != -1) return dp[i][j];

        int min = Integer.MAX_VALUE;

        // Try all possible places to split the product
        for(int k = i; k < j; k++) {
            /* arr[i-1]*arr[k]*arr[j] is the cost of multiplying two resulting matrices
               solve(i,k) is cost of left part, solve(k+1,j) is right part */
            int steps = arr[i - 1] * arr[k] * arr[j] + rec(i, k, arr, dp) + rec(k + 1, j, arr, dp);
            if(steps < min) min = steps;
        }

        return dp[i][j] = min;
    }

    // -----------------------------------------
    // Brute-force approach (Pure recursion)
    // -----------------------------------------
    
    static int matrixMultiplication(int arr[]) {
        int n = arr.length;
        return rec(1, n - 1, arr);
    }

    static int rec(int i, int j, int[] arr) {
        // Base case: no multiplication needed
        if(i == j) return 0;

        int min = Integer.MAX_VALUE;

        // Try all possible splits
        for(int k = i; k < j; k++) {
            /* Cost = cost of multiplying left side + right side + final multiplication step */
            int steps = arr[i - 1] * arr[k] * arr[j] + rec(i, k, arr) + rec(k + 1, j, arr);
            if(steps < min) min = steps;
        }

        return min;
    }
    
}

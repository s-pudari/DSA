class Solution {
    //Approach 3 using Tabulation
    
    //Approach 2 using DP
    /*
    static int knapsack(int W, int val[], int wt[]) {
        // code here
        int n=val.length;
        int[][] dp=new int[n+1][W+1];
        
        for(int i=0;i<=n;i++){
            for(int j=0;j<=W;j++){
            dp[i][j]=-1;
            }
        }
       
        
        return rec(W,val,wt,n,dp);
    }
    
    static int rec(int W,int[] val,int[] wt,int n,int[][] dp){
        if(n==0 || W==0) return 0;
        
        if(dp[n][W] != -1) return dp[n][W];
        
        int pick=0;
        
        if(wt[n-1]<=W){
            pick=val[n-1]+rec(W-wt[n-1],val,wt,n-1,dp);
            // dp[n-1]=pick;
        }
        
        int notpick = rec(W,val,wt,n-1,dp);
        // dp[n-1]=notpick;
        
        return dp[n][W]=Math.max(pick,notpick);
    }*/
    //Approach 1 using rec
    /*
    static int knapsack(int W, int val[], int wt[]) {
        // code here
        int n=val.length;
        
       
        
        return rec(W,val,wt,n);
    }
    
    static int rec(int W,int[] val,int[] wt,int n){
        if(n==0 || W==0) return 0;
        
        
        int pick=0;
        
        if(wt[n-1]<=W){
            pick=val[n-1]+rec(W-wt[n-1],val,wt,n-1);
        }
        
        int notpick = rec(W,val,wt,n-1);
        
        return Math.max(pick,notpick);
    }*/
}

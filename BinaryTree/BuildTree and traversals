public class BT{
    static class Node{
        int data;
        Node left;
        Node right;

        Node(int data){
            this.data=data;
            this.left=null;
            this.right=null;
        }
    }
    
    static class BinaryTree{
        static int idx=-1;
        public static Node buildTree(int[] nodes){
            idx++;
            if(nodes[idx]==-1){
                return null;
            }
            Node newNode = new Node(nodes[idx]);
            newNode.left = buildTree(nodes);
            newNode.right = buildTree(nodes);
            return newNode;
        }
    }
    //Traversals
    public static void preOrder(Node root){
        if(root==null){
            //System.out.print("-1 ");
            return ;
        }
        System.out.print(root.data+" ");
        preOrder(root.left);
        preOrder(root.right);
    }
    
    public static void inOrder(Node root){
        if(root==null){
            //System.out.print("-1 ");
            return;
        }
        inOrder(root.left);
        System.out.print(root.data+" ");
        inOrder(root.right);
    }

    public static void postOrder(Node root){
        if(root==null){
            //System.out.print("-1 ");
            return;
        }

        postOrder(root.left);
        preOrder(root.right);
        System.out.print(root.data+" ");
    } 

  public static void levelOrder(Node root){
        Queue<Node> q = new LinkedList<>();

        q.add(root);
        q.add(null);

        while(!q.isEmpty()){
            Node curr=q.remove();
            if(curr==null){
                System.out.println();
                if(q.isEmpty()){
                    break;
                }
                else{
                    q.add(null);
                }
            }
            else{
               System.out.print(curr.data+" ");
               if(curr.left!=null){
                q.add(curr.left);
               }
               if(curr.right!=null){
                q.add(curr.right);
               }
            }

        }
    }

public static int countNodes(Node root){
        if(root==null){
            return 0;
        }
        int left=countNodes(root.left);
        int right=countNodes(root.right);
        return left+right+1;
    }
public static int sumOfNodes(Node root){
        if(root==null){
            return 0;
        }

        int leftSum=sumOfNodes(root.left);
        int rightSum=sumOfNodes(root.right);

        return leftSum+rightSum+root.data;
    }

    public static void main(String[] args) {
        int[] nodes={1,2,3,-1,-1,4,-1,-1,5,-1,7,-1,-1};

        BinaryTree tree = new BinaryTree();
         Node root = tree.buildTree(nodes);
         System.out.print("root-->"+root.data+" left-->");
         System.out.print(root.left.data+" right-->");
         System.out.print(root.right.data);

         preOrder(root);
        System.out.println("<--PreOrder ");
        inOrder(root);
        System.out.println("<--InOrder ");
        postOrder(root);
        System.out.println("<--PostOrder ");
         levelOrder(root);
        System.out.println("<--LevelOrder ");

    System.out.println("Total Nodes "+countNodes(root));
    System.out.println("Sum Of Nodes "+sumOfNodes(root));

      
    }
}

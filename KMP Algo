https://www.geeksforgeeks.org/batch/gfg-160-problems/track/string-gfg-160/problem/search-pattern0205
//Approach 2 using KMP Algo T.C --> O(n+m) S.C --> O(m)
class Solution {

    ArrayList<Integer> search(String pat, String txt) {
        ArrayList<Integer> li = new ArrayList<>();
        int m = pat.length();
        int n = txt.length();

        // Step 1: Build the LPS (Longest Prefix Suffix) array
        int[] lps = buildLPS(pat);

        int i = 0; // Pointer for txt
        int j = 0; // Pointer for pat

        // Step 2: Perform KMP search
        while (i < n) {
            if (txt.charAt(i) == pat.charAt(j)) {
                i++;
                j++;
            }

            if (j == m) {
                // Found a match, add 1-based index to the list
                li.add(i - j);
                // Reset j using LPS for next potential match
                j = lps[j - 1];
            } else if (i < n && txt.charAt(i) != pat.charAt(j)) {
                // Mismatch after j matches
                if (j != 0) {
                    j = lps[j - 1]; // Use LPS to skip redundant checks
                } else {
                    i++; // Move to the next character in txt
                }
            }
        }

        return li;
    }

    // Helper function to build the LPS array
    private int[] buildLPS(String pat) {
        int m = pat.length();
        int[] lps = new int[m];
        int len = 0; // Length of the previous longest prefix suffix
        int i = 1;

        while (i < m) {
            if (pat.charAt(i) == pat.charAt(len)) {
                len++;
                lps[i] = len;
                i++;
            } else {
                if (len != 0) {
                    len = lps[len - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }

        return lps;
    }
}

//Approach 1 Using Brute Force T.C --> O(n^2) S.C --> O(1)
class Solution {

    ArrayList<Integer> search(String pat, String txt) {
        
        // Create an ArrayList to store the starting indices of pattern matches
        ArrayList<Integer> li = new ArrayList<>();
        
        // Get the lengths of the pattern and the text
        int m = pat.length();
        int n = txt.length();
        
        // Iterate through the text to check for the pattern
        // Outer loop ensures we only check valid starting positions (i <= n - m)
        for (int i = 0; i <= n - m; i++) {
            // Assume a match initially
            boolean match = true;
            
            // Inner loop checks if the pattern matches the substring in the text
            for (int j = 0; j < m; j++) {
                // Compare characters of the text and the pattern
                if (txt.charAt(i + j) != pat.charAt(j)) {
                    // If a mismatch is found, set match to false and break the loop
                    match = false;
                    break;
                }
            }
            
            // If match is still true after the inner loop, the pattern is found
            if (match) {
                // Add the starting index (i) of the match to the list
                li.add(i);
            }
        }
        
        // Return the list of starting indices where the pattern was found
        return li;
    }
}

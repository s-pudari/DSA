import java.util.*;

class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] vis = new boolean[V]; // Visited array
        Queue<Integer> q = new LinkedList<>(); // Queue for BFS
        ArrayList<Integer> bfs = new ArrayList<>(); // Result list

        vis[0] = true; // Start from node 0
        q.add(0);

        while (!q.isEmpty()) {
            int node = q.poll(); // Get front node from queue
            bfs.add(node);       // Add it to result

            // Visit all adjacent nodes
            for (int it : adj.get(node)) {
                if (!vis[it]) {       // If not visited
                    vis[it] = true;   // Mark as visited
                    q.add(it);        // Add to queue
                }
            }
        }

        return bfs;
    }

    // Main method to test the BFS function
    public static void main(String[] args) {
        int V = 5; // Number of vertices

        // Creating adjacency list for the graph
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        // Adding edges (undirected graph example)
        adj.get(0).add(1);
        adj.get(0).add(2);
        adj.get(1).add(0);
        adj.get(1).add(3);
        adj.get(2).add(0);
        adj.get(3).add(1);
        adj.get(3).add(4);
        adj.get(4).add(3);

        // Explanation of the Graph:
        /*
            0 -- 1 -- 3 -- 4
            |         ^
            2 --------|
            BFS from node 0 should visit: 0 → 1 → 2 → 3 → 4
        */

        Solution sol = new Solution();
        ArrayList<Integer> bfsResult = sol.bfsOfGraph(V, adj);

        System.out.println("BFS Traversal starting from node 0:");
        for (int node : bfsResult) {
            System.out.print(node + " ");
        }
    }
}

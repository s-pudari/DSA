https://www.geeksforgeeks.org/problems/depth-first-traversal-for-a-graph/1

import java.util.*;

class Solution {

    /**
     * ðŸ§  PROBLEM STATEMENT:
     * ---------------------
     * Given an undirected or directed graph represented using an adjacency list,
     * perform **Depth First Search (DFS)** traversal starting from vertex 0.
     *
     * Return the list of vertices in the order they are visited.
     *
     * âœ… TIME COMPLEXITY: O(V + E) 
     * âœ… SPACE COMPLEXITY: O(V) -> due to visited array and recursion stack
     */

    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfs(ArrayList<ArrayList<Integer>> adj) {
        int V = adj.size();                   // Number of vertices
        boolean[] vis = new boolean[V];       // Visited array
        ArrayList<Integer> lis = new ArrayList<>();  // Result list

        // Start DFS from node 0
        getDFS(0, vis, adj, lis);

        return lis;
    }

    // Recursive DFS utility function
    public void getDFS(int node, boolean[] vis, ArrayList<ArrayList<Integer>> adj, ArrayList<Integer> lis) {
        lis.add(node);      // Add current node to result
        vis[node] = true;   // Mark current node as visited

        // Visit all unvisited adjacent nodes
        for (int it : adj.get(node)) {
            if (!vis[it]) {
                getDFS(it, vis, adj, lis); // Recurse
            }
        }
    }

    // Main method to test the DFS function
    public static void main(String[] args) {
        int V = 5; // Number of vertices

        // Create adjacency list
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        // Add edges (undirected graph example)
        adj.get(0).add(1);
        adj.get(0).add(2);
        adj.get(1).add(0);
        adj.get(1).add(3);
        adj.get(2).add(0);
        adj.get(3).add(1);
        adj.get(3).add(4);
        adj.get(4).add(3);

        // Graph:
        /*
            0 -- 1 -- 3 -- 4
            |    
            2
            DFS from node 0 â†’ 0, 1, 3, 4, 2 (depending on neighbor order)
        */

        Solution sol = new Solution();
        ArrayList<Integer> dfsResult = sol.dfs(adj);

        System.out.println("DFS Traversal starting from node 0:");
        for (int node : dfsResult) {
            System.out.print(node + " ");
        }
    }
}

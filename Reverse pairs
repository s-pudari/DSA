https://leetcode.com/problems/reverse-pairs/description/
//Approach 2 Optimised Using mergeSort T.C --> O(2 log n) S.C--> O(n)
class Solution {
    public void merge(int[] arr,int l,int mid,int r){
        int left=l;
        int right=mid+1;
        List<Integer> li=new ArrayList<>();
        while(left<=mid && right<=r){
            if(arr[left]<=arr[right]){
                li.add(arr[left]);
                left++;
            }
            else{
                li.add(arr[right]);
                right++;
            }
        }

        while(left<=mid){
            li.add(arr[left]);
            left++;
        }

        while(right<=r){
            li.add(arr[right]);
            right++;
        }
        for(int i=l;i<=r;i++){
            arr[i]=li.get(i-l);
        }
    }
    public int countPairs(int[] arr, int l,int mid,int r){
        int cnt=0;
        int right=mid+1;
        for(int i=l;i<=mid;i++){
            while(right<=r && (long)arr[i]> 2L *arr[right]) right++;
            cnt += right-(mid+1);
        }
        return cnt;
    }
    public int mergeSort(int[] arr,int l,int r){
        int count=0;
        if(l>=r) return count;
        int mid=l+(r-l)/2;

        count+=mergeSort(arr,l,mid);
        count+=mergeSort(arr,mid+1,r);
        count+=countPairs(arr,l,mid,r);
        merge(arr,l,mid,r);
        return count;

    }
    public int reversePairs(int[] nums) {
        int n=nums.length;
        int count = mergeSort(nums,0,n-1);
        return count;
    }

}
//Approach 1 Brute Force T.C --> O(n^2) S.C --> O(1)
class Solution {
    public int reversePairs(int[] nums) {
        int n=nums.length;
        int cnt=0;
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                if(nums[i]>2L*nums[j]){
                    cnt++;
                }
            }
        }
        return cnt;
    }
}

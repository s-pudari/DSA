https://leetcode.com/problems/kth-largest-element-in-an-array/
class Solution {
    /*
    Approach:
    - We use a **Min Heap (PriorityQueue in Java)** to efficiently find the Kth largest element.
    - Insert elements into the Min Heap one by one.
    - If the heap size exceeds `k`, remove the smallest element (ensuring the heap contains only k largest elements).
    - At the end, the top element in the Min Heap will be the Kth largest.

    Dry Run:
    Input: nums = [3, 2, 1, 5, 6, 4], k = 2

    Step 1: Insert 3 -> Heap = [3]
    Step 2: Insert 2 -> Heap = [2, 3]
    Step 3: Insert 1 -> Heap = [1, 3, 2] (remove 1) → [2, 3]
    Step 4: Insert 5 -> Heap = [2, 3, 5] (remove 2) → [3, 5]
    Step 5: Insert 6 -> Heap = [3, 5, 6] (remove 3) → [5, 6]
    Step 6: Insert 4 -> Heap = [4, 6, 5] (remove 4) → [5, 6]

    Final Answer: 5 (top of heap)

    Time Complexity:
    - Inserting an element in a heap: **O(log k)**
    - Iterating through `n` elements: **O(n log k)**
    - Overall complexity: **O(n log k)**
    */

    public int findKthLargest(int[] nums, int k) {
        // Min Heap to store k largest elements
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();

        // Process each number in the array
        for(int num : nums){
            minHeap.add(num); // Insert into heap
            if(minHeap.size() > k){
                minHeap.poll(); // Remove the smallest element to maintain k elements
            }
        }

        // The Kth largest element will be at the top of the heap
        return minHeap.poll();
    }
}

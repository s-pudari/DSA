https://www.geeksforgeeks.org/batch/gfg-160-problems/track/heap-gfg-160/problem/merge-k-sorted-linked-lists
import java.util.*;

class Node {
    int data;
    Node next;
    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class Solution {
    /**
     * Function to merge K sorted linked lists.
     * @param arr - List of head nodes representing K sorted linked lists
     * @return Merged sorted linked list
     */
    Node mergeKLists(List<Node> arr) {
        // Edge case: If no lists are present, return null.
        if (arr.size() == 0) return null;

        // Start recursive merging of lists
        return mergeRec(0, arr.size() - 1, arr);
    }

    /**
     * Recursive function to divide and merge lists using divide and conquer.
     * @param i - Start index
     * @param j - End index
     * @param arr - List of sorted linked lists
     * @return Head node of merged linked list
     */
    Node mergeRec(int i, int j, List<Node> arr) {
        // Base case: If only one list remains, return it
        if (i == j) return arr.get(i);

        // Find mid-point
        int mid = i + (j - i) / 2;

        // Recursively merge left and right halves
        Node head1 = mergeRec(i, mid, arr);
        Node head2 = mergeRec(mid + 1, j, arr);

        // Merge the two sorted linked lists
        return merge(head1, head2);
    }

    /**
     * Function to merge two sorted linked lists.
     * @param head1 - First sorted linked list
     * @param head2 - Second sorted linked list
     * @return Merged sorted linked list
     */
    Node merge(Node head1, Node head2) {
        // Dummy node to simplify merging
        Node dummy = new Node(-1);
        Node temp = dummy;

        // Merge nodes from both lists in sorted order
        while (head1 != null && head2 != null) {
            if (head1.data <= head2.data) {
                temp.next = head1;
                head1 = head1.next;
            } else {
                temp.next = head2;
                head2 = head2.next;
            }
            temp = temp.next;
        }

        // Append the remaining nodes
        if (head1 != null) temp.next = head1;
        else temp.next = head2;

        return dummy.next; // Return merged list starting from the next of dummy
    }

    // Utility function to print linked list
    static void printList(Node head) {
        while (head != null) {
            System.out.print(head.data + " -> ");
            head = head.next;
        }
        System.out.println("NULL");
    }

    // Driver code for testing
    public static void main(String[] args) {
        List<Node> arr = new ArrayList<>();
        
        arr.add(new Node(1));
        arr.get(0).next = new Node(4);
        arr.get(0).next.next = new Node(5);
        
        arr.add(new Node(1));
        arr.get(1).next = new Node(3);
        arr.get(1).next.next = new Node(4);
        
        arr.add(new Node(2));
        arr.get(2).next = new Node(6);

        Solution sol = new Solution();
        Node mergedHead = sol.mergeKLists(arr);

        System.out.println("Merged Linked List:");
        printList(mergedHead);
    }
}

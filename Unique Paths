https://leetcode.com/problems/unique-paths/description/

//Approach 2 through factorial/Combinations T.C --> O(r) S.C-->O(1)
class Solution {
    public int uniquePaths(int m, int n) {
        // Total number of steps needed to go from top-left to bottom-right
        // (m-1 down steps + n-1 right steps). This is equivalent to (m+n-2).
        int N = n + m - 2;

        // Number of down steps (or right steps) to be chosen from the total steps.
        // This is the smaller of (m-1) or (n-1), but here we directly use (m-1).
        int r = m - 1;

        // Result is initialized as 1, which will store the final value of NCr.
        double res = 1;

        // Loop to calculate NCr using the formula:
        // NCr = (N * (N-1) * ... * (N-r+1)) / (r * (r-1) * ... * 1)
        for (int i = 1; i <= r; i++) {
            // Multiply the numerator term by (N-r+i) and divide by the current denominator term (i).
            res = res * (N - r + i) / i;
        }

        // Return the result as an integer since the number of unique paths will always be a whole number.
        return (int) res;
    }
}

//Approach 1 Recursion T.C --> O(2^(n+m)) S.C --> O(m+n)
class Solution {
    public int uniquePaths(int m, int n) {
        // Call the helper function to calculate paths starting from the top-left corner (0,0).
        int count = countPaths(0, 0, m, n);
        return count; // Return the total number of unique paths.
    }

    // Helper function to recursively calculate the number of unique paths.
    public int countPaths(int i, int j, int n, int m) {
        // Base case: If the bottom-right corner (n-1, m-1) is reached, return 1 (one valid path found).
        if (i == n - 1 && j == m - 1) return 1;

        // Base case: If the indices are out of bounds, return 0 (invalid path).
        if (i >= n || j >= m) return 0;

        // Recursive calls:
        // 1. Move "down" to the next row: countPaths(i+1, j, n, m).
        // 2. Move "right" to the next column: countPaths(i, j+1, n, m).
        // Add the results of both calls to get the total paths from the current cell (i, j).
        return countPaths(i + 1, j, n, m) + countPaths(i, j + 1, n, m);
    }
}

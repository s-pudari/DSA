https://leetcode.com/problems/combination-sum/description/
class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ansList = new ArrayList<>();
        findCombinations(0,candidates,target,ansList,new ArrayList<>());
        return ansList;
    }
    public static void findCombinations(int idx,int[] arr,int target,List<List<Integer>> ansList,ArrayList<Integer> ds){
        if(idx==arr.length){
            if(target==0){
                ansList.add(new ArrayList<>(ds));
            }
                return;
        }

        if(arr[idx]<=target){
            ds.add(arr[idx]);
            findCombinations(idx,arr,target-arr[idx],ansList,ds);
            ds.remove(ds.size()-1);
        }
        findCombinations(idx+1,arr,target,ansList,ds);
    }
}

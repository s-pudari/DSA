https://www.geeksforgeeks.org/problems/subset-sums2234/1
//T.C & S.C --> O(2^N + 2^N log(2^N))

import java.util.*;

class Solution {
    public ArrayList<Integer> subsetSums(int[] arr) {
        // Get the size of the input array
        int n = arr.length;
        
        // List to store all subset sums
        ArrayList<Integer> result = new ArrayList<>();
        
        // Call the recursive function to generate all subset sums
        allSubsets(arr, 0, 0, result, n);
        
        // Return the list of subset sums
        return result;
    }
    
    public static void allSubsets(int[] arr, int idx, int sum, ArrayList<Integer> result, int N) {
        // Base Case: When we reach the end of the array, store the sum in result
        if (idx == N) {
            result.add(sum);
            return;
        }
        
        // **Tree Recursion:**
        // **1. Include the current element in the subset (add it to the sum)**
        allSubsets(arr, idx + 1, sum + arr[idx], result, N);
        
        // **2. Exclude the current element from the subset (keep the sum unchanged)**
        allSubsets(arr, idx + 1, sum, result, N);
    }
}


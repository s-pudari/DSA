https://www.geeksforgeeks.org/batch/gfg-160-problems/track/two-pointer-technique-gfg-160/problem/count-possible-triangles-1587115620
//Approach 1 using Brute Force O(n^3) S.C --> O(1)
class Solution {
    // Function to count the number of possible triangles without sorting
    static int countTriangles(int arr[]) {
        int n = arr.length;
        int cnt = 0;

        // Check all triplets (i, j, k)
        for (int i = 0; i < n - 2; i++) {  // First side
            for (int j = i + 1; j < n - 1; j++) {  // Second side
                for (int k = j + 1; k < n; k++) {  // Third side
                    // Check the triangle condition without sorting
                    if (arr[i] + arr[j] > arr[k] && arr[i] + arr[k] > arr[j] && arr[j] + arr[k] > arr[i]) {
                        cnt++;
                    }
                }
            }
        }
        return cnt;
    }

    public static void main(String[] args) {
        int arr[] = {4, 6, 3, 7};
        System.out.println("Number of triangles: " + countTriangles(arr));
    }
}
//Approach 2 using Two pointer T.C-->O(n^2 log n) S.C --> O(1)
class Solution {
    // Function to count the number of possible triangles.
    static int countTriangles(int arr[]) {
        // code here
        int cnt=0;
        Arrays.sort(arr);
        for(int i=2;i<arr.length;i++){
            int l=0,r=i-1;
            while(l<r){
                
                if(arr[l]+arr[r]>arr[i]){
                    cnt+=r-l;
                    r--;
                }
                else{
                    l++;
                }
                
            }
        }
        return cnt;
      
    }
}

/*
🎯 Problem: Subarray With Given Sum (Positive Integers Only)

Given an array `arr[]` of non-negative integers and a target value `target`, 
find a **continuous subarray** that sums up to `target`. Return 1-based starting and ending indices.

If no such subarray exists, return [-1].

🔁 Example:
Input: arr = [1, 2, 3, 7, 5], target = 12
Output: [2, 4] → because 2+3+7 = 12

--------------------------------------------------

🧠 Brute-force Approach:

🔸 Idea:
- For every index `i`, start another loop `j = i` to check the sum of arr[i...j]
- Stop when sum equals target

📈 Time Complexity: O(n²)  
📦 Space Complexity: O(1)

🧪 Dry Run:
arr = [1, 2, 3, 7, 5], target = 12
→ i=1, j=1 sum=2  
→ j=2 sum=5  
→ j=3 sum=12 ✅ → return [2, 4]

🔧 Code:
*/
// Uncomment to test brute-force
/*
class Solution {
    static ArrayList<Integer> subarraySum(int[] arr, int target) {
        ArrayList<Integer> res = new ArrayList<>();
        
        for(int i = 0; i < arr.length; i++) {
            int sum = 0;

            for(int j = i; j < arr.length; j++) {
                sum += arr[j];

                if(sum == target) {
                    res.add(i + 1); // 1-based indexing
                    res.add(j + 1);
                    return res;
                }
                else if (sum > target) break;
            }
        }

        res.add(-1);
        return res;
    }
}
*/

--------------------------------------------------

/*
🧠 Optimized Approach (Sliding Window)

🔸 Idea:
- Since all elements are non-negative, we can use a sliding window
- Expand right pointer to add elements to the current window
- Shrink left pointer when sum > target

📈 Time Complexity: O(n)  
📦 Space Complexity: O(1)

🧪 Dry Run:
arr = [1, 2, 3, 7, 5], target = 12

➤ sum = 1 + 2 + 3 + 7 = 13 → too large → subtract 1 → sum = 12 ✅ → return [2, 4]

🔧 Code:
*/

class Solution {
    static ArrayList<Integer> subarraySum(int[] arr, int target) {
        ArrayList<Integer> res = new ArrayList<>();
        
        int l = 0;        // Left pointer for window
        int sum = 0;      // Sum of current window

        for (int r = 0; r < arr.length; r++) {
            sum += arr[r]; // Expand window by adding right element

            /*
              If window sum exceeds target,
              keep shrinking from the left until it's ≤ target
            */
            while (sum > target && l <= r) {
                sum -= arr[l];
                l++;
            }

            // If we find the exact sum, return 1-based indices
            if (sum == target) {
                res.add(l + 1); // 1-based indexing
                res.add(r + 1);
                return res;
            }
        }

        // No subarray found
        res.add(-1);
        return res;
    }
}

https://www.geeksforgeeks.org/batch/gfg-160-problems/track/two-pointer-technique-gfg-160/problem/count-all-triplets-with-given-sum-in-sorted-array
//Approach  2 using Two Pointers Approach  T.C --> O(n^2) S.C --> O(1)
import java.util.Arrays;

class Solution {
    public int countTriplets(int[] arr, int target) {
        Arrays.sort(arr);  // Sorting the array
        int n = arr.length;
        int res = 0;

        for (int i = 0; i < n - 2; i++) {
            int left = i + 1, right = n - 1;

            while (left < right) {
                int sum = arr[i] + arr[left] + arr[right];

                if (sum < target) {
                    left++;
                } else if (sum > target) {
                    right--;
                } else {
                    if (arr[left] == arr[right]) {
                        int count = right - left + 1;
                        res += (count * (count - 1)) / 2;
                        break;
                    }

                    int cnt1 = 1, cnt2 = 1;
                    while (left + 1 < right && arr[left] == arr[left + 1]) {
                        cnt1++;
                        left++;
                    }
                    while (right - 1 > left && arr[right] == arr[right - 1]) {
                        cnt2++;
                        right--;
                    }

                    res += cnt1 * cnt2;
                    left++;
                    right--;
                }
            }
        }

        return res;
    }
}

//Approach 1 using Brute Force T.C --> O(n*3) S.C --> O(1)
class Solution {
    // Should return true if there is a triplet with sum equal
    // to x in arr[], otherwise false
    public static boolean hasTripletSum(int arr[], int target) {
        int n = arr.length;
        int count=0;
        // Early exit for arrays with fewer than 3 elements
        if (n < 3) return count;

        // Iterate over all triplets
        for (int i = 0; i < n - 2; i++) { // Outer loop
            for (int j = i + 1; j < n - 1; j++) { // Middle loop
                for (int k = j + 1; k < n; k++) { // Inner loop
                    // Check if the sum of the triplet equals the target
                    if (arr[i] + arr[j] + arr[k] == target) {
                        count++; // Triplet found
                    }
                }
            }
        }
        return count; // No triplet found
    }
}

/*
ðŸŽ¯ Problem Statement:
Given a **sorted array** `arr[]` of integers and a target value `target`,
count the number of **unique pairs (i, j)** such that:
    - `i < j`
    - `arr[i] + arr[j] == target`

Note:
- The array can contain **duplicate elements**, and each valid unique pair should be counted.
- You must count all valid pairs that add up to the target.

------------------------------------------------------------------------------------------
ðŸ§  Brute-force Approach:

ðŸ”¸ Idea:
- Use two nested loops to try all possible pairs.
- If their sum equals the target, increment count.

ðŸ“ˆ Time Complexity: O(nÂ²)  
ðŸ“¦ Space Complexity: O(1)

ðŸ§ª Dry Run:
arr = [1, 1, 2, 3, 4], target = 5  
Valid pairs: (1,4), (2,3) â†’ output: 2

ðŸ”§ Code:
*/
// Uncomment to test brute-force
/*
class Solution {
    int countPairs(int arr[], int target) {
        int cnt = 0;
        int n = arr.length;

        // Try every pair (i, j) where i < j
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (arr[i] + arr[j] == target) {
                    cnt++;
                }
            }
        }
        return cnt;
    }
}
*/

/*
------------------------------------------------------------------------------------------
ðŸ§  Optimized Approach (Two Pointers - works because array is sorted)

ðŸ”¸ Idea:
- Start two pointers, one from the start and one from the end.
- Move them based on how the current sum compares to the target:
    - If sum > target â†’ move right pointer left
    - If sum < target â†’ move left pointer right
    - If sum == target:
        - Count how many times current left value appears (say `c1`)
        - Count how many times current right value appears (say `c2`)
        - If values are the same: count = (c1 * (c1 - 1)) / 2
        - Else: count = c1 * c2
        - Move both pointers inward

ðŸ“ˆ Time Complexity: O(n)  
ðŸ“¦ Space Complexity: O(1)

ðŸ§ª Dry Run:
arr = [1, 1, 2, 3, 4], target = 5

- l=0, r=4 â†’ sum = 1+4=5 â†’ match â†’ c1=2 (1s), c2=1 (4s) â†’ count += 2*1 = 2  
Move l to 2, r to 3  
- l=2, r=3 â†’ sum = 2+3=5 â†’ match â†’ c1=1, c2=1 â†’ count += 1*1 = 1  
Total: 3

ðŸ”§ Code:
*/
class Solution {

    int countPairs(int arr[], int target) {

        int l = 0, r = arr.length - 1;  // Initialize two pointers
        int cnt = 0;  // To store the number of valid pairs

        // Loop until pointers meet
        while (l < r) {
            int sum = arr[l] + arr[r];

            if (sum > target) {
                // Sum is too large, decrease right pointer to reduce sum
                r--;
            } else if (sum < target) {
                // Sum is too small, increase left pointer to increase sum
                l++;
            } else {
                /*
                  Found a pair whose sum matches target
                  Now count how many times arr[l] and arr[r] appear
                */
                int c1 = 0, c2 = 0;
                int ele1 = arr[l], ele2 = arr[r];

                // Count occurrences of arr[l]
                while (l <= r && arr[l] == ele1) {
                    c1++;
                    l++;
                }

                // Count occurrences of arr[r]
                while (l <= r && arr[r] == ele2) {
                    c2++;
                    r--;
                }

                if (ele1 == ele2) {
                    /*
                      If both numbers are the same, use combination formula
                      (c1 choose 2) = c1 * (c1 - 1) / 2
                      Because you're selecting 2 different indices of same number
                    */
                    cnt += (c1 * (c1 - 1)) / 2;
                } else {
                    /*
                      If different numbers, all combinations of (c1 * c2) are valid pairs
                    */
                    cnt += (c1 * c2);
                }
            }
        }

        return cnt;
    }
}

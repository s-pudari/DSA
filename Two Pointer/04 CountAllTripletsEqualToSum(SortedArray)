//https://www.geeksforgeeks.org/batch/gfg-160-problems/track/two-pointer-technique-gfg-160/problem/count-all-triplets-with-given-sum-in-sorted-array
/*
ðŸŽ¯ Problem Statement:
Given a **sorted** array `arr[]` and an integer `target`, find the **number of triplets (i, j, k)** such that:
- i < j < k
- arr[i] + arr[j] + arr[k] == target

The array **may contain duplicates**, and those duplicate values should be considered while counting valid combinations.

--------------------------------------------------------------------------------------
ðŸ§  Brute-force Approach (Not implemented here due to inefficiency):

ðŸ”¸ Idea:
- Use three nested loops to try every possible triplet and count those with sum == target.

ðŸ“ˆ Time Complexity: O(nÂ³)  
ðŸ“¦ Space Complexity: O(1)

--------------------------------------------------------------------------------------
ðŸ§  Optimized Two-Pointer Approach (Implemented below):

ðŸ”¸ Idea:
- Since the array is **sorted**, we fix the first element `arr[i]`, and use the **two-pointer** technique on the subarray to the right.
- For each `i`, set `left = i+1` and `right = n-1`
- Calculate `sum = arr[i] + arr[left] + arr[right]`
    - If sum < target â†’ increase left
    - If sum > target â†’ decrease right
    - If sum == target â†’ count all duplicates of `arr[left]` and `arr[right]`
        - If both elements are equal: count pairs as `cnt1 * (cnt1 - 1) / 2`
        - Else: count pairs as `cnt1 * cnt2`

ðŸ“ˆ Time Complexity: O(nÂ²)  
ðŸ“¦ Space Complexity: O(1)

--------------------------------------------------------------------------------------
ðŸ§ª Dry Run Example:
arr = [1, 2, 2, 2, 3, 4], target = 7

Triplets:
- (1,2,4) â†’ multiple 2's â†’ count = 3
- (1,3,3) is not valid (no second 3)
- (2,2,3) â†’ count = 3

Total = 6

--------------------------------------------------------------------------------------
*/

class Solution {
    public int countTriplets(int[] arr, int target) {
        int cnt = 0; // Total count of valid triplets
        int n = arr.length;

        // Loop through each element to fix the first number of triplet
        for (int i = 0; i < n - 2; i++) {
            int l = i + 1;         // Left pointer after the fixed element
            int r = n - 1;         // Right pointer at the end

            // Two-pointer loop to find valid pairs (l, r)
            while (l < r) {
                int sum = arr[i] + arr[l] + arr[r]; // Sum of current triplet

                if (sum < target) {
                    l++; // Need a larger sum â†’ move left pointer to right
                } else if (sum > target) {
                    r--; // Need a smaller sum â†’ move right pointer to left
                } else {
                    // Found a valid triplet (arr[i], arr[l], arr[r]) = target
                    int cnt1 = 0; // Count of duplicates for arr[l]
                    int cnt2 = 0; // Count of duplicates for arr[r]
                    int ele1 = arr[l];
                    int ele2 = arr[r];

                    // Count how many times arr[l] appears from l onwards
                    while (l <= r && arr[l] == ele1) {
                        cnt1++;
                        l++;
                    }

                    // Count how many times arr[r] appears from r backwards
                    while (l <= r && arr[r] == ele2) {
                        cnt2++;
                        r--;
                    }

                    /*
                    If both elements are same, we have (cnt1 + cnt2) duplicates of the same element.
                    But since we've already moved l and r, cnt1 holds total duplicates of arr[l] when l==r.

                    Special case: if ele1 == ele2 â†’ we are choosing 2 same elements
                    â†’ Choose any 2 from cnt1 â†’ cnt1 * (cnt1 - 1) / 2

                    Otherwise â†’ All combinations between cnt1 elements of ele1 and cnt2 elements of ele2
                    */
                    if (ele1 == ele2) {
                        cnt += (cnt1 * (cnt1 - 1)) / 2;
                    } else {
                        cnt += (cnt1 * cnt2);
                    }
                }
            }
        }

        return cnt; // Final result: number of triplets
    }
}

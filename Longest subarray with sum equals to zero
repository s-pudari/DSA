https://www.geeksforgeeks.org/problems/largest-subarray-with-0-sum/1

//Approach 3 
we can also solve by using two pointer and sliding window which can optimise it further but only works for positive numbers T.C--> O(2n)

int n=arr.length;
int left=0;
int right=0;
int sum=arr[0];
int maxLen=0;

while(right<n){
    while(left<=right && sum>k){
       sum-=arr[left];
       left--;
      }
  if(sum==k){
     maxLen=Math.max(maxLen,right-left+1);
  }
 right++;
 if(right<n) sum+=arr[right];
}
return maxLen;


        


//Approach 2 using hashMap T.C and S.C --> O(n)
class Solution {
    int maxLen(int arr[]) {
        // code here
        int n=arr.length;
        int sum=0;
        int ans=0;
        
        Map<Integer,Integer> prefixSum = new HashMap<>();
        
        for(int i=0;i<n;i++){
            sum+=arr[i];
            
            if(sum==0){
                ans=i+1;
            }
            
            if(prefixSum.containsKey(sum)){
                ans = Math.max(ans,i-prefixSum.get(sum));
            }
            else{
                prefixSum.put(sum,i);
            }
        }
        return ans;
       
    }
}


//Approach 1 (Brute Force) T.C --> O(n^2)
class Solution {
    int maxLen(int arr[]) {
        // code here
        int n=arr.length;
        
        int ans=0;
        
     
        
        for(int i=0;i<n;i++){
            int sum=0;
            
            for(int j=i;j<n;j++){
                sum+=arr[j];
            if(sum==0){
                ans=Math.max(ans,j-i+1);
            }
            
            }
        }
        return ans;
    }
}

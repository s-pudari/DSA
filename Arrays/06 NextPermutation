https://leetcode.com/problems/next-permutation/
/**
 * ðŸ§  PROBLEM STATEMENT:
 * ---------------------
 * Given an array of integers representing a permutation of numbers,
 * find the **next lexicographically greater permutation** of numbers.
 * If such arrangement is not possible, rearrange it as the lowest possible order (i.e., sorted in ascending order).
 *
 * Example:
 * --------
 * Input:  arr = [1, 2, 3]
 * Output: arr = [1, 3, 2]
 *
 * Input:  arr = [3, 2, 1]
 * Output: arr = [1, 2, 3]
 *
 * âœ… GOAL:
 * --------
 * Modify the input array to its next permutation **in-place**, using constant extra space.
 *
 * ====================================================================
 * âœ… OPTIMIZED APPROACH (Based on mathematical permutation logic)
 * ====================================================================
 * ðŸ’¡ STEPS:
 * --------
 * 1. Traverse from right and find the first index `i` where arr[i] < arr[i + 1].
 *    This identifies the part that needs to change for the next permutation.
 * 2. From the right, find the first index `j` such that arr[j] > arr[i].
 * 3. Swap arr[i] and arr[j].
 * 4. Reverse the sub-array from `i + 1` to end.
 *
 * âœ… TIME COMPLEXITY: O(n)
 * âœ… SPACE COMPLEXITY: O(1)
 *
 * ðŸ“Œ DRY RUN:
 * ----------
 * Input: [1, 2, 3]
 * Step 1: i = 1 (arr[1] = 2, arr[2] = 3 => 2 < 3)
 * Step 2: j = 2 (arr[2] = 3 > arr[1] = 2)
 * Step 3: swap(i=1, j=2) â†’ [1, 3, 2]
 * Step 4: reverse(i+1=2 to end) â†’ no change â†’ [1, 3, 2] âœ…
 */

class Solution {
    void nextPermutation(int[] arr) {
        int n = arr.length;
        int i = n - 2;

        /*
         * Step 1: Find the first decreasing element from the end.
         * We are looking for the rightmost pair arr[i] < arr[i+1]
         * If we don't find such i, it means the array is in descending order
         * and we need to reverse the entire array.
         */
        while (i >= 0 && arr[i] >= arr[i + 1]) {
            i--;
        }

        if (i >= 0) {
            /*
             * Step 2: Find the smallest element greater than arr[i] from the right
             * This ensures we get the next greater permutation.
             */
            int j = n - 1;

            // Find the rightmost element greater than arr[i]
            while (arr[j] <= arr[i]) {
                j--;
            }

            // Step 3: Swap the two values
            swap(arr, i, j);
        }

        // Step 4: Reverse the suffix starting at i+1 to the end of the array
        reverse(arr, i + 1, n - 1);
    }

    // Swap utility to exchange values at two indices
    void swap(int[] arr, int start, int end) {
        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
    }

    // Reverse utility to reverse a section of the array
    void reverse(int[] arr, int start, int end) {
        while (start < end) {
            swap(arr, start, end);
            start++;
            end--;
        }
    }

    /*
     * ===================================================================
     * ðŸ’¡ BRUTE-FORCE APPROACH (NOT IN-PLACE - USES NEXT PERM LIBRARY)
     * ===================================================================
     * ðŸš« Not optimal for in-place requirement, but conceptually useful:
     *
     * 1. Generate all permutations.
     * 2. Sort them.
     * 3. Return the next one after the current.
     *
     * Java has no built-in nextPermutation method, so this would require extra space
     * and is not efficient.
     *
     * âœ… TIME COMPLEXITY: O(n!) to generate permutations
     * âœ… SPACE COMPLEXITY: O(n!) for storing permutations
     *
     * ðŸ”½ NOT RECOMMENDED for production or interviews
     */
}


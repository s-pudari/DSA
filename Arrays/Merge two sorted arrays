//https://leetcode.com/problems/merge-sorted-array/
import java.util.Arrays;

class Solution {
    /*
     * âœ… Approach:
     * We need to merge two sorted arrays `nums1[]` and `nums2[]` into `nums1[]`, which has enough space for both arrays.
     * 
     * ðŸ”¹ **Optimized Approach (Three-Pointer Merge - O(N+M), Space: O(1))**
     *   1. Use **three pointers**:
     *      - `i = n - 1` (last valid element in `nums1`)
     *      - `j = m - 1` (last element in `nums2`)
     *      - `k = n + m - 1` (last position in `nums1`)
     *   2. **Merge from the back**:
     *      - Compare `nums1[i]` and `nums2[j]`, place the larger one at `nums1[k]`.
     *      - Move pointers accordingly.
     *   3. **Copy remaining elements from `nums2[]`** (if any).
     *   4. No extra space is used.
     *
     * ðŸ”¹ **Brute Force Approach (Using Extra Array - O(N+M)) - Commented Out**
     *   - Merge both arrays into a new `arr[]`.
     *   - Copy `arr[]` back to `nums1[]`.
     *
     * ðŸ”¹ **Sorting Approach (O(N log N)) - Commented Out**
     *   - Copy `nums2[]` into `nums1[]`.
     *   - Sort the combined array.
     *
     * âœ… Time Complexity:
     * - **Optimized Approach:** O(N + M) (Single pass)
     * - **Brute Force Approach:** O(N + M) (Two passes: merging & copying)
     * - **Sorting Approach:** O(N log N) (Sorting step)
     *
     * âœ… Space Complexity:
     * - **Optimized Approach:** O(1) (In-place merging)
     * - **Brute Force Approach:** O(N + M) (Extra `arr[]`)
     * - **Sorting Approach:** O(1) (Using built-in sorting)
     *
     * âœ… Dry Run Example (Optimized Approach):
     * Input:
     *   nums1 = [1,2,3,0,0,0], n = 3
     *   nums2 = [2,5,6], m = 3
     * 
     * Steps:
     * - Compare `nums1[2] = 3` and `nums2[2] = 6` â†’ Place `6` at `nums1[5]`
     * - Compare `nums1[2] = 3` and `nums2[1] = 5` â†’ Place `5` at `nums1[4]`
     * - Compare `nums1[2] = 3` and `nums2[0] = 2` â†’ Place `3` at `nums1[3]`
     * - Copy remaining `2` from nums2 to nums1
     * 
     * Output: [1,2,2,3,5,6]
     */

    public void merge(int[] nums1, int n, int[] nums2, int m) {
        int i = n - 1; // Last valid element in nums1
        int j = m - 1; // Last element in nums2
        int k = n + m - 1; // Last index in nums1

        // âœ… Merge from the back to the front
        while (i >= 0 && j >= 0) {
            if (nums1[i] > nums2[j]) {
                nums1[k--] = nums1[i--];
            } else {
                nums1[k--] = nums2[j--];
            }
        }

        // âœ… If any elements are left in nums2, copy them
        while (j >= 0) {
            nums1[k--] = nums2[j--];
        }
    }

    /*
     * ðŸ”´ Brute Force Approach (Using Extra Array - O(N+M), Space: O(N+M))
     * - Create an extra `arr[]` to merge both arrays.
     * - Copy elements back to `nums1[]`.
     */

    /*
    public void merge(int[] nums1, int n, int[] nums2, int m) {
        int[] arr = new int[n + m];

        int left = 0, right = 0, idx = 0;

        while (left < n && right < m) {
            if (nums1[left] <= nums2[right]) {
                arr[idx++] = nums1[left++];
            } else {
                arr[idx++] = nums2[right++];
            }
        }

        while (left < n) {
            arr[idx++] = nums1[left++];
        }

        while (right < m) {
            arr[idx++] = nums2[right++];
        }

        // Copy merged elements back to nums1
        for (int i = 0; i < n + m; i++) {
            nums1[i] = arr[i];
        }
    }
    */

    /*
     * ðŸ”´ Sorting Approach (O(N log N), Space: O(1))
     * - Copy `nums2[]` into `nums1[]` at the correct position.
     * - Use `Arrays.sort(nums1)`.
     */

    /*
    public void merge(int[] nums1, int n, int[] nums2, int m) {
        for (int i = 0, j = n; i < m; i++, j++) {
            nums1[j] = nums2[i]; // Copy nums2 into nums1
        }
        Arrays.sort(nums1); // Sort the combined array
    }
    */
}


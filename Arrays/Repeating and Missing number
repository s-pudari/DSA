https://www.interviewbit.com/problems/repeat-and-missing-number-array/

import java.util.*;

public class Solution {
    /*
     * âœ… Approach:
     * Given an array `A` of size `n`, where numbers are between `1 to n` but one number is missing
     * and one number is repeated. We need to find the **repeating and missing numbers**.
     *
     * ðŸ”¹ **Optimized Approach (Mathematical - O(N), Space: O(1))**
     *   1. Compute expected sum (`sn`) and sum of squares (`s2n`) for numbers `1 to n`.
     *   2. Compute actual sum (`s`) and sum of squares (`s2`) from the array.
     *   3. Use the two equations:
     *      - `val1 = s - sn` (Repeating - Missing)
     *      - `val2 = s2 - s2n` (RepeatingÂ² - MissingÂ²)
     *      - Solve to find `Repeating` and `Missing` numbers.
     *
     * ðŸ”¹ **HashMap Approach (O(N), Space: O(N)) - Commented Out**
     *   - Use a **HashMap** to count occurrences.
     *   - If a number appears **twice**, it's **repeating**.
     *   - If a number is **missing**, it won't appear in the HashMap.
     *
     * ðŸ”¹ **Brute Force Approach (O(NÂ²)) - Commented Out**
     *   - Use nested loops to **count occurrences** of each number.
     *   - If a number appears **twice**, it's repeating.
     *   - If a number appears **zero times**, it's missing.
     *
     * âœ… Time Complexity:
     * - **Optimized Approach:** O(N) (Single loop computations)
     * - **HashMap Approach:** O(N) (Using extra space)
     * - **Brute Force Approach:** O(NÂ²) (Nested loops)
     *
     * âœ… Space Complexity:
     * - **Optimized Approach:** O(1) (No extra space)
     * - **HashMap Approach:** O(N) (Extra HashMap storage)
     * - **Brute Force Approach:** O(1) (No extra storage)
     *
     * âœ… Dry Run Example:
     * Input: A = [4, 3, 6, 2, 1, 1]
     * Steps:
     * - Expected sum (`sn`) = 21, Expected square sum (`s2n`) = 91
     * - Actual sum (`s`) = 17, Actual square sum (`s2`) = 87
     * - `val1 = s - sn = -4` (Repeating - Missing)
     * - `val2 = s2 - s2n = -4` (RepeatingÂ² - MissingÂ²)
     * - Solving, **Repeating = 1, Missing = 5**
     * Output: **[1, 5]**
     */

    public ArrayList<Integer> repeatedNumber(final List<Integer> A) {
        int n = A.size();
        ArrayList<Integer> ans = new ArrayList<>();

        // âœ… Optimized Approach: Mathematical Solution (O(N), O(1))
        long sn = (n * (n + 1)) / 2;   // Sum of first `n` natural numbers
        long s2n = (n * (n + 1) * (2 * n + 1)) / 6;  // Sum of squares of first `n` natural numbers

        long s = 0, s2 = 0;
        for (int num : A) {
            s += (long) num;          // Sum of array elements
            s2 += (long) num * num;   // Sum of squares of array elements
        }

        // Difference Equations
        long val1 = s - sn;    // (Repeating - Missing)
        long val2 = s2 - s2n;  // (RepeatingÂ² - MissingÂ²)

        val2 = val2 / val1;    // (Repeating + Missing)

        long repeating = (val1 + val2) / 2;
        long missing = repeating - val1;

        ans.add((int) repeating);
        ans.add((int) missing);

        return ans;
    }

    /*
     * ðŸ”´ HashMap Approach (O(N), Space: O(N)) - Commented Out
     * - Count occurrences using a HashMap.
     * - Find repeating and missing numbers.
     */

    /*
    public ArrayList<Integer> repeatedNumber(final List<Integer> A) {
        int n = A.size();
        ArrayList<Integer> ans = new ArrayList<>();
        HashMap<Integer, Integer> hm = new HashMap<>();
        int repeating = 0, missing = 0;

        // Initialize HashMap with all numbers from 1 to n
        for (int i = 1; i <= n; i++) {
            hm.put(i, 0);
        }

        // Count occurrences
        for (int num : A) {
            hm.put(num, hm.getOrDefault(num, 0) + 1);
            if (hm.get(num) == 2) {
                repeating = num; // Found repeating number
            }
        }

        // Find missing number
        for (int key : hm.keySet()) {
            if (hm.get(key) == 0) {
                missing = key;
                break;
            }
        }

        ans.add(repeating);
        ans.add(missing);
        return ans;
    }
    */

    /*
     * ðŸ”´ Brute Force Approach (O(NÂ²), Space: O(1)) - Commented Out
     * - Use nested loops to check occurrences.
     */

    /*
    public ArrayList<Integer> repeatedNumber(final List<Integer> A) {
        int n = A.size();
        ArrayList<Integer> ans = new ArrayList<>();
        int repeating = -1, missing = -1;

        // Check every number from 1 to n
        for (int i = 1; i <= n; i++) {
            int count = 0;
            for (int j = 0; j < n; j++) {
                if (A.get(j) == i) {
                    count++;
                }
            }
            if (count == 2) repeating = i;
            if (count == 0) missing = i;

            if (repeating != -1 && missing != -1) {
                break; // Found both numbers
            }
        }

        ans.add(repeating);
        ans.add(missing);
        return ans;
    }
    */
}

https://www.geeksforgeeks.org/batch/gfg-160-problems/track/sorting-gfg-160/problem/overlapping-intervals--170633
T.C --> O(N log N ) S.C --> O(N)
class Solution {
    public List<int[]> mergeOverlap(int[][] intervals) {
        List<int[]> result = new ArrayList<>();
        
        // Step 1: Sort the intervals based on start times
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        
        // Step 2: Initialize result with the first interval
        result.add(intervals[0]);
        
        // Step 3: Merge overlapping intervals
        for (int i = 1; i < intervals.length; i++) {
            int[] last = result.get(result.size() - 1);  // Last interval in result
            int[] current = intervals[i];               // Current interval
            
            // Check for overlap: compare start of current with end of last
            if (current[0] <= last[1]) {
                // Merge: Update the end of the last interval
                last[1] = Math.max(last[1], current[1]);
            } else {
                // No overlap: Add current interval to the result
                result.add(new int[]{current[0], current[1]});
            }
        }
        
        return result;
    }
}

https://www.geeksforgeeks.org/batch/gfg-160-problems/track/arrays-gfg-160/problem/smallest-positive-missing-number-1587115621

/**
 * 🔍 PROBLEM: Smallest Missing Positive Number
 * --------------------------------------------
 * Given an array `arr[]`, find the smallest **positive** number that is **missing** from it.
 *
 * 🧠 Example:
 * Input:  [3, 4, -1, 1]
 * Output: 2
 * Explanation: Positive numbers are 1, 3, 4 → missing 2
 *
 * --------------------------------------------------
 * ✅ APPROACH 3: In-place Cyclic Sort (Index Mapping)
 * --------------------------------------------------
 * 🧩 IDEA:
 * - Put each positive number `x` (1 ≤ x ≤ n) at index `x-1` if not already there.
 * - After placement, the first index where `arr[i] != i + 1` gives the answer.
 *
 * ✅ TIME: O(n)
 * ✅ SPACE: O(1)
 * 🛠 Modifies array in-place
 *
 * --------------------------------------------------
 * 📌 DRY RUN: arr = [3, 4, -1, 1]
 * After swaps: [1, -1, 3, 4]
 * Now check: index 1 ≠ 2 → return 2
 */

class Solution {
    public int missingNumber(int[] arr) {
        int n = arr.length;

        // ✅ STEP 1: Place each element at its correct position if 1 <= arr[i] <= n
        for (int i = 0; i < n; i++) {
            while (
                arr[i] > 0 && arr[i] <= n &&
                arr[i] != arr[arr[i] - 1]
            ) {
                // Swap arr[i] with the value at its target index
                int temp = arr[i];
                arr[i] = arr[temp - 1];
                arr[temp - 1] = temp;
            }
        }

        // ✅ STEP 2: Find the first place where index doesn't match the value
        for (int i = 0; i < n; i++) {
            if (arr[i] != i + 1) {
                return i + 1;
            }
        }

        // If all values from 1 to n are present
        return n + 1;
    }

    /*
     * ------------------------------------------------------------
     * ✅ APPROACH 2: Boolean Array (Extra Space)
     * ------------------------------------------------------------
     * 🌟 Mark the presence of numbers 1 to n using a boolean array.
     *
     * ✅ TIME: O(n)
     * ✅ SPACE: O(n)
     */

    /*
    public int missingNumber(int[] arr) {
        int n = arr.length;
        boolean[] seen = new boolean[n + 1];

        // ✅ Mark presence of numbers in range [1, n]
        for (int i = 0; i < n; i++) {
            if (arr[i] > 0 && arr[i] <= n) {
                seen[arr[i] - 1] = true;
            }
        }

        // ✅ Find the first unmarked index
        for (int i = 0; i < n; i++) {
            if (!seen[i]) {
                return i + 1;
            }
        }

        // If all numbers 1..n are present
        return n + 1;
    }
    */

    /*
     * ------------------------------------------------------------
     * ✅ APPROACH 1: Sorting-based
     * ------------------------------------------------------------
     * ✅ TIME: O(n log n) due to sorting
     * ✅ SPACE: O(1) if sorting in-place
     */

    /*
    public int missingNumber(int[] arr) {
        Arrays.sort(arr);  // 🔄 Sort array
        int smallest = 1;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < smallest) continue;
            if (arr[i] == smallest) smallest++;
            else if (arr[i] > smallest) return smallest;
        }

        return smallest;
    }
    */
}

https://www.geeksforgeeks.org/batch/gfg-160-problems/track/array-bonus-problems/problem/split-array-in-three-equal-sum-subarrays
import java.util.*;

class Solution {
    /*
     * âœ… Approach:
     * We need to find two indices where the array can be split into three equal sum parts.
     * 
     * ðŸ”¹ Optimized Approach (Prefix Sum - O(N))
     *   1. Calculate the **total sum** of the array.
     *   2. If the total sum is not **divisible by 3**, return `[-1, -1]`.
     *   3. Traverse the array, maintaining a running sum.
     *   4. Whenever the **running sum reaches totalSum/3**, store the index.
     *   5. Once we find **two such indices**, return them.
     * 
     * ðŸ”¹ Brute Force Approach (O(NÂ²) - Commented Out)
     *   - Try every possible pair of indices.
     *   - Calculate sum for each segment and check if all three parts are equal.
     *   - If found, return the indices; otherwise, return `[-1, -1]`.
     * 
     * âœ… Time Complexity:
     * - **Optimized Approach:** O(N)
     * - **Brute Force Approach:** O(NÂ²)
     * 
     * âœ… Space Complexity:
     * - **O(1)** (Only a few extra variables used)
     * 
     * âœ… Dry Run:
     * Input: arr = [1, 2, 3, 0, 3, 2, 1, 3]
     * Total Sum = 15 (Divisible by 3 â†’ Each part must sum to 5)
     * - Running sum = 1 â†’ 3 â†’ 6 (Found first split at `i=2`)
     * - Running sum = 3 â†’ 5 (Found second split at `i=5`)
     * - Output: [2, 5] (Splits array into `[1,2,3]`, `[0,3,2]`, `[1,3]`)
     */

    public List<Integer> findSplit(int[] arr) {
        List<Integer> li = new ArrayList<>();
        int totalSum = 0;

        // Calculate total sum
        for (int num : arr) {
            totalSum += num;
        }

        // If total sum is not divisible by 3, return [-1, -1]
        if (totalSum % 3 != 0) {
            li.add(-1);
            li.add(-1);
            return li;
        }

        int currSum = 0;
        for (int i = 0; i < arr.length; i++) {
            currSum += arr[i];

            // First valid split point
            if (currSum == totalSum / 3) {
                li.add(i);
                currSum = 0; // Reset for the next segment
            }

            // If we found 2 splits, return immediately
            if (li.size() == 2 && i < arr.length) {
                return li;
            }
        }

        // If valid split was not found, return [-1, -1]
        li.add(-1);
        li.add(-1);
        return li;
    }

    /*
     * ðŸ”´ Brute Force Approach (O(NÂ²) - Commented Out)
     * - Try every possible pair `(i, j)` where:
     *   - First part: `arr[0] to arr[i]`
     *   - Second part: `arr[i+1] to arr[j]`
     *   - Third part: `arr[j+1] to end`
     * - Calculate the sum of each segment and check if all are equal.
     * - If found, return `[i, j]`, otherwise return `[-1, -1]`.
     */

    
    public List<Integer> findSplit(int[] arr) {
        List<Integer> li = new ArrayList<>();
        
        // Try all possible split points
        for (int i = 0; i < arr.length - 2; i++) {
            for (int j = i + 1; j < arr.length - 1; j++) {
                int sum1 = findSum(arr, 0, i);
                int sum2 = findSum(arr, i + 1, j);
                int sum3 = findSum(arr, j + 1, arr.length - 1);

                // If all three sums are equal, return the indices
                if (sum1 == sum2 && sum2 == sum3) {
                    li.add(i);
                    li.add(j);
                    return li;
                }
            }
        }

        // If no valid split found, return [-1, -1]
        li.add(-1);
        li.add(-1);
        return li;
    }

    // Helper function to calculate sum from start to end index
    public int findSum(int[] arr, int start, int end) {
        int sum = 0;
        for (int i = start; i <= end; i++) {
            sum += arr[i];
        }
        return sum;
    }
    
}

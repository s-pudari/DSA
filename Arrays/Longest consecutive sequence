https://leetcode.com/problems/longest-consecutive-sequence/
/*
Approach Explanation:

- **Approach 1 (Brute Force)**:
  - For each number, perform a linear search to check if the next consecutive number exists.
  - Time Complexity: **O(N²)** (Due to nested loops and linear search)
  - Space Complexity: **O(1)** (No additional data structures used)

- **Approach 2 (Sorting)**:
  - First, sort the array. Then iterate to count consecutive elements.
  - Time Complexity: **O(NlogN)** (Due to sorting)
  - Space Complexity: **O(1)** (Ignoring sorting space for the array)

- **Approach 3 (Optimal)**:
  - Use a HashSet to store unique elements. 
  - For each element, check if it’s the starting point of a sequence using `hs.contains(num-1)`.
  - Then, count the length of the sequence using a while loop.
  - Time Complexity: **O(N)** (Efficient lookup and insert with HashSet)
  - Space Complexity: **O(N)** (For the HashSet)

Example:
Input: [1, 0, 1, 2]
- After removing duplicates → {0, 1, 2}
- Start from 0 → Sequence = {0, 1, 2}, Length = 3
Output: 3
*/

class Solution {

    // Optimized Approach using HashSet
    public int longestConsecutive(int[] nums) {
        int n = nums.length;
        int longest = 1;

        if (n == 0) {
            return 0;
        }

        // Using HashSet to store unique numbers
        Set<Integer> hs = new HashSet<>();
        for (int i : nums) {
            hs.add(i);
        }

        // Check for the start of a sequence
        for (int num : hs) {
            if (!hs.contains(num - 1)) { // Start only if there's no previous number
                int a = num;
                int cnt = 1;

                // Continue while the next consecutive number exists
                while (hs.contains(a + 1)) {
                    cnt++;
                    a++;
                }
                
                // Track the longest sequence
                longest = Math.max(longest, cnt);
            }
        }
        return longest;
    }

    // --------------------------------------------------------------------------------
    // Sorting Approach (Commented)
    /*
    public int longestConsecutive(int[] nums) {
        int n = nums.length;
        int longest = 1;

        if (n == 0) {
            return 0;
        }

        int cnt = 1;
        Arrays.sort(nums);

        int lastSmaller = nums[0];

        for (int i = 1; i < n; i++) {
            if (nums[i] == nums[i - 1]) continue;

            if (nums[i] - 1 == lastSmaller) {
                cnt++;
                lastSmaller = nums[i];
            } else {
                cnt = 1;
                lastSmaller = nums[i];
            }
            longest = Math.max(longest, cnt);
        }
        return longest;
    }
    */

    // --------------------------------------------------------------------------------
    // Brute Force Approach (Commented)
    /*
    public int longestConsecutive(int[] nums) {
        int n = nums.length;
        int longest = 1;

        if (n == 0) {
            return 0;
        }

        for (int i = 0; i < n; i++) {
            int a = nums[i];
            int cnt = 1;

            // Perform a linear search to find the next number in sequence
            while (linearSearch(nums, a + 1)) {
                cnt++;
                a++;
            }

            longest = Math.max(longest, cnt);
        }
        return longest;
    }

    public boolean linearSearch(int[] arr, int a) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == a) {
                return true;
            }
        }
        return false;
    }
    */
}


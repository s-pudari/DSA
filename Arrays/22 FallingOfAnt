class Solution {

    /*
     üîç Problem: Last Moment Before All Ants Fall Out of a Plank
     Link: https://www.geeksforgeeks.org/batch/gfg-160-problems/track/array-bonus-problems/problem/last-moment-before-all-ants-fall-out-of-a-plank

     üß† Explanation:
     - Ants are on a plank of length `n`. 
     - Some ants move left, some right.
     - When ants collide, they reverse direction, BUT that doesn't affect the *time* they fall off.
     - So, for left-moving ants: they fall at their position `pos`
     - For right-moving ants: they fall at time `(n - pos)`
     - We just need to find the **maximum time** any ant takes to fall off.

     ‚úÖ Final Answer: max(max(left[]), max(n - right[]))
    */


    /******************** BRUTE FORCE (Commented) ********************
    // Idea: Simulate the movement of ants until all fall off ‚Äî time-consuming and unnecessary!
    // Time: O(N^2) or more, not feasible
    // So we skip brute force in code, but it helps understand the optimized approach
    *****************************************************************/


    /******************** OPTIMIZED APPROACH ********************/
    /*
     ‚úÖ Time Complexity: O(L + R), where L and R are lengths of left[] and right[]
     ‚úÖ Space Complexity: O(1), constant extra space

     ‚úÖ Dry Run Example:
     Input:
        n = 4
        left = [4, 3]
        right = [0, 1]

     Steps:
     - For left[]: ants fall at time = position ‚Üí max(4, 3) = 4
     - For right[]: ants fall at time = (n - position) ‚Üí max(4 - 0 = 4, 4 - 1 = 3) ‚Üí max = 4
     - Final Answer = max(4, 4) = 4
     */

    public int getLastMoment(int n, int left[], int right[]) {
        int maxTime = 0;

        // Check all left-moving ants ‚Äî they fall at their current positions
        for (int i = 0; i < left.length; i++) {
            maxTime = Math.max(maxTime, left[i]);
        }

        // Check all right-moving ants ‚Äî they fall at (n - position)
        for (int i = 0; i < right.length; i++) {
            maxTime = Math.max(maxTime, n - right[i]);
        }

        return maxTime; // Max time any ant takes to fall
    }
}

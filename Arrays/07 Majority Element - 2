https://leetcode.com/problems/majority-element-ii/description/

/**
 * 🧠 PROBLEM STATEMENT:
 * ---------------------
 * Given an integer array `nums` of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
 *
 * 🔎 Example:
 * ----------
 * Input:  nums = [3,2,3]
 * Output: [3]
 *
 * Input:  nums = [1,1,1,3,3,2,2,2]
 * Output: [1,2]
 *
 * ✅ GOAL:
 * --------
 * Return a list of all such elements that appear more than ⌊ n/3 ⌋ times.
 *
 * ====================================================================================
 * ✅ APPROACH 3: Moore’s Voting Algorithm (Best Optimized Approach)
 * ====================================================================================
 * 👉 Observation:
 * At most 2 elements can appear more than ⌊ n/3 ⌋ times.
 *
 * 💡 Steps:
 * 1. Use a voting mechanism to find two potential candidates.
 * 2. Re-verify their actual counts.
 *
 * ✅ TIME COMPLEXITY: O(n)
 * ✅ SPACE COMPLEXITY: O(1)
 *
 * 📌 DRY RUN:
 * ----------
 * Input: nums = [1, 1, 1, 2, 3, 4, 1]
 * n = 7, n/3 = 2. Candidates that appear more than 2 times: [1]
 */

class Solution {
    public List<Integer> findMajority(int[] nums) {
        List<Integer> result = new ArrayList<>();

        int cnt1 = 0, cnt2 = 0;
        int ele1 = Integer.MIN_VALUE, ele2 = Integer.MIN_VALUE;
        int min = (nums.length / 3) + 1;

        // 🧮 Step 1: Find potential majority elements (at most 2)
        for (int num : nums) {
            if (cnt1 == 0 && num != ele2) {
                // Assign new candidate to ele1
                cnt1 = 1;
                ele1 = num;
            } else if (cnt2 == 0 && num != ele1) {
                // Assign new candidate to ele2
                cnt2 = 1;
                ele2 = num;
            } else if (num == ele1) {
                cnt1++;
            } else if (num == ele2) {
                cnt2++;
            } else {
                // Decrease both counts if the number matches neither
                cnt1--;
                cnt2--;
            }
        }

        // 🔁 Step 2: Recheck actual frequency
        cnt1 = 0;
        cnt2 = 0;

        for (int num : nums) {
            if (num == ele1) cnt1++;
            if (num == ele2) cnt2++;
        }

        // ✅ Step 3: Verify they are valid majority elements
        if (cnt1 >= min) result.add(ele1);
        if (cnt2 >= min && ele2 != ele1) result.add(ele2);

        return result;
    }

    /*
     * ====================================================================================
     * ✅ APPROACH 2: Sorting-Based Count
     * ====================================================================================
     * 💡 Idea: After sorting, all duplicates will be together. Count frequency while traversing.
     *
     * ✅ TIME COMPLEXITY: O(n log n) (due to sorting)
     * ✅ SPACE COMPLEXITY: O(1) (no extra data structures)
     */
    /*
    public List<Integer> findMajority(int[] nums) {
        List<Integer> ans = new ArrayList<>();
        Arrays.sort(nums); // Sort to group duplicates
        int count = 1;
        int threshold = nums.length / 3;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == nums[i - 1]) {
                count++;
            } else {
                if (count > threshold && !ans.contains(nums[i - 1])) {
                    ans.add(nums[i - 1]);
                }
                count = 1;
            }
        }

        // Check for last element
        if (count > threshold && !ans.contains(nums[nums.length - 1])) {
            ans.add(nums[nums.length - 1]);
        }

        return ans;
    }
    */

    /*
     * ====================================================================================
     * ✅ APPROACH 1: Brute-Force (Nested Loops)
     * ====================================================================================
     * 💡 Idea: Count frequency of each element with inner loop.
     *
     * ✅ TIME COMPLEXITY: O(n^2)
     * ✅ SPACE COMPLEXITY: O(1)
     *
     * 🚫 Not efficient for large arrays.
     */
    
    public List<Integer> findMajority(int[] nums) {
        List<Integer> list = new ArrayList<>();
        int threshold = nums.length / 3;

        for (int i = 0; i < nums.length; i++) {
            if (list.contains(nums[i])) continue; // Already processed

            int count = 0;
            for (int j = 0; j < nums.length; j++) {
                if (nums[i] == nums[j]) {
                    count++;
                }
            }

            if (count > threshold) {
                list.add(nums[i]);
            }
        }

        Collections.sort(list); // Optional: to return sorted list
        return list;
    }
    
}

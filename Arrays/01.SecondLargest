https://www.geeksforgeeks.org/batch/gfg-160-problems/track/arrays-gfg-160/problem/second-largest3735
/**
 * ðŸ§  PROBLEM STATEMENT:
 * ---------------------
 * Given an array `arr[]` of integers, return the **second largest unique** element in the array.
 * If such an element does not exist (i.e., all elements are the same), return -1.
 *
 * âœ… GOAL:
 * --------
 * Find the second largest **distinct** number in a single pass (preferably), or with minimal cost.
 *
 * =====================================================
 * âœ… OPTIMIZED APPROACH (Single pass: Track 1st and 2nd max)
 * =====================================================
 * ðŸ‘‡ Steps:
 * 1. Traverse the array once while keeping track of:
 *    - firstLargest
 *    - secondLargest
 * 2. Ensure secondLargest is always distinct from firstLargest.
 *
 * âœ… TIME COMPLEXITY: O(n)
 * âœ… SPACE COMPLEXITY: O(1)
 *
 * ðŸ“Œ DRY RUN (Example):
 * ---------------------
 * Input: arr = [10, 5, 10, 8, 12]
 * - firstLargest = 10, secondLargest = MIN
 * - i = 1 -> 5 < 10 -> secondLargest = 5
 * - i = 2 -> 10 == 10 -> skip
 * - i = 3 -> 8 < 10 && 8 > 5 -> secondLargest = 8
 * - i = 4 -> 12 > 10 -> secondLargest = 10, firstLargest = 12
 * Final result = 10 (Second largest)
 */

class Solution {
    public int getSecondLargest(int[] arr) {
        int secondLargest = Integer.MIN_VALUE; // Keeps track of the second largest number
        int firstLargest = arr[0];             // Initialize firstLargest with first element
        boolean found = false;                 // To check if a valid second largest exists

        for (int i = 0; i < arr.length; i++) {
            /*
             * If current element is greater than firstLargest,
             * update both firstLargest and secondLargest
             */
            if (arr[i] > firstLargest) {
                secondLargest = firstLargest;
                firstLargest = arr[i];
                found = true;
            }
            /*
             * If current element is less than firstLargest but
             * greater than secondLargest and not equal to firstLargest,
             * update secondLargest only
             */
            else if (arr[i] > secondLargest && arr[i] != firstLargest) {
                secondLargest = arr[i];
                found = true;
            }
        }

        // If we found a valid second largest, return it. Else return -1
        return found ? secondLargest : -1;
    }

    /*
     * =====================================================
     * ðŸ’¡ BRUTE-FORCE APPROACH (Sort and Scan Backward)
     * =====================================================
     * âœ… TIME COMPLEXITY: O(n log n) due to sorting
     * âœ… SPACE COMPLEXITY: O(1) if in-place sort (like Arrays.sort)
     *
     * ðŸ‘‡ STEPS:
     * 1. Sort the array in ascending order
     * 2. Traverse from the end and return the first element that is
     *    strictly less than the last (largest) element.
     * 3. If no such element exists, return -1
     */

    /*
    public int getSecondLargest(int[] arr) {
        Arrays.sort(arr); // Sorts in ascending order
        int n = arr.length;

        // Traverse from second last to start
        for (int i = n - 2; i >= 0; i--) {
            // Check for the first element smaller than the last element (which is the largest)
            if (arr[i] != arr[i + 1]) {
                return arr[i]; // This is the second largest unique element
            }
        }

        // If all elements are the same or only one unique element exists
        return -1;
    }
    */
}

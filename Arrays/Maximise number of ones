https://www.geeksforgeeks.org/batch/gfg-160-problems/track/array-bonus-problems/problem/maximize-number-of-1s0905
class Solution {
    /**
     * âœ… Approach:
     * We need to find the **maximum consecutive 1s** in the array after flipping at most 'k' zeros.
     *
     * ðŸ”¹ **Optimized Approach (Sliding Window - Two Pointers)**
     * 1. Maintain a **window** using two pointers `l` (left) and `r` (right).
     * 2. Expand the window by moving `r` and count the number of zeros.
     * 3. If the count of zeros exceeds `k`, shrink the window from the left (`l`).
     * 4. Keep track of the maximum window size found.
     *
     * ðŸ”¹ **Brute Force Approach (Commented Out)**
     * - Iterate over every possible subarray.
     * - Count the number of zeros in each subarray.
     * - If the number of zeros is at most `k`, update the maximum length found.
     * - Time Complexity: **O(NÂ²)** (nested loops)
     *
     * âœ… **Time Complexity:**
     * - **Optimized Approach:** O(N) -> Each element is processed at most twice.
     * - **Brute Force Approach:** O(NÂ²) -> Checking every possible subarray.
     *
     * âœ… **Space Complexity:** O(1) -> No extra space used.
     *
     * âœ… **Dry Run Example:**
     * Input: arr = [1,1,0,0,1,1,0,1,1,1,0], k = 2
     * - Step 1: Expand right pointer `r` while counting zeros.
     * - Step 2: If zeros exceed `k`, move `l` (left pointer).
     * - Step 3: Track the maximum valid window size.
     * - Output: **6** (Longest sequence of ones after flipping at most 2 zeros)
     */

    public int maxOnes(int arr[], int k) {
        int res = 0; // Store the maximum number of 1s we can get
        int l = 0, r = 0; // Two pointers for the sliding window
        int cnt = 0; // Count of zeros in the window
        
        while (r < arr.length) {
            // Expand the window by including the rightmost element
            if (arr[r] == 0) {
                cnt++; // Count the zero in the window
            }
            
            // If zero count exceeds k, move left pointer to shrink the window
            while (cnt > k) {
                if (arr[l] == 0) {
                    cnt--; // Remove zero from window count
                }
                l++; // Shrink the window from the left
            }
            
            // Update the maximum window size found so far
            res = Math.max(res, r - l + 1);
            r++; // Expand the window
        }
        
        return res;
        
        // ðŸ”´ Brute Force Approach - O(NÂ²) Time Complexity (Commented Out)
        /*
        for (int i = 0; i < arr.length; i++) { // Start of each subarray
            int cnt = 0; // Counter for number of zeros in the subarray
            
            for (int j = i; j < arr.length; j++) { // Extend the subarray to the right
                if (arr[j] == 0) {
                    cnt++; // Count zeros
                }

                // If the count of zeros is at most k, update the result
                if (cnt <= k) {
                    res = Math.max(res, j - i + 1);
                } else {
                    // If zeros exceed k, no need to extend this subarray further
                    break;
                }
            }
        }
        return res; // Return the maximum length found
        */
    }
}

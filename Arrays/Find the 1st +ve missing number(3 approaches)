https://www.geeksforgeeks.org/batch/gfg-160-problems/track/arrays-gfg-160/problem/smallest-positive-missing-number-1587115621

//Approach 1  Brute Force : Time Complexity-->O(n log n) ; Space Complexity-->O(1)
class Solution {
    // Function to find the smallest positive number missing from the array.
    public int missingNumber(int[] arr) {
        
        // Your code here
        Arrays.sort(arr);
       int res=1;
       for(int i=0;i<arr.length;i++){
           if(arr[i]==0 || arr[i]<0){
               continue;
           }
           if(arr[i]==res){
               res++;
           }
           else if(arr[i]>res){
               break;
           }
       }
       return res;
       
    }
}

//Approach 2 : Time Complexity-->O(n) ; Space Complexity-->O(n)
class Solution {
    // Function to find the smallest positive number missing from the array.
    public int missingNumber(int[] arr) {
        int n=arr.length;
        
        boolean[] temp = new boolean[n];
        
        int ans=n+1;
        
        for(int i=0;i<n;i++){
            if(arr[i]>0 && arr[i]<=n){
                temp[arr[i]-1]=true;
            }
        }
        
        for(int i=0;i<n;i++){
            if(!temp[i]){
                return i+1;
            }  
        }
        return ans;
    }
}
//Approach 3 Cycle sort : T.C --> O(n) ; S.C --> O(1)
public int missingNumber(int[] arr) {
        int n=arr.length;
        
        for(int i=0;i<n;i++){
            
            while(arr[i]>0 && arr[i]<=n && arr[i] != arr[arr[i]-1]){
                int temp=arr[i];
                arr[i]=arr[temp-1];
                arr[temp-1]=temp;
            }
        }
        
        for(int i=0;i<n;i++){
            if(arr[i]!=i+1){
                return i+1;
            }
        }
        
        return n+1;
  }

https://leetcode.com/problems/4sum/

import java.util.*;

class Solution {
    /*
    🔹 Approach 2: Two Pointers + Sorting (Optimized)
    ---------------------------------------------------
    - Sort the array to use a two-pointer technique efficiently.
    - Iterate through each pair (i, j) and use two pointers (left, right) to find remaining two numbers.
    - Store unique quadruplets in a HashSet to avoid duplicates.

    🔹 Time Complexity: O(N³) -> Three nested loops + Two-pointer search.
    🔹 Space Complexity: O(K) -> Where K is the number of unique quadruplets stored.

    🔹 Dry Run Example:
      Input: nums = [1, 0, -1, 0, -2, 2], target = 0
      Sorted: [-2, -1, 0, 0, 1, 2]
      Unique Quadruplets: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]
    */
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n = nums.length;
        Set<List<Integer>> hs = new HashSet<>();  // To store unique quadruplets

        Arrays.sort(nums);  // Sort the array for two-pointer approach

        // First two loops to fix two elements
        for (int i = 0; i < n - 3; i++) {
            for (int j = i + 1; j < n - 2; j++) {
                int left = j + 1, right = n - 1;

                // Two-pointer approach
                while (left < right) {
                    long sum = (long) nums[i] + nums[j] + nums[left] + nums[right];

                    if (sum == target) {
                        hs.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));
                        left++;
                        right--;
                    } else if (sum < target) {
                        left++;  // Need a larger sum
                    } else {
                        right--;  // Need a smaller sum
                    }
                }
            }
        }

        return new ArrayList<>(hs);
    }

    /*
    🔹 Approach 1: Brute Force (Nested Loops)
    ---------------------------------------------------
    - Use four nested loops to check all quadruplets.
    - Store them in a HashSet to avoid duplicates.

    🔹 Time Complexity: O(N⁴) -> Four nested loops.
    🔹 Space Complexity: O(K) -> Where K is the number of unique quadruplets.

    🔹 Dry Run Example:
      Input: nums = [1, 0, -1, 0, -2, 2], target = 0
      All Possible Quadruplets Checked (Even Duplicates)
      Unique Quadruplets Extracted from HashSet: [[-2, -1, 1, 2], [-2, 0, 0, 2], [-1, 0, 0, 1]]
    
    static List<List<Integer>> fourSum(int[] nums, int target) {
        int n = nums.length;
        Set<List<Integer>> hs = new HashSet<>();

        // Four nested loops to generate all possible quadruplets
        for (int i = 0; i < n - 3; i++) {
            for (int j = i + 1; j < n - 2; j++) {
                for (int k = j + 1; k < n - 1; k++) {
                    for (int l = k + 1; l < n; l++) {
                        if ((long) nums[i] + nums[j] + nums[k] + nums[l] == target) {
                            hs.add(Arrays.asList(nums[i], nums[j], nums[k], nums[l]));
                        }
                    }
                }
            }
        }

        return new ArrayList<>(hs);
    }
    */
}


https://leetcode.com/problems/unique-paths/description/

import java.util.Arrays;

class Solution {
    /**
     * âœ… **Approach 2: Dynamic Programming (Memoization)**
     * 
     * ðŸ”¹ **Idea**:
     *  - We use **recursion** with **memoization** (`dp` array) to store results for subproblems.
     *  - The function `countPaths(i, j, m, n, dp)` computes paths recursively.
     *  - If we already computed the paths from a position `(i, j)`, we use the cached result.
     *  - Base case: If we reach the **bottom-right** cell `(m-1, n-1)`, return **1** (valid path).
     *  - If we move **out of bounds**, return **0**.
     * 
     * ðŸ”¹ **Time Complexity**: **O(m Ã— n)** â†’ We compute each subproblem only once.
     * ðŸ”¹ **Space Complexity**: **O(m Ã— n)** â†’ We use a `dp` table of size `m Ã— n`.
     */
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];  // DP table for memoization

        // Initialize DP table with -1 (indicating uncomputed values)
        for (int[] row : dp) Arrays.fill(row, -1);

        return countPaths(0, 0, m, n, dp);
    }

    private int countPaths(int i, int j, int m, int n, int[][] dp) {
        // If out of bounds, return 0 (invalid path)
        if (i >= m || j >= n) return 0;

        // Base Case: If we reach the bottom-right cell, return 1 (valid path found)
        if (i == m - 1 && j == n - 1) return 1;

        // If the value is already computed, return it (Memoization)
        if (dp[i][j] != -1) return dp[i][j];

        // Compute the number of paths recursively and store the result in dp
        dp[i][j] = countPaths(i + 1, j, m, n, dp) + countPaths(i, j + 1, m, n, dp);
        return dp[i][j];
    }

    /*
     âœ… **Approach 3: Combinatorial Mathematics**
     * 
     * ðŸ”¹ **Idea**:
     *  - The number of unique paths from (0,0) to (m-1,n-1) is given by:
     *    `C(m+n-2, m-1) = (m+n-2)! / [(m-1)! * (n-1)!]`
     *  - We calculate it iteratively to avoid overflow.
     * 
     * ðŸ”¹ **Time Complexity**: **O(min(m, n))** â†’ We compute the result in a loop.
     * ðŸ”¹ **Space Complexity**: **O(1)** â†’ No extra space is used.
     */
    /*
    public int uniquePaths(int m, int n) {
        int N = n + m - 2;  // Total steps needed
        int r = m - 1;      // Choose m-1 down moves
        double res = 1;

        // Compute C(N, r) iteratively
        for (int i = 1; i <= r; i++) {
            res = res * (N - r + i) / i;
        }
        return (int) res;
    }
    */

    /*
     âœ… **Approach 1: Brute Force (Recursion)**
     * 
     * ðŸ”¹ **Idea**:
     *  - Try all possible paths using recursion.
     *  - At each cell `(i, j)`, move **right** `(i, j+1)` or **down** `(i+1, j)`.
     *  - If we reach the bottom-right cell, return 1.
     *  - If we move out of bounds, return 0.
     * 
     * ðŸ”¹ **Time Complexity**: **O(2^(m+n))** â†’ Exponential time due to recursion.
     * ðŸ”¹ **Space Complexity**: **O(m+n)** â†’ Recursive stack space.
     */
    /*
    public int uniquePaths(int m, int n) {
        return countPaths(0, 0, m, n);
    }

    private int countPaths(int i, int j, int m, int n) {
        // Base Case: If we reach the last cell, return 1
        if (i == m - 1 && j == n - 1) return 1;

        // If out of bounds, return 0
        if (i >= m || j >= n) return 0;

        // Recursively explore both directions
        return countPaths(i + 1, j, m, n) + countPaths(i, j + 1, m, n);
    }
    */

    public static void main(String[] args) {
        Solution sol = new Solution();
        int m = 3, n = 3; // Example grid size (3x3)
        System.out.println("Number of unique paths: " + sol.uniquePaths(m, n));
    }
}

//https://leetcode.com/problems/sort-colors/
class Solution {
    /*
     * âœ… Approach:
     * We need to sort an array containing **only 0s, 1s, and 2s** (similar to the Dutch National Flag problem).
     *
     * ðŸ”¹ **Optimized Approach (Dutch National Flag Algorithm - O(N))**
     *   1. Use **three pointers (`low`, `mid`, `high`)**:
     *      - `low` â†’ Points to the next position for 0.
     *      - `mid` â†’ Traverses the array.
     *      - `high` â†’ Points to the next position for 2.
     *   2. If `arr[mid] == 0` â†’ Swap with `arr[low]`, move both pointers.
     *   3. If `arr[mid] == 1` â†’ Move `mid` forward.
     *   4. If `arr[mid] == 2` â†’ Swap with `arr[high]`, move `high` backward.
     *
     * ðŸ”¹ **Brute Force Approach (Counting Sort - O(N)) - Commented Out**
     *   - Count occurrences of 0s, 1s, and 2s.
     *   - Overwrite the array using the counts.
     *
     * âœ… Time Complexity:
     * - **Optimized Approach:** O(N) (Single pass)
     * - **Brute Force Approach:** O(N) (Two passes)
     *
     * âœ… Space Complexity:
     * - **Optimized Approach:** O(1) (No extra space)
     * - **Brute Force Approach:** O(1) (No extra space)
     *
     * âœ… Dry Run Example (Optimized Approach):
     * Input: arr = [2, 0, 2, 1, 1, 0]
     * Steps:
     * - Initial: low=0, mid=0, high=5
     * - Swap `arr[0]` and `arr[5]`: [0, 0, 2, 1, 1, 2] (low++, mid++)
     * - Swap `arr[2]` and `arr[4]`: [0, 0, 1, 1, 2, 2] (mid++)
     * - Done!
     * Output: **[0, 0, 1, 1, 2, 2]**
     */

    public void sortColors(int[] arr) {
        int n = arr.length;

        // âœ… Optimized Approach: Dutch National Flag Algorithm (O(N))
        int low = 0, mid = 0, high = n - 1;

        while (mid <= high) {
            if (arr[mid] == 0) {
                swap(arr, low, mid);
                low++;
                mid++;
            } else if (arr[mid] == 1) {
                mid++; // 1 is already in place
            } else { // arr[mid] == 2
                swap(arr, mid, high);
                high--; // Move high pointer backward
            }
        }
    }

    // Helper function to swap two elements
    private void swap(int[] arr, int start, int end) {
        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
    }

    /*
     * ðŸ”´ Brute Force Approach (O(N) - Commented Out)
     * - Count occurrences of **0s, 1s, and 2s**.
     * - Overwrite the array based on the counts.
     */

    /*
    public void sortColors(int[] arr) {
        int n = arr.length;
        int countZ = 0, countO = 0, countT = 0;

        // Count the number of 0s, 1s, and 2s
        for (int i = 0; i < n; i++) {
            if (arr[i] == 0) countZ++;
            else if (arr[i] == 1) countO++;
            else countT++;
        }

        // Overwrite the array based on the counts
        for (int i = 0; i < countZ; i++) arr[i] = 0;
        for (int i = countZ; i < countZ + countO; i++) arr[i] = 1;
        for (int i = countZ + countO; i < n; i++) arr[i] = 2;
    }
    */
}


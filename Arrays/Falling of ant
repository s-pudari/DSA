https://www.geeksforgeeks.org/batch/gfg-160-problems/track/array-bonus-problems/problem/last-moment-before-all-ants-fall-out-of-a-plank
class Solution {
    /*
     * ✅ Approach:
     * - We have ants moving in both directions on a plank of length **n**.
     * - The ants **change direction when they collide**, but this doesn't affect their falling time.
     * - **Key Observation:** The final fall time depends only on:
     *     1. The **left-moving ants**, which will fall off at their initial positions.
     *     2. The **right-moving ants**, which will fall off at `(n - position)`.
     * - We need to find the **maximum time taken** for an ant to fall off.
     * - This means:
     *     - The farthest **left-moving** ant falls at time **`left[i]`**.
     *     - The farthest **right-moving** ant falls at time **`(n - right[i])`**.
     * - The answer is simply `max(max(left[]), max(n - right[]))`.
     *
     * ✅ Time Complexity: O(N) - We iterate through both arrays once.
     * ✅ Space Complexity: O(1) - We use only a few extra variables.
     *
     * ✅ Dry Run Example:
     * Input:
     *     n = 4
     *     left = [4, 3]
     *     right = [0, 1]
     * Steps:
     * - Left-moving ants fall at times **[4, 3]** → Max = **4**.
     * - Right-moving ants fall at times **[4 - 0, 4 - 1] = [4, 3]** → Max = **4**.
     * - Answer = **Max(4, 4) = 4**.
     *
     * Output: **4**
     */

    public int getLastMoment(int n, int left[], int right[]) {
        int res = 0;

        // Find the farthest left-moving ant (max value in left[])
        for (int i = 0; i < left.length; i++) {
            res = Math.max(res, left[i]);
        }

        // Find the farthest right-moving ant (max(n - right[i]))
        for (int i = 0; i < right.length; i++) {
            res = Math.max(res, n - right[i]);
        }

        return res; // The maximum time at which an ant falls off the plank
    }
}

//https://leetcode.com/problems/best-time-to-buy-and-sell-stock/
class Solution {
    /*
     * âœ… Approach:
     * We need to find the **maximum profit** by **buying** and **selling** a stock.
     * - **Buy at a lower price** and **sell at a higher price** later.
     * - We **cannot short-sell** (i.e., no selling before buying).
     *
     * ðŸ”¹ **Optimized Approach (O(N) - Single Pass)**
     *   1. Track the **minimum price** encountered so far.
     *   2. At each step, calculate the **profit if we sold today** (`arr[i] - min`).
     *   3. Update `profit` if this profit is greater than the previous max.
     *   4. Update `min` to ensure we always buy at the lowest price.
     *
     * ðŸ”¹ **Brute Force Approach (O(NÂ²)) - Commented Out**
     *   - Try **all possible buy and sell days** using nested loops.
     *   - Compute profits and keep track of the maximum.
     *
     * âœ… Time Complexity:
     * - **Optimized Approach:** O(N) (Single loop)
     * - **Brute Force Approach:** O(NÂ²) (Nested loops)
     *
     * âœ… Space Complexity:
     * - **All approaches:** O(1) (Only a few extra variables)
     *
     * âœ… Dry Run Example (Optimized Approach):
     * Input: arr = [7, 1, 5, 3, 6, 4]
     * Steps:
     * - `min = 7`, `profit = 0`
     * - `arr[1] = 1`, update `min = 1`
     * - `arr[2] = 5`, potential profit = `5 - 1 = 4`, update `profit = 4`
     * - `arr[3] = 3`, potential profit = `3 - 1 = 2` (no update)
     * - `arr[4] = 6`, potential profit = `6 - 1 = 5`, update `profit = 5`
     * - `arr[5] = 4`, potential profit = `4 - 1 = 3` (no update)
     * Output: **5**
     */

    public int maxProfit(int[] arr) {
        int n = arr.length;

        // âœ… Optimized Approach: Single Pass (O(N))
        int min = arr[0];  // Track minimum price so far
        int profit = 0;     // Track maximum profit

        for (int i = 1; i < n; i++) {
            int cost = arr[i] - min; // Profit if sold today
            profit = Math.max(cost, profit); // Update max profit
            min = Math.min(min, arr[i]); // Update minimum price
        }
        return profit;

        /*
         * ðŸ”´ Brute Force Approach (O(NÂ²) - Commented Out)
         * - Try all possible buy and sell days.
         * - Update max profit whenever `arr[j] - arr[i]` is greater.
         */

        /*
        int maxPro = 0;
        for (int i = 0; i < n - 1; i++) { // Buying day
            for (int j = i + 1; j < n; j++) { // Selling day
                if (arr[j] > arr[i]) { // Valid transaction
                    maxPro = Math.max(maxPro, arr[j] - arr[i]);
                }
            }
        }
        return maxPro;
        */
    }
}


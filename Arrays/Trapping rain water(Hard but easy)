https://leetcode.com/problems/trapping-rain-water/description/
//Approach 1 using leftMax and rightMax T.C --> O(n) & S.C --> O(2n)
class Solution {
    public int maxWater(int arr[]) {
        // code here
        int n=arr.length;
        int totalWater=0;
        
        int[] prefixMax=new int[n];
        int[] suffixMax=new int[n];
        
        prefixMax[0]=arr[0];
        
        for(int i=1;i<n;i++){
            prefixMax[i]=Math.max(prefixMax[i-1],arr[i]);
        }
        
        suffixMax[n-1]=arr[n-1];
        for(int i=n-2;i>=0;i--){
            suffixMax[i]=Math.max(suffixMax[i+1],arr[i]);
        }
        
        for(int i=0;i<n;i++){
            int leftMax=prefixMax[i],rightMax=suffixMax[i];
            if(arr[i]<leftMax && arr[i]<rightMax){
                totalWater+=Math.min(leftMax,rightMax)-arr[i];
            }
     
        }
        return totalWater;
    }
}


//Approach 2 using two pointers T.C --> O(n) S.C-->O(1)

class Solution {
    public int trap(int[] arr) {
        int lmax=0,rmax=0,total=0,l=0,r=arr.length-1;

        while(l<r){
            if(arr[l]<=arr[r]){
                if(arr[l]>lmax){
                    lmax=arr[l];
                }
                else{
                    total+=lmax-arr[l];
                }
                l++;
            }
            else{
                if(arr[r]>rmax){
                    rmax=arr[r];
                }
                else{
                    total+=rmax-arr[r];
                }
                r--;
            }
        }
        return total;
        
    }
}

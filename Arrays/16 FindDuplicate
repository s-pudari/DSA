/*
Problem Name: Find the Duplicate Number
LeetCode Link: https://leetcode.com/problems/find-the-duplicate-number/

Problem Explanation:
You are given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.
There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.
*/

class Solution {

    /*
    ------------------------------------------
    Brute-Force Approach
    Time Complexity: O(n^2)
    Space Complexity: O(1)
    ------------------------------------------
    Explanation:
    Compare every element with every other element to find the duplicate.

    Dry Run Example:
    nums = [3, 1, 3, 4, 2]
    -> i=0: compare nums[0] with nums[1], nums[2] == nums[0] -> duplicate found: 3
    */
    public int findDuplicateBruteForce(int[] nums) {
        for(int i = 0; i < nums.length - 1; i++) {
            for(int j = i + 1; j < nums.length; j++) {
                if(nums[i] == nums[j]) {
                    return nums[i];
                }
            }
        }
        return -1; // Should never reach here as duplicate is guaranteed
    }


    /*
    ------------------------------------------
    Optimized Approach 1: Cycle Sort-Based
    Time Complexity: O(n)
    Space Complexity: O(1)
    ------------------------------------------
    Explanation:
    Since values are from 1 to n, the correct index for value x is x - 1. We place each element at its correct index. 
    If we find an element already present at its correct position, that is the duplicate.

    Dry Run Example:
    nums = [3, 1, 3, 4, 2]
    Initial: [3, 1, 3, 4, 2]
    Step 1: swap index 0 and 2 -> [3, 1, 3, 4, 2] (duplicate detected: arr[i] == arr[correctIndex])
    Return 3
    */
    public int findDuplicate(int[] nums) {
        cycleSort(nums); // Places numbers in their correct positions if possible

        // After cycle sort, if an element is not at its correct position, it's a duplicate
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] != i + 1) {
                return nums[i];
            }
        }
        return -1; // Should never reach here
    }

    public void cycleSort(int[] arr) {
        int i = 0;
        while (i < arr.length) {
            int correctIndex = arr[i] - 1; // Expected position for arr[i]

            /*
            If the current element is not at its correct index,
            and it's not already a duplicate, then place it at its correct index
            */
            if (arr[i] != arr[correctIndex]) {
                swap(arr, i, correctIndex);
            } else {
                i++; // Move to next index if already in correct place or duplicate
            }
        }
    }

    public void swap(int[] arr, int first, int second) {
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }


    /*
    ------------------------------------------
    Optimized Approach 2: Floyd's Tortoise and Hare (Cycle Detection)
    Time Complexity: O(n)
    Space Complexity: O(1)
    ------------------------------------------
    Explanation:
    Treat the array as a linked list where the value at each index points to the next node.
    Use slow and fast pointers to detect a cycle and find the start of the cycle which is the duplicate.

    Dry Run Example:
    nums = [3, 1, 3, 4, 2]
    - slow = 3 -> 4 -> 2
    - fast = 3 -> 4 -> 2 -> 3 -> 4
    - slow meets fast at 4
    - Reset fast = 0, now both meet at 3, which is the duplicate
    */

    public int findDuplicateFloyd(int[] nums) {
        int slow = nums[0];
        int fast = nums[0];

        // Phase 1: Finding intersection point
        do {
            slow = nums[slow];
            fast = nums[nums[fast]];
        } while (slow != fast);

        // Phase 2: Finding entrance to cycle (duplicate element)
        fast = nums[0];
        while (slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }

        return slow;
    }
}

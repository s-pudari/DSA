import java.util.*;

class Solution {
    /*
     * âœ… **Problem Statement:**
     * - Find all elements in an array that appear **more than `n/3` times**.
     * 
     * ðŸ”¹ **Optimized Approach (Boyer-Moore Voting Algorithm)**
     *   - At most, **two elements** can appear more than `n/3` times.
     *   - We use **two counters (`cnt1`, `cnt2`)** and **two candidates (`ele1`, `ele2`)**.
     *   - **Step 1: Find potential majority candidates** (first pass).
     *   - **Step 2: Verify the candidates** by counting their occurrences (second pass).
     *
     * âœ… **Time Complexity:** `O(n)` (Single pass for candidate selection + one pass for verification)
     * âœ… **Space Complexity:** `O(1)` (Constant space, no extra data structures)
     *
     * âœ… **Dry Run Example:**
     * **Input:** nums = [3, 1, 2, 3, 1, 3, 3]
     * **Steps:**
     * 1. **Candidate Selection:** 
     *    - `ele1 = 3`, `cnt1 = 1`
     *    - `ele2 = 1`, `cnt2 = 1`
     *    - `3` appears again â†’ `cnt1 = 2`
     *    - `2` appears (not 3 or 1) â†’ `cnt1--`, `cnt2--`
     *    - `3` appears again â†’ `cnt1 = 1`
     *    - `1` appears again â†’ `cnt2 = 1`
     *    - `3` appears again â†’ `cnt1 = 2`
     * 2. **Final Count Verification:** 
     *    - `3` appears **4 times** (â‰¥ `n/3 = 3`), so **add 3 to result**.
     *    - `1` appears **2 times** (less than `n/3 = 3`), **not included**.
     * **Final Output:** `[3]`
     */

    public List<Integer> majorityElement(int[] nums) {
        List<Integer> li = new ArrayList<>();
        int cnt1 = 0, cnt2 = 0;
        int ele1 = Integer.MIN_VALUE, ele2 = Integer.MIN_VALUE;
        int min = (nums.length / 3) + 1; // Minimum frequency to be a majority element

        // ðŸ”¹ Step 1: Find potential candidates using Boyer-Moore algorithm
        for (int i = 0; i < nums.length; i++) {
            if (cnt1 == 0 && nums[i] != ele2) {
                ele1 = nums[i];
                cnt1 = 1;
            } else if (cnt2 == 0 && nums[i] != ele1) {
                ele2 = nums[i];
                cnt2 = 1;
            } else if (nums[i] == ele1) {
                cnt1++;
            } else if (nums[i] == ele2) {
                cnt2++;
            } else {
                cnt1--;
                cnt2--;
            }
        }

        // ðŸ”¹ Step 2: Verify that these candidates appear more than n/3 times
        cnt1 = 0;
        cnt2 = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == ele1) {
                cnt1++;
            }
            if (nums[i] == ele2) {
                cnt2++;
            }
        }

        if (cnt1 >= min) {
            li.add(ele1);
        }
        if (cnt2 >= min) {
            li.add(ele2);
        }

        return li;
    }

    /*
     * ðŸ”´ **Approach 2: Using HashMap (O(n) Time, O(n) Space)**
     * - Store the frequency of each element in a HashMap.
     * - Return elements with count > `n/3`.
     * 
     * âœ… **Time Complexity:** `O(n)`
     * âœ… **Space Complexity:** `O(n)`
     */

    /*
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> li = new ArrayList<>();
        HashMap<Integer, Integer> hm = new HashMap<>();
        int min = (nums.length / 3) + 1;

        for (int i = 0; i < nums.length; i++) {
            hm.put(nums[i], hm.getOrDefault(nums[i], 0) + 1);
        }

        for (int key : hm.keySet()) {
            if (hm.get(key) >= min) {
                li.add(key);
            }
        }
        return li;
    }
    */

    /*
     * ðŸ”´ **Approach 1: Brute Force (O(nÂ²) Time, O(1) Space)**
     * - Check the frequency of each element by iterating through the array twice.
     * - If an element appears more than `n/3` times, add it to the result.
     * 
     * âœ… **Time Complexity:** `O(nÂ²)`
     * âœ… **Space Complexity:** `O(1)`
     */

    /*
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> li = new ArrayList<>();
        int n = nums.length;

        for (int i = 0; i < n; i++) {
            if (li.size() == 0 || li.get(0) != nums[i]) {
                int cnt = 1;
                for (int j = i + 1; j < n; j++) {
                    if (nums[i] == nums[j]) {
                        cnt++;
                    }
                }
                if (cnt > n / 3) {
                    li.add(nums[i]);
                }
                if (li.size() == 2) {
                    break;
                }
            }
        }
        return li;
    }
    */
}

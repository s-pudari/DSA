https://leetcode.com/problems/majority-element/submissions/1474546622/

class Solution {
    /*
     * âœ… **Problem Statement:**
     * - Find the majority element in an array (element that appears more than `n/2` times).
     *
     * ðŸ”¹ **Optimized Approach (Boyer-Moore Voting Algorithm)**
     *   - Intuition: If an element appears more than `n/2` times, it will **always survive** when we cancel out non-majority elements.
     *   - Maintain:
     *     - `ele` â†’ stores potential majority element.
     *     - `cnt` â†’ counts occurrences.
     *   - Traverse the array:
     *     - If `cnt == 0`, assume `nums[i]` as majority element (`ele = nums[i]`).
     *     - If `nums[i] == ele`, increase `cnt`.
     *     - Otherwise, **decrease `cnt`** (cancel out non-majority elements).
     * âœ… **Time Complexity:** `O(n)` (Single pass through the array)
     * âœ… **Space Complexity:** `O(1)` (No extra space used)
     *
     * âœ… **Dry Run Example:**
     * **Input:** nums = [3, 3, 4, 2, 3, 3, 3]
     * **Steps:**
     * 1. `cnt=0`, set `ele=3`, `cnt=1`
     * 2. `nums[1]=3`, `cnt=2`
     * 3. `nums[2]=4`, `cnt=1`
     * 4. `nums[3]=2`, `cnt=0`
     * 5. `nums[4]=3`, set `ele=3`, `cnt=1`
     * 6. `nums[5]=3`, `cnt=2`
     * 7. `nums[6]=3`, `cnt=3` â†’ **Majority Element = 3**
     */

    public int majorityElement(int[] nums) {
        int cnt = 0;
        int ele = 0;

        for (int i = 0; i < nums.length; i++) {
            if (cnt == 0) { 
                ele = nums[i]; // Assume new majority candidate
                cnt++;
            } else if (ele == nums[i]) {
                cnt++; // Increase count for same element
            } else {
                cnt--; // Cancel out different elements
            }
        }

        return ele; // Since majority element always exists, return `ele`

        /*
         * ðŸ”¹ **Verification Step (Optional)**
         * - If we are unsure whether a majority element exists, we need a second pass to verify:
         */
        
        /* 
        int cnt1 = 0;
        for (int i = 0; i < nums.length; i++) {
            if (ele == nums[i]) cnt1++;
        }
        if (cnt1 > (nums.length / 2)) return ele;
        return -1; // Return -1 if no majority element found
        */
    }

    /*
     * ðŸ”´ **Approach 2: Using HashMap (O(n) Time, O(n) Space)**
     * - Store frequency of each element in a HashMap.
     * - Traverse the HashMap and return the element with count > `n/2`.
     */
    
    /*
    public int majorityElement(int[] nums) {
        HashMap<Integer, Integer> freqMap = new HashMap<>();
        int maxCount = 0, ans = 0;

        // Store frequencies of each element
        for (int i = 0; i < nums.length; i++) {
            freqMap.put(nums[i], freqMap.getOrDefault(nums[i], 0) + 1);
        }

        // Find element with max frequency
        for (int key : freqMap.keySet()) {
            if (freqMap.get(key) > maxCount) {
                maxCount = freqMap.get(key);
                ans = key;
            }
        }

        return ans;
    }
    */

    /*
     * ðŸ”´ **Approach 1: Brute Force (O(nÂ²) Time, O(1) Space)**
     * - Check frequency of each element by iterating the array twice.
     * - If an element appears more than `n/2` times, return it.
     */

    /*
    public int majorityElement(int[] nums) {
        for (int i = 0; i < nums.length - 1; i++) {
            int cnt = 1;
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] == nums[j]) {
                    cnt++;
                }
            }
            if (cnt > (nums.length) / 2) {
                return nums[i];
            }
        }
        return -1;
    }
    */
}

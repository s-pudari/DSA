//https://leetcode.com/problems/find-the-duplicate-number/
class Solution {
    /*
     * âœ… Approach:
     * We are given an array of `n+1` integers where each number is between `1` and `n`.
     * We need to **find the duplicate number** in the array.
     *
     * ðŸ”¹ **Optimized Approach (Floydâ€™s Cycle Detection - O(N))**
     *   1. Treat the array as a **linked list** where `nums[i]` is a pointer to `nums[nums[i]]`.
     *   2. Use **Floyd's Tortoise and Hare (Cycle Detection)**:
     *      - Move `slow` by **1 step** and `fast` by **2 steps**.
     *      - If they meet, a cycle exists.
     *   3. Reset `fast` to start and move both **1 step** at a time.
     *   4. When `slow == fast`, that index contains the **duplicate number**.
     *
     * ðŸ”¹ **Brute Force Approach (O(NÂ²)) - Commented Out**
     *   - Use **two nested loops** to check for duplicate elements.
     *
     * âœ… Time Complexity:
     * - **Optimized Approach:** O(N) (Two traversals)
     * - **Brute Force Approach:** O(NÂ²) (Nested loops)
     *
     * âœ… Space Complexity:
     * - **Both approaches:** O(1) (No extra space used)
     *
     * âœ… Dry Run Example (Optimized Approach - Floyd's Algorithm):
     * Input: nums = [1, 3, 4, 2, 2]
     * Steps:
     * - `slow` moves by 1 step, `fast` moves by 2 steps:
     *   - `slow = nums[1] = 3`, `fast = nums[nums[1]] = nums[3] = 2`
     *   - `slow = nums[3] = 2`, `fast = nums[nums[2]] = nums[2] = 4`
     *   - `slow = nums[2] = 4`, `fast = nums[nums[4]] = nums[4] = 2`
     *   - `slow = nums[4] = 2`, `fast = nums[nums[2]] = nums[2] = 4`
     *   - **They meet at `2`**, confirming the cycle.
     * - Reset `fast = nums[0]`, move both pointers by 1 step:
     *   - `slow = nums[4] = 2`, `fast = nums[1] = 3`
     *   - `slow = nums[2] = 4`, `fast = nums[3] = 2`
     *   - **They meet at `2`**, which is the duplicate number.
     * 
     * Output: **2**
     */

    public int findDuplicate(int[] nums) {
        int slow = nums[0];
        int fast = nums[0];

        // âœ… Step 1: Detect cycle using Floydâ€™s Algorithm
        do {
            slow = nums[slow];         // Move `slow` by 1 step
            fast = nums[nums[fast]];   // Move `fast` by 2 steps
        } while (slow != fast);

        // âœ… Step 2: Reset fast pointer and find cycle start
        fast = nums[0];
        while (slow != fast) {
            slow = nums[slow];  // Move both by 1 step
            fast = nums[fast];
        }
        return slow; // Duplicate number
    }

    /*
     * ðŸ”´ Brute Force Approach (O(NÂ²)) - Commented Out
     * - Compare each element with every other element using two loops.
     * - If a duplicate is found, return it.
     */

    /*
    public int findDuplicate(int[] nums) {
        for (int i = 0; i < nums.length - 1; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] == nums[j]) {
                    return nums[i]; // Found duplicate
                }
            }
        }
        return -1; // No duplicate found (should not happen in valid inputs)
    }
    */
}


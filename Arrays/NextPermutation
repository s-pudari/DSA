https://leetcode.com/problems/next-permutation/
import java.util.*;

class Solution {
    /*
     * âœ… Approach:
     * Given an array representing a permutation, the task is to find the **next lexicographical permutation**.
     * 
     * ðŸ”¹ Optimized Approach (Using Two Pointers - O(N))
     *   1. Find the **first decreasing element** from the right (`arr[i] < arr[i+1]`).
     *   2. If found:
     *      - Find the smallest element **greater than arr[i]** to the right (`arr[j] > arr[i]`).
     *   3. **Swap** `arr[i]` with `arr[j]` to get the next larger sequence.
     *   4. **Reverse** the elements **after `i`** to get the next permutation.
     *   5. If no `i` is found, it means the array is already the largest permutation, so we **reverse the entire array**.
     *
     * ðŸ”¹ Brute Force Approach (O(N!))
     *   - Generate all permutations of the array.
     *   - Sort them lexicographically.
     *   - Find the **current permutation**, and return the **next one in order**.
     *
     * âœ… Time Complexity:
     * - **Optimized Approach:** O(N) (Efficient)
     * - **Brute Force Approach:** O(N! * N) (Inefficient)
     * 
     * âœ… Space Complexity:
     * - **Optimized Approach:** O(1) (in-place modification)
     * - **Brute Force Approach:** O(N!) (because we generate all permutations)
     * 
     * âœ… Dry Run (Optimized Approach):
     * Input: arr = [1, 2, 3]
     * - Find first decreasing from right: `arr[1] (2) < arr[2] (3)`, so `i = 1`
     * - Find smallest element > `arr[1] = 2`, which is `arr[2] = 3`
     * - Swap: `arr = [1, 3, 2]`
     * - Reverse right side (does nothing since it's already in order)
     * - **Next Permutation: [1, 3, 2]**
     */

    public void nextPermutation(int[] arr) {
        int n = arr.length;
        int i = n - 2;

        // Step 1: Find the first decreasing element from the right (i)
        while (i >= 0 && arr[i] >= arr[i + 1]) {
            i--;
        }

        if (i >= 0) { // If a decreasing element is found
            int j = n - 1; // Start from the last element
            
            // Find the first element greater than arr[i] from the right
            while (arr[j] <= arr[i]) {
                j--;
            }
            
            // Swap arr[i] with arr[j]
            swap(arr, i, j);
        }
        
        // Reverse the portion of array after index i to get the next permutation
        reverse(arr, i + 1, n - 1);
    }

    // Swap two elements in the array
    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    // Reverse a portion of the array
    private void reverse(int[] arr, int start, int end) {
        while (start < end) {
            swap(arr, start, end);
            start++;
            end--;
        }
    }

    /*
     * ðŸ”´ Brute Force Approach (O(NÂ² * logN) - Commented Out)
     * - Generate all **possible permutations** of the array.
     * - Sort the permutations in lexicographical order.
     * - Find the current permutation in the sorted list.
     * - Return the next permutation (if exists), otherwise return the first permutation.
     * - **This is inefficient** since sorting takes `O(N log N)`, and finding next permutation is `O(N)`, making total complexity **O(NÂ² log N)`.
     */

    /*
    public void nextPermutation(int[] arr) {
        List<List<Integer>> allPermutations = new ArrayList<>();
        Arrays.sort(arr); // Step 1: Sort to ensure lexicographical order
        
        // Generate all permutations and store in a list
        while (true) {
            List<Integer> current = new ArrayList<>();
            for (int num : arr) {
                current.add(num);
            }
            allPermutations.add(current);

            // Find next permutation
            if (!nextPermutation(arr)) {
                break;
            }
        }

        // Find the index of the current permutation
        for (int i = 0; i < allPermutations.size(); i++) {
            if (current.equals(allPermutations.get(i))) {
                if (i == allPermutations.size() - 1) {
                    return new ArrayList<>(Arrays.asList(-1, -1)); // No next permutation
                }
                return new ArrayList<>(Arrays.asList(i, i + 1)); // Return next index
            }
        }
        
        // If no valid next permutation is found
        return new ArrayList<>(Arrays.asList(-1, -1));
    }
    */
}

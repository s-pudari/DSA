https://www.geeksforgeeks.org/batch/gfg-160-problems/track/sorting-gfg-160/problem/inversion-of-array-1587115620
//Approach 2 using mergeSort T.C --> O(n log n) S.C --> O(n)
class Solution {
    // Function to count inversions in the array.
    static int inversionCount(int arr[]) {
        // Your Code Here
        int n=arr.length;
        
        int cnt=mergeSort(arr,0,n-1);
        
        return cnt;
    }
    static int mergeSort(int[] arr,int low,int high){
        int count=0;
        if(low>=high) return count;
        
        int mid=low+(high-low)/2;
        
        count+=mergeSort(arr,low,mid);
        count+=mergeSort(arr,mid+1,high);
        
        count+=merge(arr,low,mid,high);
        
        return count;
    }
    static int merge(int[] arr,int low,int mid,int high){
        int cnt=0;
        
        int left=low;
        int right=mid+1;
        
        ArrayList<Integer> li = new ArrayList<>();
        
        while(left<=mid && right<=high){
            if(arr[left]<=arr[right]){
                li.add(arr[left]);
                left++;
            }
            else{
                li.add(arr[right]);
                cnt+=(mid-left+1);
                right++;
            }
        }
        
        while(left<=mid){
            li.add(arr[left]);
            left++;
        }
        while(right<=high){
            li.add(arr[right]);
            right++;
        }
        
        for(int i=low;i<=high;i++){
            arr[i]=li.get(i-low);
        }
        return cnt;
    }
}
//Approach 1 using bruteForce T.C --> O(n^2)  S.C --> O(1)
class Solution {
    // Function to count inversions in the array.
    static int inversionCount(int arr[]) {
        // Your Code Here
        int n=arr.length;
        int cnt=0;
        
        for(int i=0;i<n-1;i++){
            for(int j=i+1;j<n;j++){
                if(arr[i]>arr[j]){
                    cnt++;
                }
            }
        }
        return cnt;
    }
}

https://www.geeksforgeeks.org/batch/gfg-160-problems/track/queue-and-deque-gfg-160/problem/maximum-of-all-subarrays-of-size-k3101
//Approach 2 using Dequeue
import java.util.*;

class Solution {
    /**
     * Approach:
     * - We use a **deque (double-ended queue)** to efficiently find the maximum element in each sliding window.
     * - The deque stores indices of elements in a decreasing order of values.
     * - For each new element, remove elements from the back of the deque that are smaller than the current element.
     * - The front of the deque always contains the index of the maximum element in the current window.
     * 
     * Steps:
     * 1. Remove elements from the front of the deque if they are out of the window's range.
     * 2. Remove elements from the back if they are smaller than the current element (as they will never be useful in future windows).
     * 3. Add the current element's index to the deque.
     * 4. The maximum element for the current window is stored at the front of the deque.
     * 5. Store this maximum value in the result list.
     * 
     * Time Complexity: O(N) - Each element is pushed and popped from the deque at most once.
     * Space Complexity: O(K) - The deque stores at most 'K' elements at any time.
     */

    public ArrayList<Integer> maxOfSubarrays(int arr[], int k) {
        ArrayList<Integer> ans = new ArrayList<>();
        Deque<Integer> dq = new ArrayDeque<>();
        
        for (int i = 0; i < arr.length; i++) {
            // Step 1: Remove elements that are out of the current window
            if (!dq.isEmpty() && dq.peek() == i - k) {
                dq.poll();
            }

            // Step 2: Remove elements from the back that are smaller than the current element
            while (!dq.isEmpty() && arr[dq.peekLast()] < arr[i]) {
                dq.pollLast();
            }

            // Step 3: Insert current element index into the deque
            dq.offer(i);

            // Step 4: If we have processed at least 'k' elements, store the max value
            if (i >= k - 1) {
                ans.add(arr[dq.peek()]);  // Front of deque is the maximum for this window
            }
        }
        
        return ans;
    }

    /**
     * Dry Run Example:
     * Input: arr = [1, 3, 1, 2, 0, 5], k = 3
     * 
     * Step 1: i = 0 -> dq = [0]
     * Step 2: i = 1 -> Remove index 0 (since 3 > 1), dq = [1]
     * Step 3: i = 2 -> dq = [1, 2] -> max = arr[1] = 3
     * Step 4: i = 3 -> Remove index 2, dq = [1, 3] -> max = arr[1] = 3
     * Step 5: i = 4 -> dq = [3, 4] -> max = arr[3] = 2
     * Step 6: i = 5 -> Remove all indices since 5 is the max, dq = [5] -> max = arr[5] = 5
     * 
     * Output: [3, 3, 2, 5]
     */
}
//Approach 1 using brute force 
  for(int i=0;i<=arr.length-k;i++){
            
            int max=arr[i];
            for(int j=1;j<k;j++){
                if(arr[i+j]>max){
                    max=arr[i+j];
                }
            }
            ans.add(max);
        }

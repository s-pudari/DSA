
https://www.geeksforgeeks.org/batch/gfg-160-problems/track/stack-gfg-160/problem/stock-span-problem-1587115621
/*
Approach 2:
- We use a **monotonic decreasing stack** to keep track of stock prices.
- The stack stores **indices** of the elements instead of the elements themselves.
- For each element `arr[i]`:
  - Remove all elements from the stack **if they are smaller than or equal to `arr[i]`**.
  - If the stack is empty, it means no greater element exists before `i`, so span = `i + 1`.
  - Otherwise, span = `i - stack.peek()` (distance from the nearest greater element to the left).
  - Push the current index onto the stack.

Time Complexity:
- Each element is pushed and popped from the stack at most once.
- **O(N) in total**.

Space Complexity:
- **O(N)** for the stack in the worst case.

*/
class Solution {
    public ArrayList<Integer> calculateSpan(int[] arr) {
        ArrayList<Integer> span = new ArrayList<>();
        Stack<Integer> st = new Stack<>();

        for (int i = 0; i < arr.length; i++) {
            // Remove smaller or equal elements from stack
            while (!st.isEmpty() && arr[st.peek()] <= arr[i]) {
                st.pop();
            }

            // If stack is empty, span = (i + 1)
            if (st.isEmpty()) {
                span.add(i + 1);
            } else {
                span.add(i - st.peek());
            }

            // Push current index to stack
            st.push(i);
        }
        return span;
    }
}


/*
Approach 1:
- The span of a stock price on a given day is the number of consecutive days before it 
  (including itself) where the price is less than or equal to the current price.
- Initialize an `ArrayList<Integer>` `span` with all values set to `1` initially.
- For each element `arr[i]`, iterate backward through the array (from `i-1` to `0`) and count 
  how many consecutive elements before `arr[i]` are smaller or equal.
- Store the count in `span[i]`.

Time Complexity:
- Outer loop runs `N` times.
- Inner loop runs at worst `N` times in case of increasing sequences.
- **Worst case: O(NÂ²)** (not efficient for large `N`).

Space Complexity:
- **O(N)** (for storing the span result).

*/
class Solution {
    public ArrayList<Integer> calculateSpan(int[] arr) {
        ArrayList<Integer> span = new ArrayList<>();
        
        // Initialize span list with 1 for each element
        for (int num : arr) {
            span.add(1);
        }
        
        // Brute-force approach
        for (int i = 0; i < arr.length; i++) {
            for (int j = i - 1; j >= 0 && arr[i] >= arr[j]; j--) {
                span.set(i, span.get(i) + 1);
            }
        }
        return span;
    }
}

https://www.geeksforgeeks.org/batch/gfg-160-problems/track/stack-gfg-160/problem/evaluation-of-postfix-expression1735
/*
Approach Explanation:
---------------------
Optimized Approach (Using Stack):
- We evaluate the postfix expression in a single pass by scanning the tokens.
- For each token:
  - If it's an operand, push it onto the stack.
  - If it's an operator, pop the top two operands from the stack, apply the operator, and push the result back.
- Finally, the result is the only element left in the stack.
- Time Complexity: O(n), where n is the number of tokens.
- Space Complexity: O(n) in the worst-case (all operands on stack).


  
Dry Run Example:
----------------
For the input: arr = {"2", "1", "+", "3", "*"}
Step-by-Step:
1. Push "2"  → Stack: [2]
2. Push "1"  → Stack: [2, 1]
3. Encounter "+": Pop 1 and 2, compute 2 + 1 = 3, push 3 → Stack: [3]
4. Push "3"  → Stack: [3, 3]
5. Encounter "*": Pop 3 and 3, compute 3 * 3 = 9, push 9 → Stack: [9]
Final output: 9

*/

import java.util.*;

class Solution {
    // Optimized Approach: Evaluate postfix expression using a stack.
    public int evaluate(String[] arr) {
        Stack<Integer> st = new Stack<>();
        
        // Loop through each token in the postfix expression.
        for (String s : arr) {
            // If the token is not an operator, it must be an operand.
            if (!s.equals("+") && !s.equals("-") && !s.equals("*") && !s.equals("/")) {
                st.push(Integer.valueOf(s)); // Push operand onto the stack.
            } else {
                // Ensure there are at least two operands available.
                if (!st.isEmpty()) {
                    int a = st.pop(); // Second operand (top of stack)
                    int b = st.pop(); // First operand (next element)
                    
                    // Apply the operator and push the result back onto the stack.
                    if (s.equals("+")) {
                        st.push(b + a);
                    } else if (s.equals("-")) {
                        st.push(b - a);
                    } else if (s.equals("*")) {
                        st.push(b * a);
                    } else { // Division case
                        st.push(b / a);
                    }
                }
            }
        }
        // The final result is the only element remaining in the stack.
        return st.pop();
    }
    
 

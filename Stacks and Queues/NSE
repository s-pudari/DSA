https://www.interviewbit.com/problems/nearest-smaller-element/
/*
✅ Approach:
1. We need to find the **previous smaller element** for each element in the array.
2. We use a **monotonic increasing stack**:
   - The stack maintains elements in increasing order.
3. **Iterate through the array:**
   - **Pop elements** from the stack **while they are greater than or equal to** the current element.
   - If the stack is **empty**, store `-1` (no smaller element exists).
   - Else, the **top of the stack** is the **previous smaller element**.
   - Push the current element onto the stack.

---

✅ **Time & Space Complexity:**
- **Time Complexity:** **O(N)**
  - Each element is **pushed and popped at most once**, so the loop runs in **O(N)**.
- **Space Complexity:** **O(N)** (for the stack in the worst case when elements are in increasing order).

---

✅ **Dry Run Example**
### Input:
A = [2, 1, 5, 6, 2, 3]

| Index  |  Element |Stack Before|         Action Taken                  | Stack After | Result |
|--------|----------|------------|---------------------------------------|-------------|----------|
| 0      | 2        | []         | No smaller element → add `-1`         | [2]         | -1       |
| 1      | 1        | [2]        | Pop 2 (greater than 1) → add `-1`     | [1]         | -1       |
| 2      | 5        | [1]        | 1 is smaller → add `1`                | [1, 5]      | 1        |
| 3      | 6        | [1, 5]     | 5 is smaller → add `5`                | [1, 5, 6]   | 5        |
| 4      | 2        | [1, 5, 6]  | Pop 6, pop 5 (both greater) → add `1` | [1, 2]      | 1        |
| 5      | 3        | [1, 2]     | 2 is smaller → add `2`                | [1, 2, 3]   | 2        |

### Output:
`[-1, -1, 1, 5, 1, 2]`

*/

import java.util.ArrayList;
import java.util.Stack;

public class Solution {
    public ArrayList<Integer> prevSmaller(ArrayList<Integer> A) {
        ArrayList<Integer> result = new ArrayList<>();
        Stack<Integer> st = new Stack<>();
        
        for (int num : A) {
            // Pop elements from the stack if they are greater than or equal to current element
            while (!st.isEmpty() && st.peek() >= num) {
                st.pop();
            }

            // If stack is empty, there is no smaller element
            if (st.isEmpty()) {
                result.add(-1);
            } else {
                result.add(st.peek()); // Top of stack is the previous smaller element
            }

            // Push the current element to stack
            st.push(num);
        }
        return result;
    }
}

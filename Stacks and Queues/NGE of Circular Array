https://www.geeksforgeeks.org/batch/gfg-160-problems/track/stack-bonus-problems/problem/next-greater-element
import java.util.ArrayList;
import java.util.Stack;

class Solution {
    public ArrayList<Integer> nextLargerElement(int[] arr) {
        // Optimized Approach Explanation:
        // This approach uses a stack to efficiently find the next larger element for each element in the circular array.
        // It iterates through the array twice (simulating circularity) from right to left, maintaining a stack of elements.
        // For each element, it pops elements from the stack that are smaller or equal to it.
        // If the stack is not empty, the top element is the next larger element.

        // Brute-force Approach Explanation:
        // This approach iterates through the array for each element and checks for the next larger element
        // in a circular manner. It has a time complexity of O(n^2), making it less efficient for larger arrays.

        // Optimized Approach:
        // Time Complexity: O(n)
        // Space Complexity: O(n)

        ArrayList<Integer> res = new ArrayList<>();
        int n = arr.length;

        // Initialize the result array with -1 for all elements.
        for (int i = 0; i < n; i++) {
            res.add(i, -1);
        }

        Stack<Integer> st = new Stack<>();

        // Iterate through the array twice in reverse order to simulate circularity.
        for (int i = 2 * n - 1; i >= 0; i--) {
            // Pop elements from the stack that are smaller or equal to the current element.
            while (!st.isEmpty() && st.peek() <= arr[i % n]) {
                st.pop();
            }

            // If the current element is within the original array bounds and the stack is not empty,
            // the top of the stack is the next larger element.
            if (i < n && !st.isEmpty()) {
                res.set(i, st.peek());
            }

            // Push the current element onto the stack.
            st.push(arr[i % n]);
        }

        return res;

        // Brute-force Approach (Commented Out):
        // Time Complexity: O(n^2)
        // Space Complexity: O(n)

        /*
        ArrayList<Integer> li = new ArrayList<>();

        // Initialize the result array with -1 for all elements.
        for (int i = 0; i < arr.length; i++) {
            li.add(i, -1);
        }

        // Iterate through the array for each element.
        for (int i = 0; i < arr.length; i++) {
            // Iterate through the array to find the next larger element in a circular manner.
            for (int j = 1; j < arr.length; j++) {
                // If a larger element is found, update the result and break the inner loop.
                if (arr[i] < arr[(i + j) % arr.length]) {
                    li.add(i, arr[(i + j) % arr.length]);
                    break;
                }
            }
        }

        return li;
        */
    }

    // Dry Run Example:
    // arr = [1, 2, 1]

    // Optimized Approach:
    // 1. Initialize res = [-1, -1, -1] and st = [].
    // 2. i = 5 (2 * 3 - 1), arr[5 % 3] = arr[2] = 1. st = [1].
    // 3. i = 4, arr[4 % 3] = arr[1] = 2. st = [1, 2].
    // 4. i = 3, arr[3 % 3] = arr[0] = 1. st = [1, 2, 1].
    // 5. i = 2, arr[2 % 3] = arr[2] = 1. st.peek() = 1, st = [1, 2]. res[2] = 2.
    // 6. i = 1, arr[1 % 3] = arr[1] = 2. st.peek() > 2 is false, st = [1,2]. res[1] = -1.
    // 7. i = 0, arr[0%3] = arr[0] = 1. st.peek() = 2, st = [1,2]. res[0] = 2.
    // 8. Result = [2, -1, 2].
}

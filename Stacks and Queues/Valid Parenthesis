https://leetcode.com/problems/valid-parentheses/description/
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();

       for(char ch : s.toCharArray()){
        if(ch=='(' || ch=='{' || ch=='['){
            stack.push(ch);
        }
        else{
            if(ch==')'){
                if(stack.isEmpty() || stack.pop() != '(' ){
                    return false;
                }
            }
            if(ch=='}'){
                if(stack.isEmpty() || stack.pop() != '{' ){
                    return false;
                }
            }
            if(ch==']'){
                if(stack.isEmpty() || stack.pop() != '[' ){
                    return false;
                }
            }
        }
     }




     return stack.isEmpty();

    }
}
https://leetcode.com/problems/maximum-nesting-depth-of-the-parentheses/description/
class Solution {
    public int maxDepth(String s) {
        
        int cnt=0;

        Stack<Character> st = new Stack<>();

        for(int i=0;i<s.length();i++){
            char ch=s.charAt(i);

            if(ch=='('){
                st.push(ch);
            }
            else if(ch==')'){
                st.pop();
            }

             cnt=Math.max(cnt,st.size());
        } 
        return cnt;
    }
}

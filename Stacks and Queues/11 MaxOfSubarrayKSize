/*
üîó Problem: Max of Subarrays of size K
   https://www.geeksforgeeks.org/problems/maximum-of-all-subarrays-of-size-k3101/1

üìù Problem Statement:
   Given an array of size n and an integer k,
   find the maximum element for each contiguous subarray of size k.
*/

/* 
------------------------------------------------
‚úÖ Approach 1: Brute Force
------------------------------------------------
- For every window of size k, traverse all k elements and find the maximum.
- Append the maximum to the result list.

Dry Run Example:
   arr = [1,3,-1,-3,5,3,6,7], k = 3
   Windows:
   [1,3,-1] ‚Üí max=3
   [3,-1,-3] ‚Üí max=3
   [-1,-3,5] ‚Üí max=5
   [-3,5,3] ‚Üí max=5
   [5,3,6] ‚Üí max=6
   [3,6,7] ‚Üí max=7
   Output: [3,3,5,5,6,7]

‚è±Ô∏è Time Complexity: O(n*k)
üì¶ Space Complexity: O(1) extra space
*/
class BruteForceSolution {
    public ArrayList<Integer> maxOfSubarrays(int arr[], int k) {
        ArrayList<Integer> ans = new ArrayList<>();
        
        // Traverse each window of size k
        for(int i=0; i<=arr.length-k; i++) {
            int max = arr[i];
            
            // Find max in this window
            for(int j=1; j<k; j++) {
                if(arr[i+j] > max) {
                    max = arr[i+j];
                }
            }
            
            ans.add(max);
        }
        return ans;
    }
}

/* 
------------------------------------------------
‚úÖ Approach 2: Optimized using Deque
------------------------------------------------
- Use a deque to store indices of useful elements in each window.
- Before adding a new element:
   1. Remove indices that are out of this window.
   2. Remove elements smaller than the current element (they won't be needed).
- The element at the front of the deque will always be the maximum for this window.

Dry Run Example:
   arr = [1,3,-1,-3,5,3,6,7], k = 3
   Window 1: deque=[3] ‚Üí max=3
   Window 2: deque=[3] ‚Üí max=3
   Window 3: deque=[5] ‚Üí max=5
   Window 4: deque=[5] ‚Üí max=5
   Window 5: deque=[6] ‚Üí max=6
   Window 6: deque=[7] ‚Üí max=7
   Output: [3,3,5,5,6,7]

‚è±Ô∏è Time Complexity: O(n)
üì¶ Space Complexity: O(k) for deque
*/
class OptimizedSolution {
    public ArrayList<Integer> maxOfSubarrays(int arr[], int k) {
        ArrayList<Integer> ans = new ArrayList<>();
        Deque<Integer> dq = new ArrayDeque<>(); // stores indices of useful elements

        for(int i=0; i<arr.length; i++) {
            // 1Ô∏è‚É£ Remove indices that are out of this window
            if(!dq.isEmpty() && dq.peek() == i-k) {
                dq.poll();
            }

            // 2Ô∏è‚É£ Remove all elements smaller than arr[i]
            while(!dq.isEmpty() && arr[dq.peekLast()] < arr[i]) {
                dq.pollLast();
            }

            // 3Ô∏è‚É£ Add current index
            dq.offer(i);

            // 4Ô∏è‚É£ If we have processed at least k elements, record the maximum
            if(i >= k-1) {
                ans.add(arr[dq.peek()]);
            }
        }
        return ans;
    }
}

https://leetcode.com/problems/rotate-image/
class Solution {
    /*
     * âœ… Approach:
     * We need to rotate an `N x N` matrix **90 degrees clockwise**.
     *
     * ðŸ”¹ **Optimized Approach (O(NÂ²) - In-Place Rotation)**
     *   1. **Transpose the matrix** (swap `matrix[i][j]` with `matrix[j][i]`).
     *   2. **Reverse each row** to achieve the 90-degree rotation.
     *   3. This is done **in-place**, using only constant extra space.
     *
     * ðŸ”¹ **Brute Force Approach (O(NÂ²) - Using Extra Matrix) - Commented Out**
     *   - Create a new `rotated[][]` matrix.
     *   - Map each element from `matrix[i][j]` to `rotated[j][n-i-1]`.
     *   - Copy `rotated[][]` back to `matrix[][]`.
     *   - This approach requires additional space **O(NÂ²)**.
     *
     * âœ… Time Complexity:
     * - **Optimized Approach:** O(NÂ²) (Two passes: Transposition + Reversal)
     * - **Brute Force Approach:** O(NÂ²) (Full matrix traversal)
     *
     * âœ… Space Complexity:
     * - **Optimized Approach:** O(1) (Modifies matrix in-place)
     * - **Brute Force Approach:** O(NÂ²) (Uses extra `rotated[][]` matrix)
     *
     * âœ… Dry Run Example (Optimized Approach):
     * Input:
     *  1  2  3
     *  4  5  6
     *  7  8  9
     *
     * Step 1 (Transpose):
     *  1  4  7
     *  2  5  8
     *  3  6  9
     *
     * Step 2 (Reverse Rows):
     *  7  4  1
     *  8  5  2
     *  9  6  3
     *
     * Output:
     *  7  4  1
     *  8  5  2
     *  9  6  3
     */

    public void rotate(int[][] matrix) {
        int n = matrix.length;

        // âœ… Step 1: Transpose the matrix (Swap `matrix[i][j]` with `matrix[j][i]`)
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                swap(matrix, i, j);
            }
        }

        // âœ… Step 2: Reverse each row
        for (int i = 0; i < n; i++) {
            reverse(matrix, i, 0, n - 1);
        }
    }

    // Swap elements at (i, j) and (j, i) for transposition
    private void swap(int[][] matrix, int i, int j) {
        int temp = matrix[i][j];
        matrix[i][j] = matrix[j][i];
        matrix[j][i] = temp;
    }

    // Reverse elements in a specific row from `start` to `end`
    private void reverse(int[][] matrix, int row, int start, int end) {
        while (start < end) {
            int temp = matrix[row][start];
            matrix[row][start] = matrix[row][end];
            matrix[row][end] = temp;
            start++;
            end--;
        }
    }

    /*
     * ðŸ”´ Brute Force Approach (O(NÂ²) - Commented Out)
     * - Use an extra matrix `rotated[][]` to store the rotated elements.
     * - Map `matrix[i][j]` to `rotated[j][n-i-1]`.
     * - Copy `rotated[][]` back into `matrix[][]`.
     */

    /*
    public void rotate(int[][] matrix) {
        int n = matrix.length;
        int[][] rotated = new int[n][n];

        // Store rotated elements in a new matrix
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rotated[j][n - i - 1] = matrix[i][j];
            }
        }

        // Copy back to original matrix
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = rotated[i][j];
            }
        }
    }
    */
}

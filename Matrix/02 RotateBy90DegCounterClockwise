// https://www.geeksforgeeks.org/problems/rotate-by-90-degree-1587115621
/*
ðŸ”¥ PROBLEM: Rotate Matrix by 90 Degrees (Anti-Clockwise) ðŸ”¥
----------------------------------------------------------
Given an `n x n` matrix, rotate it 90 degrees in the **anti-clockwise** direction **in-place**.

ðŸ“Œ Example:
Input:
mat = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
]

Output (90Â° Anti-Clockwise):
mat = [
  [3, 6, 9],
  [2, 5, 8],
  [1, 4, 7]
]

----------------------------------------------------------
*/


// âœ… APPROACH 1 (Brute Force Using Extra Matrix)
/*
ðŸ’¡ Idea:
- Create a new matrix of same size.
- Place each element from old matrix into its rotated anti-clockwise position.
- Copy back rotated into original matrix.

ðŸ•’ Time Complexity: O(n^2)
ðŸ§  Space Complexity: O(n^2)

ðŸ“Œ Dry Run:
mat = [
 [1, 2, 3],
 [4, 5, 6],
 [7, 8, 9]
]

rotated[n-j-1][i] = mat[i][j]

â†’ rotated[2][0] = 1
â†’ rotated[1][0] = 2
â†’ rotated[0][0] = 3
â†’ ...
Final Rotated = [
 [3, 6, 9],
 [2, 5, 8],
 [1, 4, 7]
]
*/
class SolutionBrute {
    public void rotateMatrix(int[][] mat) {
        int n = mat.length;
        int[][] rotated = new int[n][n];

        // Step 1: Fill rotated anti-clockwise
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                rotated[n - j - 1][i] = mat[i][j];
            }
        }

        // Step 2: Copy back into mat
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                mat[i][j] = rotated[i][j];
            }
        }
    }
}



// âœ… APPROACH 2 (Optimized In-place: Reverse Rows + Transpose)
/*
ðŸ’¡ Idea (Anti-Clockwise):
- Step 1: Reverse each row (horizontal reverse).
- Step 2: Take transpose of the matrix.

ðŸ•’ Time Complexity: O(n^2)
ðŸ§  Space Complexity: O(1)

ðŸ“Œ Dry Run:
mat = [
 [1, 2, 3],
 [4, 5, 6],
 [7, 8, 9]
]

Step 1 â†’ Reverse rows:
[
 [3, 2, 1],
 [6, 5, 4],
 [9, 8, 7]
]

Step 2 â†’ Transpose:
[
 [3, 6, 9],
 [2, 5, 8],
 [1, 4, 7]
]
âœ… Correct Anti-Clockwise rotation
*/
class SolutionOptimized {
    public void rotateMatrix(int[][] mat) {
        int n = mat.length;

        // Step 1: Reverse each row
        for (int i = 0; i < n; i++) {
            int s = 0, e = n - 1;
            while (s < e) {
                int temp = mat[i][s];
                mat[i][s] = mat[i][e];
                mat[i][e] = temp;
                s++;
                e--;
            }
        }

        // Step 2: Transpose
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int temp = mat[i][j];
                mat[i][j] = mat[j][i];
                mat[j][i] = temp;
            }
        }
    }
}


/*
----------------------------------------------------------
ðŸ“Œ DRIVER CODE (For Testing)
----------------------------------------------------------
public class Main {
    public static void main(String[] args) {
        SolutionOptimized sol = new SolutionOptimized();

        int[][] mat = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        sol.rotateMatrix(mat);

        for (int[] row : mat) {
            for (int val : row) {
                System.out.print(val + " ");
            }
            System.out.println();
        }
    }
}
*/

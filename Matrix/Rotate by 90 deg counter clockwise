https://www.geeksforgeeks.org/batch/gfg-160-problems/track/matrix-gfg-160/problem/rotate-by-90-degree-1587115621
//Approach 3 reverse and transpose   T.C --> O(n^2) S.C -->O(1)
class Solution {
    // Function to rotate the matrix anticlockwise by 90 degrees.
    static void rotateby90(int mat[][]) {
        int n = mat.length; // Size of the square matrix

        // Step 1: Reverse each row
        // This effectively performs a horizontal flip of the matrix.
        for (int i = 0; i < n; i++) {
            int start = 0, end = n - 1;
            while (start < end) {
                // Swap elements at start and end of the row
                int temp = mat[i][start];
                mat[i][start] = mat[i][end];
                mat[i][end] = temp;

                // Move start forward and end backward
                start++;
                end--;
            }
        }

        // Step 2: Transpose the matrix
        // This interchanges rows and columns of the matrix.
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) { // Note: Start `j` from `i+1` to avoid redundant swaps
                // Swap elements across the diagonal
                int temp = mat[i][j];
                mat[i][j] = mat[j][i];
                mat[j][i] = temp;
            }
        }
    }
}

//Approach 2 T.C --> O(n^2) & S.C --> O(1)
class Solution {
    // Function to rotate the matrix anticlockwise by 90 degrees.
    static void rotateby90(int mat[][]) {
        int n = mat.length; // Size of the square matrix
        
        // Loop through each layer of the matrix
        for (int i = 0; i < n / 2; i++) {
            // Traverse elements in the current layer
            for (int j = i; j < n - i - 1; j++) {
                // Save the current element in a temporary variable
                int temp = mat[i][j];
                
                // Move elements from the right to the top
                mat[i][j] = mat[j][n - 1 - i];
                
                // Move elements from the bottom to the right
                mat[j][n - 1 - i] = mat[n - 1 - i][n - 1 - j];
                
                // Move elements from the left to the bottom
                mat[n - 1 - i][n - 1 - j] = mat[n - 1 - j][i];
                
                // Assign the temporary value to the left
                mat[n - 1 - j][i] = temp;
            }
        }
    }
}

//Approach 1 T.C--> O(n*n) & S.C--> O(n)
class Solution {
    // Function to rotate matrix anticlockwise by 90 degrees.
    static void rotateby90(int mat[][]) {
        // code here
        int n=mat.length;
       
        
        int[][] res= new int[n][n];
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                res[n-j-1][i]=mat[i][j];
            }
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
            mat[i][j]=res[i][j];
            }
        }
    }
}

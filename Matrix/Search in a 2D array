https://leetcode.com/problems/search-a-2d-matrix
//Approach 2 --> T.C --> O(n+m) & S.C --> O(1)
class Solution {
    public static boolean matSearch(int mat[][], int target) {
        // your code here
        
        
        int n=mat.length;
        int m=mat[0].length;
        
        if(n==0 || m==0) return false;
        
       int i=0;
       int j=m-1;
       
       while(i<n && j>=0){
           if(mat[i][j]> target){
               j--;
           }
           else if(mat[i][j]<target){
               i++;
           }
           else{
               return true;
           }
       }
        return false;
    }
}
//Approach 1 - T.C --> O(n * m) & S.C --> O(1)
class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        boolean ans=false;
        int n =matrix.length;
        int m=matrix[0].length;
        if(n==0 || m==0){
            return ans;
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
               if(matrix[i][j]>=target){ // the array is sorted so we need not check entire array
                    if(matrix[i][j]==target){
                    ans=true;
                    }
                }
            }
        }
        return ans;
    }
}

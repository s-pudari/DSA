https://leetcode.com/problems/rotate-list/description/
//T.C --> O(n) S.C --> O(1)
1.Calculate the length
2.Assign last node's next to head
3.Find k=k%n to know the exact rotations , now subtract it from length (k=leng-k)
4.Now assign kth node's next as head and break circle by assigning kth node's next to null
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head==null || head.next==null || k==0) return head;
        ListNode temp=head;
        int len=1;
        while(temp.next!=null){
            len++;
            temp=temp.next;

        }
        temp.next=head;

        k=len-k%len;
        while(k-- > 0) temp=temp.next;

        head=temp.next;
        temp.next=null;
        

     return head;
    }
}
//Another approach 
class Solution {
    public Node rotate(Node head, int k) {
        // add code here
        if(head==null || head.next==null || k==0) return head;
        
        
        for(int i=0;i<k;i++){
            Node curr =head;
            while(curr.next.next!=null) curr=curr.next;
            
            Node tail=curr.next;
            curr.next=null;
            tail.next=head;
            head=tail;
            
        }
        return head;
        
    }
}

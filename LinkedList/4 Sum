https://leetcode.com/problems/4sum/

T.C --> O(n^3) and S.C --> O(k)
class Solution {
    public List<List<Integer>> fourSum(int[] nums, int target) {
        int n = nums.length;

        // Use a HashSet to store unique quadruplets, avoiding duplicates
        Set<List<Integer>> resultSet = new HashSet<>();

        // Sort the array to simplify duplicate handling and enable two-pointer technique
        Arrays.sort(nums);

        // Outer loop for the first element of the quadruplet
        for (int i = 0; i < n - 3; i++) {
            // Second loop for the second element of the quadruplet
            for (int j = i + 1; j < n - 2; j++) {

                // Two-pointer approach to find the remaining two elements
                int left = j + 1;      // Left pointer starts right after the second element
                int right = n - 1;     // Right pointer starts at the end of the array

                while (left < right) {
                    // Calculate the sum of the four elements
                    long sum = (long) nums[i] + nums[j] + nums[left] + nums[right];

                    // If the sum matches the target
                    if (sum == target) {
                        // Create a list for the quadruplet and add it to the result set
                        List<Integer> temp = Arrays.asList(nums[i], nums[j], nums[left], nums[right]);
                        resultSet.add(temp);

                        // Move both pointers to look for other valid combinations
                        left++;
                        right--;
                    } 
                    // If the sum is less than the target, move the left pointer to increase the sum
                    else if (sum < target) {
                        left++;
                    } 
                    // If the sum is greater than the target, move the right pointer to decrease the sum
                    else {
                        right--;
                    }
                }
            }
        }

        // Convert the result set to a list and return it
        return new ArrayList<>(resultSet);
    }

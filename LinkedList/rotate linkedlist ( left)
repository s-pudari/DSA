https://www.geeksforgeeks.org/batch/gfg-160-problems/track/linked-list-gfg-160/problem/rotate-a-linked-list
//Approach 2 T.C --> O(n) S.C --> O(1)
class Solution {
    public Node rotate(Node head, int k) {
        // Edge cases
        if (head == null || head.next == null || k == 0) return head;
        
        // Find the length of the linked list
        Node curr = head;
        int length = 1;
        while (curr.next != null) {
            length++;
            curr = curr.next;
        }
        
        // Update k to avoid unnecessary rotations
        k = k % length;
        if (k == 0) return head;  // No rotation needed

        // Make the list circular
        curr.next = head;
        
        // Find the new tail (length - k - 1)th node
        for (int i = 0; i < k; i++) {
            curr = curr.next;
        }

        // The new head is the next node
        head = curr.next;
        curr.next = null; // Break the circular link

        return head;
    }
}
//Approach 1 T.C -->  O(n * k) S.C -->O(1)
class Solution {
    public Node leftrotate(Node head, int k) {
        // Edge cases: If list is empty or has only one node, or k is 0
        if (head == null || head.next == null || k == 0) return head;

        // Find the length of the linked list
        Node temp = head;
        int length = 1;
        while (temp.next != null) {
            length++;
            temp = temp.next;
        }

        // Optimize k (if k is greater than length, take mod)
        k = k % length;
        if (k == 0) return head; // No rotation needed

        // Brute force approach: Move the head node to the tail k times
        for (int i = 0; i < k; i++) {
            Node newHead = head.next; // Move head to the next node
            temp.next = head; // Attach old head to the end
            head.next = null; // Break the link
            head = newHead; // Update head
            temp = temp.next; // Move temp to the new tail
        }

        return head; // Return updated head
    }
}


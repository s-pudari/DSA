https://www.geeksforgeeks.org/batch/gfg-160-problems/track/linked-list-gfg-160/problem/remove-loop-in-linked-list
T.C --> O(n) & S.C-->O(1)
class Solution {
    // Function to remove a loop in the linked list using Floyd's Cycle Detection Algorithm
    public static void removeLoop(Node head) {
        // Edge case: Empty list or single node cannot have a loop
        if (head == null || head.next == null) {
            return;
        }

        Node slow = head;  // Tortoise pointer (moves 1 node/step)
        Node fast = head;  // Hare pointer (moves 2 nodes/step)
        boolean hasCycle = false;

        // ========== Phase 1: Cycle Detection ==========
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;

            // Cycle detected when pointers meet
            if (slow == fast) {
                hasCycle = true;
                break;
            }
        }

        // No cycle found - exit early
        if (!hasCycle) {
            return;
        }

        // ========== Phase 2: Find Cycle Start Node ==========
        // Reset slow to head, keep fast at meeting point
        slow = head;
        while (slow != fast) {
            // Move both pointers at same speed (1 node/step)
            slow = slow.next;
            fast = fast.next;
        }
        // Now slow and fast both point to cycle start node

        // ========== Phase 3: Break the Cycle ==========
        Node cycleStart = slow;  // Could also use fast
        Node lastNode = cycleStart;
        
        // Find last node in the cycle (node before cycle start)
        while (lastNode.next != cycleStart) {
            lastNode = lastNode.next;
        }
        
        // Break the cycle by setting last node's next to null
        lastNode.next = null;
    }
}

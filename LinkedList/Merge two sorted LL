//Approach 2 T.C --> O(n1+n2) S.C --> O(1)
1.create dummy node 
2.compare two nodes add to dummy's(temp) next
class Solution {
    Node sortedMerge(Node head1, Node head2) {
        // code here
        
        Node dummy=new Node(-1);
        
        Node temp=dummy;
         
        Node temp1=head1;
        Node temp2=head2;
        
        while(temp1!=null && temp2!=null){
            if(temp1.data<temp2.data){
                temp.next=temp1;
                temp=temp1;
                temp1=temp1.next;
            }
            else{
                temp.next=temp2;
                temp=temp2;
                temp2=temp2.next;
            }
        }
        
        if(temp1!=null){
            temp.next=temp1;
        }
        else{
            temp.next=temp2;
        }
        
        return dummy.next;
    }
}
//Approach 1 T.C 
O(N + M) for traversal (to extract elements)
O((N + M) log(N + M)) for sorting
O(N + M) for reconstructing the linked list
Overall: O((N + M) log(N + M))

1.add all values to list
2.sort the list
3.convert list to linkedlist

class Solution {
    Node sortedMerge(Node head1, Node head2) {
        // code here
        
        List<Integer> list  = new ArrayList<>();
        
        Node temp1=head1;
        while(temp1!=null){
            list.add(temp1.data);
            temp1=temp1.next;
        }
        
        Node temp2=head2;
      while(temp2!=null){
          list.add(temp2.data);
          temp2=temp2.next;
         
         
      }
      
      Collections.sort(list);
      LinkedList<Integer> li = new LinkedList<>(list);
      
      Node dummy = new Node(-1);
      Node curr = dummy;
      
      for(int val : list){
          curr.next = new Node(val);
          curr=curr.next;
      }
        return dummy.next;
    }
}

https://www.geeksforgeeks.org/batch/gfg-160-problems/track/heap-bonus-problems/problem/top-k-frequent-elements-in-array
import java.util.*;

class Solution {
    /*
     * Approach:
     * 1. **Count Frequency**: Use a HashMap to store the frequency of each element in the array.
     * 2. **Bucket Sort**: Create an array of lists (buckets), where the index represents frequency.
     * 3. **Sort Buckets**: Sort each bucket in descending order (higher values first).
     * 4. **Pick Top K**: Traverse the buckets from highest to lowest frequency and collect the top K elements.
     *
     * Time Complexity:
     * - Counting frequency: **O(N)**
     * - Bucket insertion: **O(N)**
     * - Sorting each bucket: **O(N log N) in the worst case** (if all elements have different frequencies)
     * - Collecting top K elements: **O(N)**
     * - **Overall Complexity**: **O(N log N)** in the worst case, but **O(N)** in general.
     *
     * Space Complexity:
     * - HashMap storage: **O(N)**
     * - Bucket storage: **O(N)**
     * - Result list: **O(K)**
     * - **Overall Space Complexity**: **O(N)**
     *
     * Dry Run Example:
     * Input:  arr = [1,1,2,2,3,3,3,4], k = 2
     * Step 1: Frequency Map → {1:2, 2:2, 3:3, 4:1}
     * Step 2: Bucket Sort Representation:
     *     bucket[1] → [4]
     *     bucket[2] → [1, 2]
     *     bucket[3] → [3]
     * Step 3: Sort Buckets: No change needed
     * Step 4: Traverse from high freq to low: Pick **3, 2**
     * Output: **[3, 2]**
     */

    public ArrayList<Integer> topKFrequent(int[] arr, int k) {
        ArrayList<Integer> res = new ArrayList<>();
        List<Integer>[] bucket = new List[arr.length + 1]; // Buckets for storing numbers by frequency
        HashMap<Integer, Integer> hm = new HashMap<>(); // Frequency map

        // Step 1: Count frequency of each number
        for (int num : arr) {
            hm.put(num, hm.getOrDefault(num, 0) + 1);
        }

        // Step 2: Place elements in frequency buckets
        for (int key : hm.keySet()) {
            int freq = hm.get(key);
            if (bucket[freq] == null) {
                bucket[freq] = new ArrayList<>();
            }
            bucket[freq].add(key);
        }

        // Step 3: Sort each bucket in descending order (if needed)
        for (int i = 0; i < bucket.length; i++) {
            if (bucket[i] != null) {
                Collections.sort(bucket[i], Collections.reverseOrder());
            }
        }

        // Step 4: Collect the top K elements from highest frequency to lowest
        for (int pos = bucket.length - 1; pos > 0 && res.size() < k; pos--) {
            if (bucket[pos] != null) {
                for (int num : bucket[pos]) {
                    res.add(num);
                    if (res.size() == k) return res; // Stop when we have K elements
                }
            }
        }
        return res;
    }
}

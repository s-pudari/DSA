https://leetcode.com/problems/two-sum/
//Approach 2 using HashMap T.C & S.C --> O(n)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        
        HashMap<Integer,Integer> hm= new HashMap<>();
        for(int i=0;i<nums.length;i++){
            int a=nums[i];
            int moreNeeded=target-a;

            if(hm.containsKey(moreNeeded)){
                return new int[] {hm.get(moreNeeded),i};
            }

            hm.put(nums[i],i);
        }
        return null;
    }
}
//Approach 1 using Brute Force T.C --> O(n^2) S.C --> O(1)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int c=0;c<nums.length-1;c++){
        for(int i=c+1;i<nums.length;i++){
            if(nums[c]+nums[i]==target){
                return new int[] { c, i };
            }
        }
      return null;
        }
    }
}

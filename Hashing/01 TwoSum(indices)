/*https://leetcode.com/problems/two-sum/
🎯 Problem: Two Sum (LeetCode 1)
-----------------------------------------------------
📝 Description:
Given an array of integers `nums` and an integer `target`, return the **indices of two numbers** such that they add up to `target`.

You may assume that each input would have **exactly one solution**, and you may not use the **same element twice**.

Return the result as an array of indices [i, j].

Example:
---------
Input: nums = [2, 7, 11, 15], target = 9
Output: [0, 1]  // Because nums[0] + nums[1] == 9

=====================================================
✅ Approach 2: HashMap (Optimized)
=====================================================
🧠 Idea:
- While iterating over the array, for each number:
   → Compute the "moreNeeded" = target - current_number.
   → If that number already exists in the map, return its index and current index.

🔍 Dry Run:
Input: nums = [2, 7, 11, 15], target = 9
HashMap: {}  
i = 0 → a = 2 → moreNeeded = 7 ❌ not in map → store (2, 0)  
i = 1 → a = 7 → moreNeeded = 2 ✅ found in map → return [0, 1]

🕒 Time Complexity: O(n)  
🧠 Space Complexity: O(n)
*/

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> hm = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            int a = nums[i];                   // Current number
            int moreNeeded = target - a;       // What we need to reach the target

            // If the needed number already exists, return indices
            if (hm.containsKey(moreNeeded)) {
                return new int[] { hm.get(moreNeeded), i };
            }

            // Otherwise, store the current number and its index
            hm.put(nums[i], i);
        }

        return null; // Should not happen as per problem constraints
    }

    /*
    =====================================================
    🐌 Approach 1: Brute Force (Nested loops)
    =====================================================
    🧠 Idea:
    - Try every possible pair (i, j) and check if their sum equals target.

    🔍 Dry Run:
    nums = [2, 7, 11], target = 9
    i = 0, j = 1 → 2 + 7 = 9 ✅ → return [0, 1]

    🕒 Time Complexity: O(n²)
    🧠 Space Complexity: O(1)

    Code:
    ---------*/
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length - 1; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] + nums[j] == target) {
                    return new int[] { i, j };
                }
            }
        }
        return null;
    }
    

    /*
    =====================================================
    ⚠️ Two Pointer Approach (ONLY if array is sorted and indices not needed)
    =====================================================
    🧠 Idea:
    - Sort the array (lose index tracking, so we can’t use it directly here).
    - Use two pointers to check if a pair adds to the target.

    ⚠️ Important:
    Since this problem asks for **indices**, two pointer is not applicable unless you:
    1. Create a copy of the array with value + original index,
    2. Sort it, and
    3. Return stored original indices.

    🕒 Time Complexity: O(n log n) (due to sorting)
    🧠 Space Complexity: O(n) (to store index-value pairs)

    Code:
    ---------*/
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        int[][] arr = new int[n][2];

        for (int i = 0; i < n; i++) {
            arr[i][0] = nums[i];  // value
            arr[i][1] = i;        // original index
        }

        Arrays.sort(arr, (a, b) -> a[0] - b[0]);

        int l = 0, r = n - 1;
        while (l < r) {
            int sum = arr[l][0] + arr[r][0];

            if (sum == target) return new int[] { arr[l][1], arr[r][1] };
            else if (sum < target) l++;
            else r--;
        }

        return null;
    }
    
}

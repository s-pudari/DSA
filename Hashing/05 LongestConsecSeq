/*https://www.geeksforgeeks.org/batch/gfg-160-problems/track/hashing-gfg-160/problem/longest-consecutive-subsequence2449
🔍 Problem: Longest Consecutive Subsequence

You're given an array of integers. Your task is to find the **length of the longest subsequence** of **consecutive elements** (not necessarily contiguous).

📌 Example:
Input: arr = [100, 4, 200, 1, 3, 2]  
Output: 4  
Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Length = 4

--------------------------------------------------------------------------------
🧠 Approach 1: Brute-force (Sorting)

🔸 Idea:
- Sort the array.
- Traverse it and count consecutive increasing numbers.
- Skip duplicates using a check (if arr[i] == arr[i-1]).

📈 Time Complexity: O(n log n) due to sorting  
📦 Space Complexity: O(1) if sorting in-place, else O(n)

🔍 Dry Run:
arr = [100, 4, 200, 1, 3, 2]  
→ After sorting: [1, 2, 3, 4, 100, 200]  
→ Consecutive count = 4 → Output = 4

 ------------------ Brute-Force Approach (Commented) ------------------*/

class Solution {
    public int longestConsecutive(int[] arr) {
        if (arr.length == 0) return 0; // edge case

        int maxlen = 0; // to track the maximum length
        int cnt = 1;    // to count current streak

        Arrays.sort(arr); // sort the array to bring consecutive numbers together

        for (int i = 1; i < arr.length; i++) {

            // Skip duplicates to avoid false streaks
            if (arr[i] == arr[i - 1]) continue;

            // Check if current is consecutive to previous
            if (arr[i] == arr[i - 1] + 1) {
                cnt++; // increment streak
            } else {
                // update max length and reset count
                maxlen = Math.max(maxlen, cnt);
                cnt = 1;
            }
        }

        // Final check in case the longest streak ends at the last element
        maxlen = Math.max(maxlen, cnt);
        return maxlen;
    }
}



/*--------------------------------------------------------------------------------
✅ Approach 2: Optimized using HashSet

🔸 Idea:
- Store all elements in a HashSet for O(1) lookups.
- Iterate through each number.
  - If it's the **start of a sequence** (i.e., num - 1 is not in set), begin counting.
  - Keep incrementing to find the full consecutive sequence.

📈 Time Complexity: O(n)  
📦 Space Complexity: O(n)

🔍 Dry Run:
arr = [100, 4, 200, 1, 3, 2]  
Set = {100, 4, 200, 1, 3, 2}  
Start from 1 → find 2, 3, 4 → length = 4  
Start from 100 → length = 1  
Start from 200 → length = 1  
→ Max length = 4
*/

import java.util.*;

class Solution {

    // Function to return length of longest subsequence of consecutive integers.
    public int longestConsecutive(int[] arr) {
        if (arr.length == 0) return 0; // edge case

        int maxlen = 0; // to keep track of the maximum length found

        HashSet<Integer> hs = new HashSet<>();

        // Add all elements to a HashSet to remove duplicates and allow O(1) lookup
        for (int i : arr) {
            hs.add(i);
        }

        // Traverse each number in the original array
        for (int num : arr) {

            /* Check if this number is the potential start of a sequence.
               If (num - 1) exists, that means the current num is NOT the start.
               So we skip it to avoid redundant processing. */
            if (!hs.contains(num - 1)) {
                int next = num;

                // Count the length of consecutive sequence starting from 'num'
                while (hs.contains(next)) {
                    next++;
                }

                /* Update the max length found so far */
                maxlen = Math.max(maxlen, next - num);
            }
        }

        return maxlen; // return the length of the longest consecutive subsequence
    }
}

https://www.geeksforgeeks.org/batch/gfg-160-problems/track/hashing-gfg-160/video/MjkxMzg%3D
//Approach 2 using hashing T.C & S.C --> O(n*2)
class Solution {
    public List<List<Integer>> findTriplets(int[] arr) {
        // Your code here
        int n=arr.length;
        //Arrays.sort(arr);
        List<List<Integer>> li = new ArrayList<>();
        Set<List<Integer>> uniquelist = new HashSet<>();
        if(arr==null || n <3) return li;
        for(int i=0;i<n;i++){
            HashMap<Integer,Integer> hm=new HashMap<>();
            for(int j=i+1;j<n;j++){
                int sum=-(arr[i]+arr[j]);
                
                if(hm.containsKey(sum)){
                    int temp=hm.get(sum);
                    List<Integer> li1=Arrays.asList(i,j,temp);
                    li1.sort(null);
                    uniquelist.add(li1);
                    
                }
                hm.put(arr[j],j);
                
            }
        }
        
        li.addAll(uniquelist);
        return li;
    }
}
//Approach 1 using Brute Force T.C --> O(n*3) S.C --> O(1)
class Solution {
    public List<List<Integer>> triplets(int[] arr){
        int n=arr.length;
        List<List<Integer>> li = new ArrayList<>();
        
        for(int i=0;i<n-2;i++){
            for(int j=i+1;j<n-1;j++){
                for(int k=j+1;j<n;j++){
                    if(arr[i]+arr[j]+arr[k]==0){
                        li.add(Arrays.asList(i,j,k));
                    }
                }
            }
        }
        return li;
    }
    
}

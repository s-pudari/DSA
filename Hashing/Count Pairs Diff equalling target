https://www.geeksforgeeks.org/batch/gfg-160-problems/track/hashing-bonus-problem/problem/pairs-with-difference-k1713
/*
    ✅ Approach:
    1. We use a **HashMap (hm)** to store the frequency of elements encountered so far.
    2. For each element `arr[i]`, we check:
        - If `(arr[i] + k)` exists in `hm`, it means we can form a pair `(arr[i], arr[i] + k)`.
        - If `(arr[i] - k)` exists in `hm`, it means we can form a pair `(arr[i], arr[i] - k)`.
    3. If such numbers exist, we add their frequency to `count`.
    4. Finally, we update `hm` to include the current `arr[i]`.
  
    ✅ Why this approach?
    - This avoids **nested loops**, reducing the time complexity from **O(n²) to O(n)**.
    - **HashMap** provides **O(1)** lookup and update operations.

    ✅ Time Complexity:
    - `O(n)`: We traverse the array once, performing O(1) operations for each element.

    ✅ Space Complexity:
    - `O(n)`: We use a **HashMap** that stores at most `n` elements.

    ✅ Dry Run:
    Input: arr = [1, 5, 3, 4, 2], k = 2

    | Iteration | arr[i] | arr[i]+k | Exists? | arr[i]-k | Exists? | count | HashMap (After update) |
    |-----------|--------|---------|---------|---------|---------|--------|----------------------|
    | 1st       | 1      | 3       | ❌ No   | -1      | ❌ No   | 0      | `{1:1}` |
    | 2nd       | 5      | 7       | ❌ No   | 3       | ❌ No   | 0      | `{1:1, 5:1}` |
    | 3rd       | 3      | 5       | ✅ Yes  | 1       | ✅ Yes  | 2      | `{1:1, 5:1, 3:1}` |
    | 4th       | 4      | 6       | ❌ No   | 2       | ❌ No   | 2      | `{1:1, 5:1, 3:1, 4:1}` |
    | 5th       | 2      | 4       | ✅ Yes  | 0       | ❌ No   | 3      | `{1:1, 5:1, 3:1, 4:1, 2:1}` |

    ✅ Final count = 3 (Pairs found: (1,3), (3,5), (2,4)) ✅
*/

import java.util.HashMap;

class Solution {
    int countPairs(int[] arr, int k) {
        int count = 0;
        HashMap<Integer, Integer> hm = new HashMap<>();

        for (int i = 0; i < arr.length; i++) {
            // Check if (arr[i] + k) exists in the map
            if (hm.containsKey(arr[i] + k)) {
                count += hm.get(arr[i] + k);
            }

            // Check if (arr[i] - k) exists in the map
            if (hm.containsKey(arr[i] - k)) {
                count += hm.get(arr[i] - k);
            }

            // Store/update the frequency of arr[i] in the map
            hm.put(arr[i], hm.getOrDefault(arr[i], 0) + 1);
        }
        return count;
    }
}

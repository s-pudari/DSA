https://leetcode.com/problems/3sum/description/
//Approach 3 T.C --> O(n^2) S.C-->O(no.of triplets)
class Solution {
    public List<List<Integer>> threeSum(int[] arr) {
        int n=arr.length;
       Arrays.sort(arr);
     List<List<Integer>> li = new ArrayList<>();

     for(int i=0;i<n;i++){
        if(i>0 && arr[i]==arr[i-1])continue;
        int j=i+1;
        int k=n-1;

        while(j<k){
            int sum=arr[i]+arr[j]+arr[k];

            if(sum<0){
                j++;
            }

            else if(sum>0){
                k--; 
            }
            else{
               List<Integer> temp= Arrays.asList(arr[i],arr[j],arr[k]);
               li.add(temp);
               j++;
               k--;

               while(j<k && arr[j]==arr[j-1]) j++;
               while(j<k && arr[k]==arr[k+1]) k--;
            }
        }
     }

       return li; 
    }
}
//Approach 2 T.C --> O(n^2) S.C --> O(n)
public static List<List<Integer>> triplet(int n, int[] arr) {
        Set<List<Integer>> st = new HashSet<>();

        for (int i = 0; i < n; i++) {
            Set<Integer> hashset = new HashSet<>();
            for (int j = i + 1; j < n; j++) {
                //Calculate the 3rd element:
                int third = -(arr[i] + arr[j]);

                //Find the element in the set:
                if (hashset.contains(third)) {
                    List<Integer> temp = Arrays.asList(arr[i], arr[j], third);
                    temp.sort(null);
                    st.add(temp);
                }
                hashset.add(arr[j]);
            }
        }

        // store the set elements in the answer:
        List<List<Integer>> ans = new ArrayList<>(st);
        return ans;
    }

//Approach 1 T.C-->O(n^3 * log) S.C --> 2*O(no of triplets)
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        int n=nums.length;

        HashSet<List<Integer>> hs = new HashSet<>();

        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                for(int k=j+1;k<n;k++){
                    if(nums[i]+nums[j]+nums[k]==0){
                        List<Integer> li=Arrays.asList(nums[i],nums[j],nums[k]);

                        Collections.sort(li);
                        hs.add(li);
                        
                    }
                }
            }
        }
        List<List<Integer>> li1= new ArrayList<>(hs);
        
        return li1;
    }
}

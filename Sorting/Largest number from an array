https://www.geeksforgeeks.org/batch/gfg-160-problems/track/sorting-bonus-problems/problem/largest-number-formed-from-an-array1117
import java.util.*;

class Solution {

    /*
    🔎 Approach 2: Custom Sorting (Optimized)
    --------------------------------------------
    - Convert all integers to strings for easier concatenation and comparison.
    - Use a custom comparator to sort based on which combination (s1+s2) or (s2+s1) forms a larger number.
    - Append the sorted numbers to form the largest possible number.
    - If the largest number is "0", return "0" to avoid cases like [0,0].
    
    🔹 Time Complexity: O(N log N) -> Sorting the numbers.
    🔹 Space Complexity: O(N) -> For storing the numbers as strings.

    🔎 Dry Run Example:
      Input: [3, 30, 34, 5, 9]
      - Convert to Strings: ["3", "30", "34", "5", "9"]
      - Sorted using custom comparator: ["9", "5", "34", "3", "30"]
      - Result: "9534330"
    for more explaination scroll to last
    */

    String findLargest(int[] arr) {
        ArrayList<String> numbers = new ArrayList<>();

        // Convert numbers to strings
        for (int num : arr) {
            numbers.add(Integer.toString(num));
        }

        // Sort using custom comparator 
        Collections.sort(numbers, (s1, s2) -> myCompare(s1, s2) ? -1 : 1);

        // If the largest number is "0", return "0"
        if (numbers.get(0).equals("0")) {
            return "0";
        }

        // Append all sorted numbers to form the largest number
        StringBuilder sb = new StringBuilder();
        for (String s : numbers) {
            sb.append(s);
        }

        return sb.toString();
    }

    // Custom comparator to compare two concatenations
    boolean myCompare(String s1, String s2) {
        return (s1 + s2).compareTo(s2 + s1) > 0;
    }

    /*
    🔎 Approach 1: Brute Force
    --------------------------------------------
    - Generate all possible permutations of the given numbers.
    - Form a number from each permutation and keep track of the maximum number formed.
    - Return the largest number formed.

    🔹 Time Complexity: O(N!) -> Due to generating all permutations.
    🔹 Space Complexity: O(N) -> For storing the permutations.

    🔎 Dry Run Example:
      Input: [3, 30, 34]
      Permutations: [3034, 3430, 3034, 3430]
      Largest Number Formed: 3430
      
    // Commented Brute Force Approach
    /*
    String findLargest(int[] arr) {
        List<String> numbers = new ArrayList<>();
        for (int num : arr) {
            numbers.add(String.valueOf(num));
        }
        
        List<String> permutations = new ArrayList<>();
        permute(numbers, 0, permutations);

        String largest = "";
        for (String p : permutations) {
            if (p.compareTo(largest) > 0) {
                largest = p;
            }
        }
        return largest;
    }

    void permute(List<String> arr, int l, List<String> result) {
        if (l == arr.size() - 1) {
            result.add(String.join("", arr));
        } else {
            for (int i = l; i < arr.size(); i++) {
                Collections.swap(arr, l, i);
                permute(arr, l + 1, result);
                Collections.swap(arr, l, i); // Backtrack
            }
        }
    }
    */
}

Collections.sort(numbers, (s1, s2) -> myCompare(s1, s2) ? -1 : 1);
📌 Understanding the Code First:
Collections.sort() is sorting the list of strings (numbers).

(s1, s2) is the lambda function where the myCompare(s1, s2) method is applied.

myCompare(s1, s2) is a custom comparator that compares two concatenated string results:

java
Copy
Edit
(s1 + s2).compareTo(s2 + s1)
If myCompare(s1, s2) returns true, the result is -1, meaning s1 comes before s2.

If myCompare(s1, s2) returns false, the result is 1, meaning s2 comes before s1.

🧑‍💻 Example for Dry Run
plaintext
Copy
Edit
Input: [3, 30, 34, 5, 9]
Convert to strings → ["3", "30", "34", "5", "9"]

Step 1: Start Sorting Comparisons
We will apply myCompare() to compare all possible pairs using:

java
Copy
Edit
(s1 + s2).compareTo(s2 + s1)
➡️ Compare "30" and "3"
"303" vs "330"

"303".compareTo("330") = Negative → s1 comes before s2

No Swap

➡️ Compare "34" and "30"
"3430" vs "3034"

"3430".compareTo("3034") = Positive → s1 comes before s2

Swap "34" and "30"

✅ Array After Comparison: ["3", "34", "30", "5", "9"]

➡️ Compare "5" and "34"
"534" vs "345"

"534".compareTo("345") = Positive → s1 comes before s2

Swap "5" and "34"

✅ Array After Comparison: ["3", "5", "34", "30", "9"]

➡️ Compare "9" and "5"
"95" vs "59"

"95".compareTo("59") = Positive → s1 comes before s2

Swap "9" and "5"

✅ Array After Comparison: ["3", "9", "5", "34", "30"]

Step 2: Continue Sorting
Now the comparisons continue to finalize the correct order.

➡️ Compare "9" and "3"
"93" vs "39"

"93".compareTo("39") = Positive → s1 comes before s2

Swap "9" and "3"

✅ Array After Comparison: ["9", "3", "5", "34", "30"]

➡️ Compare "5" and "3"
"53" vs "35"

"53".compareTo("35") = Positive → s1 comes before s2

Swap "5" and "3"

✅ Final Sorted Array:

plaintext
Copy
Edit
["9", "5", "34", "3", "30"]
📦 Final Step: Form the Largest Number
Join the sorted numbers → "9534330"

Output: "9534330"



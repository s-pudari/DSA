/*
Approach Explanation:
----------------------
We are using **Cycle Sort** to sort an array containing elements from 0 to N or 1 to N without using extra space. 
The idea is to keep placing every element at its correct index until the entire array gets sorted.

Approach 1 (0 to N Elements):
- Each element should be at the index equal to its value.
- If not, we swap it with the element at its correct index.
- We continue this process until the array is sorted.

Approach 2 (1 to N Elements):
- Each element should be at the index (value - 1).
- Again, we swap elements until they are at the correct position.

Complexities:
-------------
Time Complexity: O(N) — In the worst case, each element is swapped at most once.
Space Complexity: O(1) — Sorting is done in-place without using extra space.

Dry Run Example for 0-N:
-------------------------
Input: [1, 3, 0, 2, 4]
Step 1: i=0, arr[0]=1, correctIndex=1, swap(0,1) -> [3,1,0,2,4]
Step 2: i=0, arr[0]=3, correctIndex=3, swap(0,3) -> [2,1,0,3,4]
Step 3: i=0, arr[0]=2, correctIndex=2, swap(0,2) -> [0,1,2,3,4]
Step 4: i=0, arr[0]=0, correct index, move i++
Step 5: i=1, arr[1]=1, correct index, move i++
Step 6: i=2, arr[2]=2, correct index, move i++
Step 7: i=3, arr[3]=3, correct index, move i++
Step 8: i=4, arr[4]=4, correct index, move i++
Output: [0,1,2,3,4]

*/

import java.util.*;

class Main {
    public static void main(String[] args) {
        int[] arr = {1, 3, 0, 2, 4}; // Example input array
        cycleSort(arr); // Sorting the array using Cycle Sort for 0-N
        System.out.println(Arrays.toString(arr)); // Printing the sorted array
    }

    // Function to perform Cycle Sort for elements ranging from 0 to N
    public static void cycleSort(int[] arr) {
        int i = 0;
        
        while (i < arr.length) {
            int correctIndex = arr[i]; // For 0-N, the value itself is the correct index
            
            /* 
            If arr[i] is within the valid index range (i.e., less than arr.length)
            and the element is not already at its correct position (to avoid infinite swapping), 
            then we swap it to its correct index.
            */
            if (arr[i] < arr.length && arr[i] != arr[correctIndex]) {
                swap(arr, i, correctIndex); // Swap with the correct index
            } else {
                i++; // Move to the next index if the current element is already at the correct position
            }
        }
    }

    // Utility function to swap two elements in the array
    public static void swap(int[] arr, int first, int second) {
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }

    /*
    ----------------------------------------------------------------------------------------
    Below is the approach for elements ranging from 1 to N (Commented Version for Reference)
    ----------------------------------------------------------------------------------------

    public static void main(String[] args) {
        int[] arr = {1, 3, 5, 2, 4}; // Example input array for 1-N
        cycleSort(arr); // Sorting the array using Cycle Sort for 1-N
        System.out.println(Arrays.toString(arr)); // Printing the sorted array
    }

    Function to perform Cycle Sort for elements ranging from 1 to N
    public static void cycleSort(int[] arr) {
        int i = 0;
        
        while (i < arr.length) {
            int correctIndex = arr[i] - 1; // For 1-N, correct index is (value - 1)
            
            /* 
            If the current element is not at its correct position, swap it with the element 
            at its correct index. Otherwise, move to the next index.
            */
            if (arr[i] != arr[correctIndex]) {
                swap(arr, i, correctIndex); // Swap with the correct index
            } else {
                i++; // Move to the next index if current element is at correct position
            }
        }
    }
    */
}

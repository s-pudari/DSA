import java.util.*;

class Main {

    /*
    ===========================
    Optimized Selection Sort Approach:
    ===========================
    - Idea: In each iteration, find the maximum element from the unsorted part
      and place it at the correct sorted position (end).
    - Optimization: Instead of using extra arrays, we swap in-place when needed.

    Time Complexity: O(N^2)
    Space Complexity: O(1)

    Dry Run Example:
    Input: [2, 9, 4, 8, 1, -1]

    Iteration 1:
    - Find max between index 0 to 5 => 9 at index 1
    - Swap 9 with -1 at index 5
    Result: [2, -1, 4, 8, 1, 9]

    Iteration 2:
    - Find max between index 0 to 4 => 8 at index 3
    - Swap 8 with 1 at index 4
    Result: [2, -1, 4, 1, 8, 9]

    Iteration 3:
    - Find max between index 0 to 3 => 4 at index 2
    - Swap 4 with 1 at index 3
    Result: [2, -1, 1, 4, 8, 9]

    Iteration 4:
    - Find max between index 0 to 2 => 2 at index 0
    - Swap 2 with 1 at index 2
    Result: [1, -1, 2, 4, 8, 9]

    Iteration 5:
    - Find max between index 0 to 1 => 1 at index 0
    - Swap 1 with -1 at index 1
    Result: [-1, 1, 2, 4, 8, 9]
    ===========================
    */

    public static void main(String[] args) {
        int[] arr = {2, 9, 4, 8, 1, -1};

        // Calling Optimized Ascending Selection Sort
        selectionSortAscending(arr);
        System.out.println("Sorted in Ascending Order: " + Arrays.toString(arr));

        // Showing Descending Selection Sort as well
        int[] arr2 = {2, 9, 4, 8, 1, -1};
        selectionSortDescending(arr2);
        System.out.println("Sorted in Descending Order: " + Arrays.toString(arr2));
    }

    // Selection Sort in Ascending Order
    public static void selectionSortAscending(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            // last -> Index of the last unsorted element
            int last = arr.length - i - 1;
            
            // Find the index of the maximum element between 0 and 'last'
            int maxIndex = getMaxIndex(arr, 0, last);

            // Swap the maximum element with the element at 'last' position
            swap(arr, maxIndex, last);
        }
    }

    // Helper method to find index of maximum element between 'start' and 'end' (inclusive)
    public static int getMaxIndex(int[] arr, int start, int end) {
        int max = start;
        for (int i = start; i <= end; i++) {
            // Update max whenever a larger element is found
            if (arr[i] > arr[max]) {
                max = i;
            }
        }
        return max;
    }

    // Utility method to swap two elements in the array
    public static void swap(int[] arr, int first, int second) {
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }

    // Selection Sort in Descending Order
    public static void selectionSortDescending(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            // last -> Index of last unsorted element
            int last = arr.length - i - 1;
            
            // Find the index of the minimum element between 0 and 'last'
            int minIndex = getMinIndex(arr, 0, last);

            // Swap the minimum element to the end of the unsorted part
            swap(arr, minIndex, last);
        }
    }

    // Helper method to find index of minimum element between 'start' and 'end' (inclusive)
    public static int getMinIndex(int[] arr, int start, int end) {
        int min = start;
        for (int i = start; i <= end; i++) {
            // Update min whenever a smaller element is found
            if (arr[i] < arr[min]) {
                min = i;
            }
        }
        return min;
    }
}

/*
===============================================================
Brute-Force Selection Sort (Without thinking about optimizations):
===============================================================
- Idea: 
    - Simply find min/max and swap for each position without considering whether optimization is possible.
- Even if the array is sorted midway, continue the entire process.
- Less efficient for already sorted or nearly sorted arrays.

Time Complexity: Always O(N^2)
Space Complexity: O(1)

Dry Run (Brute Force):
- Similar to optimized version, but no early stopping based on already sorted checks.
===============================================================
*/

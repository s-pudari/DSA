import java.util.*;

class Main {

    /*
    ===========================
    Insertion Sort - Explanation
    ===========================
    - Idea: Divide the array into a sorted and unsorted part. 
      Pick elements from the unsorted part and place them at the correct position in the sorted part.
    
    Time Complexity: O(N^2) in the worst case
    Space Complexity: O(1) (in-place sorting)

    Stability: 
    - Insertion sort is a stable sorting algorithm.
    - Stability means that if two elements are equal, their relative order is preserved after sorting.

    Dry Run Example (Ascending):
    Input: [2, 9, 4, 8, 1, 2]

    Step 1:
    Compare 9 and 2 → No swap needed.

    Step 2:
    Compare 4 and 9 → Swap → [2, 4, 9, 8, 1, 2]
    Compare 4 and 2 → No swap needed.

    Step 3:
    Compare 8 and 9 → Swap → [2, 4, 8, 9, 1, 2]

    Step 4:
    Compare 1 and 9 → Swap → [2, 4, 8, 1, 9, 2]
    Compare 1 and 8 → Swap → [2, 4, 1, 8, 9, 2]
    Compare 1 and 4 → Swap → [2, 1, 4, 8, 9, 2]
    Compare 1 and 2 → Swap → [1, 2, 4, 8, 9, 2]

    Step 5:
    Compare 2 and 9 → Swap → [1, 2, 4, 8, 2, 9]
    Compare 2 and 8 → Swap → [1, 2, 4, 2, 8, 9]
    Compare 2 and 4 → Swap → [1, 2, 2, 4, 8, 9]
    Compare 2 and 2 → No swap needed.
    ===========================
    */

    public static void main(String[] args) {
        int[] arr = {2, 9, 4, 8, 1, 2};

        // Ascending order sort
        insertionSortAscending(arr);
        System.out.println("Sorted in Ascending Order: " + Arrays.toString(arr));

        // Descending order sort
        int[] arr2 = {2, 9, 4, 8, 1, 2};
        insertionSortDescending(arr2);
        System.out.println("Sorted in Descending Order: " + Arrays.toString(arr2));
    }

    // Insertion Sort in Ascending Order
    public static void insertionSortAscending(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            // Start comparing the current element with all elements before it
            for (int j = i + 1; j > 0; j--) {
                // If the current element is smaller than the previous, swap them
                if (arr[j] < arr[j - 1]) {
                    swap(arr, j, j - 1);
                } else {
                    // If already sorted, no need to check further
                    break;
                }
            }
        }
    }

    // Insertion Sort in Descending Order
    public static void insertionSortDescending(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            /* Compare the current element with all elements before it 
               and swap if the current is larger to ensure descending order */
            for (int j = i + 1; j > 0; j--) {
                if (arr[j] > arr[j - 1]) {
                    swap(arr, j, j - 1);
                } else {
                    break;
                }
            }
        }
    }

    // Utility method to swap two elements in the array
    public static void swap(int[] arr, int first, int second) {
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }
}

/*
===============================================================
Brute-Force Insertion Sort (Without optimizations):
===============================================================
- Idea: Move every element backwards manually by shifting without early stopping.
- Optimization missing: No early exit when already sorted.

Time Complexity: O(N^2)
Space Complexity: O(1)

Stability: Yes, Insertion Sort is a stable algorithm.

Dry Run:
Similar to optimized version, but no checking for early sorted portions.
===============================================================
*/

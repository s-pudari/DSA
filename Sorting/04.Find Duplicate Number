https://leetcode.com/problems/find-the-duplicate-number/description/
/*
Problem: Find the duplicate number in an array containing n+1 integers where each integer is between 1 and n (inclusive).

Approach Explanations:
------------------------

Optimized Approach 1 (Floyd's Tortoise and Hare - Cycle Detection):
- Treat the array as a linked list where value points to the next index.
- Find the cycle using two pointers (slow and fast).
- The duplicate number is the entry point of the cycle.

Optimized Approach 2 (Cycle Sort Technique):
- Place each number at its correct index (value - 1).
- If a number is already present at its correct index, and trying to place the same value again, then that number is the duplicate.

Brute Force Approach:
- Use two nested loops to compare every element with every other element to find the duplicate.

Complexities:
--------------
Floyd's Cycle Detection:
- Time Complexity: O(N)
- Space Complexity: O(1)

Cycle Sort Based Detection:
- Time Complexity: O(N)
- Space Complexity: O(1)

Brute Force Approach:
- Time Complexity: O(N^2)
- Space Complexity: O(1)

Dry Run Example:
----------------
Input: [1,3,4,2,2]

Cycle Sort:
- 1 at index 0 is fine.
- 3 at index 1 → swap with value at index 2 → [1,4,3,2,2]
- 4 at index 1 → swap with value at index 3 → [1,2,3,4,2]
- 2 at index 1 → swap with value at index 1 (duplicate found 2).

Floyd’s Cycle Detection:
- Slow and fast both start at 1.
- slow = nums[1] = 3, fast = nums[nums[1]] = nums[3] = 2
- slow = nums[3] = 2, fast = nums[nums[2]] = nums[3] = 2
- slow == fast (meeting point found), start again to find entrance.

Answer: 2
*/

class Solution {

    public int findDuplicate(int[] nums) {

        // Optimized Approach 1: Cycle Sort Technique
        cycleSort(nums); // First arrange elements according to their correct indices
        
        for (int i = 0; i < nums.length; i++) {
            /* 
            After sorting, if an element is not at its correct index,
            that means the current value is the duplicate.
            */
            if (nums[i] != i + 1) {
                return nums[i]; // Found the duplicate number
            }
        }
        return -1; // Default return (though problem guarantees at least one duplicate)
    }

    // Function to perform Cycle Sort
    public static void cycleSort(int[] arr) {
        int i = 0;
        
        while (i < arr.length) {
            int correctIndex = arr[i] - 1; // Calculate the correct index for current value
            
            /* 
            Swap if:
            - Current element is not at its correct position.
            - Avoid infinite swapping if a duplicate exists by checking equality.
            */
            if (arr[i] != arr[correctIndex]) {
                swap(arr, i, correctIndex); // Swap to place correct value at correct index
            } else {
                i++; // Move forward if already at correct position
            }
        }
    }

    // Utility function to swap two elements
    public static void swap(int[] arr, int first, int second) {
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }

    /*
    --------------------------------------------------------------------------------
    Optimized Approach 2 (Commented): Floyd's Tortoise and Hare (Cycle Detection)
    --------------------------------------------------------------------------------

    public int findDuplicate(int[] nums) {
        int slow = nums[0];
        int fast = nums[0];

        // Phase 1: Detect cycle
        do {
            slow = nums[slow]; // Move slow by 1 step
            fast = nums[nums[fast]]; // Move fast by 2 steps
        } while (slow != fast);

        // Phase 2: Find entry point of the cycle
        fast = nums[0];
        while (slow != fast) {
            slow = nums[slow];
            fast = nums[fast];
        }

        return slow; // The duplicate number
    }

    Explanation:
    ------------
    - We use two pointers, slow and fast.
    - They meet inside the cycle.
    - Then start one pointer from start and one from meeting point; the point they meet again is the duplicate number.
    */

    /*
    --------------------------------------------------------------------------------
    Brute Force Approach (Commented)
    --------------------------------------------------------------------------------

    public int findDuplicate(int[] nums) {
        for (int i = 0; i < nums.length - 1; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] == nums[j]) {
                    return nums[i]; // Found duplicate
                }
            }
        }
        return -1;
    }

    Explanation:
    ------------
    - Check every element with every other element.
    - As soon as a duplicate is found, return it.

    Drawback:
    ---------
    - Very high time complexity (O(N^2)), not suitable for large inputs.
    */
}

https://www.geeksforgeeks.org/batch/gfg-160-problems/track/searching-gfg-160/problem/peak-element

//Approach 2 : Using Binary Search T.C --> O(log n) & S.C --> O(1)
class Solution {

    public int peakElement(int[] arr) {
        // code here
        
        int n=arr.length;
        
        if(n==1) return 0;
        
        if(arr[0]>arr[1]) return 0;
        
        if(arr[n-1]>arr[n-2]) return n-1;
        
        int low=1,high=n-2;
        
        while(low<=high){
            int mid=low+(high-low)/2;
            
            if(arr[mid]>arr[mid+1] && arr[mid]>arr[mid-1]) return mid;
            
            if(arr[mid]<arr[mid+1]) low=mid+1;
            else high=mid-1;
        }
        return -1;
    }
}


//Aprroach 1 : Brute Force T.C --> O(n) & S.C --> O(1)
class Solution {

    public int peakElement(int[] arr) {
        // code here
        for(int i=0;i<arr.length;i++){
            boolean left=true;
            boolean right=true;
            if(i>0 && arr[i]<=arr[i-1]){
              left=false;
            } 
            
            if(i<arr.length-1 && arr[i]<=arr[i+1]){
              right=false;
            } 
            
            if(left && right) return i;
        }
        return -1;
    }
}

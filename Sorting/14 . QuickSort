import java.util.*;

class Main {

    /*
    ===========================
    Optimized Quick Sort Approach:
    ===========================
    - Quick Sort is a Divide & Conquer algorithm.
    - Pick a pivot element (typically middle, first, or last).
    - Partition the array: elements less than pivot go to left; greater go to right.
    - Recursively apply to subarrays.
    
    Time Complexity (Average): O(N log N)
    Time Complexity (Worst case, sorted array): O(N^2)
    Space Complexity: O(log N) due to recursion stack

    Stability: 
    - Quick Sort is NOT stable by default. Equal elements might change relative positions after partitioning.

    Dry Run Example:
    Input: [2,9,4,8,1,2]
    Pivot (mid) = 4

    - Left side: elements < 4
    - Right side: elements > 4
    - Partition the array by swapping accordingly.
    - Recursively sort left and right parts.
    ===========================
    */

    public static void main(String[] args) {
        int[] arr = {2, 9, 4, 8, 1, 2};

        // Ascending order quick sort
        quickSortAscending(arr, 0, arr.length - 1);
        System.out.println("Sorted in Ascending Order: " + Arrays.toString(arr));

        int[] arr2 = {2, 9, 4, 8, 1, 2};

        // Descending order quick sort
        quickSortDescending(arr2, 0, arr2.length - 1);
        System.out.println("Sorted in Descending Order: " + Arrays.toString(arr2));
    }

    // Quick Sort in Ascending Order
    public static void quickSortAscending(int[] arr, int low, int high) {
        if (low >= high) return; // Base case: if one or zero elements, already sorted

        int s = low;
        int e = high;

        int mid = s + (e - s) / 2;
        int pivot = arr[mid]; // Choosing middle element as pivot

        while (s <= e) {
            // Move 's' forward if elements are smaller than pivot
            while (arr[s] < pivot) {
                s++;
            }
            // Move 'e' backward if elements are greater than pivot
            while (arr[e] > pivot) {
                e--;
            }

            if (s <= e) {
                // Swap elements at 's' and 'e'
                swap(arr, s, e);
                s++;
                e--;
            }
        }

        // Recursively sort the two partitions
        quickSortAscending(arr, low, e);
        quickSortAscending(arr, s, high);
    }

    // Quick Sort in Descending Order
    public static void quickSortDescending(int[] arr, int low, int high) {
        if (low >= high) return;

        int s = low;
        int e = high;

        int mid = s + (e - s) / 2;
        int pivot = arr[mid]; // Choosing middle element as pivot

        while (s <= e) {
            /* 
            For descending order:
            - Left side should have elements > pivot
            - Right side should have elements < pivot
            */
            while (arr[s] > pivot) {
                s++;
            }
            while (arr[e] < pivot) {
                e--;
            }

            if (s <= e) {
                swap(arr, s, e);
                s++;
                e--;
            }
        }

        // Recursively sort partitions
        quickSortDescending(arr, low, e);
        quickSortDescending(arr, s, high);
    }

    // Utility method to swap two elements in array
    public static void swap(int[] arr, int first, int second) {
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }
}

/*
===============================================================
Brute-Force Quick Sort (Basic Idea without Optimizations):
===============================================================
- Always pick the first element as pivot.
- Partition array into two lists:
  - Elements less than pivot
  - Elements greater than pivot
- Recursively apply on the left and right lists
- Merge results

Problems:
- High memory overhead (needs extra arrays)
- Time complexity O(N^2) on sorted or nearly sorted arrays
- Space complexity O(N) because new arrays are created at every step

===============================================================
Dry Run (Brute Force):

Input: [2,9,4,8,1,2]

Pivot = 2
Left = [1]
Right = [9,4,8,2]

Apply recursively on left and right parts...
===============================================================
*/

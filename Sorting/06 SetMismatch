/*
Problem:
--------
You are given an array representing numbers from 1 to n, where one number is duplicated and one number is missing.
You need to return the duplicate and the missing number.

Example:
Input: [1,2,2,4]
Output: [2,3]
Explanation: 2 is duplicated, 3 is missing.

Approach 1: Brute Force using Counting Array
--------------------------------------------
- Use an array to count the frequency of each number.
- Traverse the frequency array to find:
  - the number with frequency 2 → duplicate
  - the number with frequency 0 → missing
- Time Complexity: O(N)
- Space Complexity: O(N)
*/

class Solution {
    public int[] findErrorNums(int[] nums) {
        int[] count = new int[nums.length + 1];
        int[] ans = new int[2];

        for (int num : nums) {
            count[num]++;
        }

        for (int i = 1; i < count.length; i++) {
            if (count[i] == 2) {
                ans[0] = i; // duplicate
            } else if (count[i] == 0) {
                ans[1] = i; // missing
            }
        }

        return ans;
    }
}

/*
Approach 2: Optimized using Cycle Sort
--------------------------------------
- Place each element at its correct index (value - 1)
- After sorting, if an element is not at its correct index i, then:
  - nums[i] is the duplicate
  - i+1 is the missing number
- Time Complexity: O(N)
- Space Complexity: O(1)
*/

class Solution {
    public int[] findErrorNums(int[] nums) {
        int[] ans = new int[2];
        cycleSort(nums);

        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != i + 1) {
                ans[0] = nums[i];     // duplicate
                ans[1] = i + 1;       // missing
            }
        }

        return ans;
    }

    public void cycleSort(int[] arr) {
        int i = 0;

        while (i < arr.length) {
            int correctIndex = arr[i] - 1;

            if (arr[i] != arr[correctIndex]) {
                swap(arr, i, correctIndex);
            } else {
                i++;
            }
        }
    }

    public void swap(int[] arr, int first, int second) {
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }
}

https://www.geeksforgeeks.org/batch/gfg-160-problems/track/sorting-bonus-problems/problem/make-array-elements-unique--170645
/*
Approach Explanation:

- **Optimized Approach (Approach 2)**:
  - Sort the array to ensure that the elements are in ascending order.
  - Traverse the sorted array and check if the current element is less than or equal to the previous one.
  - If so, increment the current element to make it one greater than the previous element.
  - Track the number of increments required to achieve the uniqueness of all elements.

- **Brute Force Approach (Approach 1)**:
  - For every element, check for duplicates by traversing the entire array.
  - Increment the duplicate elements until they are unique.
  - Inefficient due to the nested loops.

Time Complexity:
- **Optimized Approach:** O(n log n) (Due to sorting)
- **Brute Force Approach:** O(n²) (Due to nested loops)

Space Complexity:
- **Optimized Approach:** O(1)
- **Brute Force Approach:** O(1)

Dry Run Example:
Input: [3, 2, 1, 2, 1, 7]

1. After Sorting: [1, 1, 2, 2, 3, 7]
2. First Increment: 1 → 2 (Total increments: 1)
3. Second Increment: 2 → 3 (Total increments: 2)
4. Third Increment: 2 → 4 (Total increments: 4)
5. Fourth Increment: 3 → 5 (Total increments: 6)
6. Output: 6
*/

import java.util.Arrays;

class Solution {
    // Optimized Approach (Approach 2)
    public int minIncrements(int[] arr) {
        int n = arr.length;
        int cnt = 0;
        
        // Sort the array to make comparisons easier
        Arrays.sort(arr);
        
        // Iterate and adjust duplicates
        for (int i = 1; i < n; i++) {
            if (arr[i] <= arr[i - 1]) {
                cnt += arr[i - 1] + 1 - arr[i]; // Calculate the increments
                arr[i] = arr[i - 1] + 1; // Adjust the current element to maintain uniqueness
            }
        }
        return cnt;
    }
    
    // Brute Force Approach (Approach 1)
    /*
    public int minIncrements(int[] arr) {
        int n = arr.length;
        int cnt = 0;
        
        for (int i = 0; i < n; i++) {
            while (hasDuplicate(arr, i)) {
                arr[i]++;
                cnt++;
            }
        }
        return cnt;
    }

    public boolean hasDuplicate(int[] arr, int index) {
        for (int i = 0; i < arr.length; i++) {
            if (i != index && arr[i] == arr[index]) {
                return true;
            }
        }
        return false;
    }
    */
}

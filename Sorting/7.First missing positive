https://leetcode.com/problems/first-missing-positive/
/*
Problem:
---------
Given an unsorted integer array, find the smallest missing positive integer.

Approach Explanation:
------------------------

Optimized Approach (Cycle Sort Technique):
- We place each positive number (between 1 and n) at its correct index (value - 1).
- After the sorting, the first index where nums[i] != i+1 indicates the missing positive number.

Brute Force Approach (Commented):
- Use a HashSet to store all numbers.
- Then, from 1 to n, check which number is missing.

Complexities:
--------------
Optimized Approach (Cycle Sort):
- Time Complexity: O(N)
- Space Complexity: O(1)

Brute Force Approach (HashSet):
- Time Complexity: O(N)
- Space Complexity: O(N)

Dry Run Example:
----------------
Input: [3,4,-1,1]

After cycle sort:
- Try placing numbers at correct positions:
    - 3 → index 2
    - 4 → index 3
    - -1 is ignored
    - 1 → index 0

Array after sort:
[1, -1, 3, 4]

Checking:
- Index 0 → 1 → correct
- Index 1 → -1 ≠ 2 → Missing positive is 2

Output: 2
*/

class Solution {

    public int firstMissingPositive(int[] nums) {
        
        cycleSort(nums); // Place numbers at their correct positions
        
        // Traverse the sorted array
        for (int i = 0; i < nums.length; i++) {
            
            /*
            After sorting, if value at index i is not (i+1),
            then (i+1) is the smallest missing positive number.
            */
            if (nums[i] != i + 1) {
                return i + 1;
            }
        }
        
        // If all positions are correct, missing number is n+1
        return nums.length + 1;
    }

    // Function to perform Cycle Sort on the array
    public void cycleSort(int[] nums) {
        int i = 0;

        while (i < nums.length) {
            int correctIndex = nums[i] - 1; // Expected correct index for nums[i]

            /*
            Conditions for swapping:
            - nums[i] should be positive.
            - nums[i] should be within the range [1, nums.length].
            - nums[i] should not already be at its correct position to avoid infinite swapping.
            */
            if (nums[i] > 0 && nums[i] <= nums.length && nums[i] != nums[correctIndex]) {
                swap(nums, i, correctIndex); // Swap to correct position
            } else {
                i++; // Move to next index if current value is already correct or invalid
            }
        }
    }

    // Utility function to swap two elements
    public static void swap(int[] arr, int first, int second) {
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }

    /*
    --------------------------------------------------------------------------------
    Brute Force Approach (Commented)
    --------------------------------------------------------------------------------

    public int firstMissingPositive(int[] nums) {
        Set<Integer> set = new HashSet<>();
        
        // Insert all elements into the HashSet
        for (int num : nums) {
            set.add(num);
        }

        // Check from 1 to n which number is missing
        for (int i = 1; i <= nums.length; i++) {
            if (!set.contains(i)) {
                return i;
            }
        }
        
        // If all numbers from 1 to n are present, return n+1
        return nums.length + 1;
    }

    Explanation:
    ------------
    - Insert all numbers into a set.
    - Check sequentially starting from 1 to find the first missing positive.
    - If all numbers are present, return n+1.

    Drawback:
    ---------
    - Uses O(N) extra space, unlike optimized cycle sort approach which is O(1).
    */
}

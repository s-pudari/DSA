import java.util.*;

class Main {
    
    /* 
    ===========================
    Optimized Approach (with early stopping using 'swapped' flag):
    ===========================
    - Idea: After every pass, the largest element "bubbles up" to its correct position.
    - If in any full pass no swapping happens, array is already sorted => break early.
    
    Time Complexity: 
        - Best case (already sorted): O(N)
        - Average and Worst case: O(N^2)
    Space Complexity: O(1)  // In-place sorting, no extra array used

    ---------------------------
    Dry Run Example:
    Input: [2, 9, 4, 8, 1]
    
    Pass 1:
    - Compare 2 and 9 -> OK
    - Compare 9 and 4 -> Swap -> [2, 4, 9, 8, 1]
    - Compare 9 and 8 -> Swap -> [2, 4, 8, 9, 1]
    - Compare 9 and 1 -> Swap -> [2, 4, 8, 1, 9]
    
    Pass 2:
    - Compare 2 and 4 -> OK
    - Compare 4 and 8 -> OK
    - Compare 8 and 1 -> Swap -> [2, 4, 1, 8, 9]

    Pass 3:
    - Compare 2 and 4 -> OK
    - Compare 4 and 1 -> Swap -> [2, 1, 4, 8, 9]

    Pass 4:
    - Compare 2 and 1 -> Swap -> [1, 2, 4, 8, 9]
    - No swaps in next pass -> STOP early.
    ---------------------------
    */

    public static void main(String[] args) {
        int[] arr = {2, 9, 4, 8, 1};

        // Calling Optimized Ascending Order Bubble Sort
        bubbleSortAscending(arr);
        System.out.println("Sorted in Ascending Order: " + Arrays.toString(arr));

        // Now showing Descending Order Sorting as well
        int[] arr2 = {2, 9, 4, 8, 1};
        bubbleSortDescending(arr2);
        System.out.println("Sorted in Descending Order: " + Arrays.toString(arr2));
    }

    /* 
    Bubble Sort in Ascending Order with Optimization 
    */
    public static void bubbleSortAscending(int[] arr) {
        boolean swapped; // To check if swapping happened in the inner loop
        for (int i = 0; i < arr.length; i++) {
            swapped = false; // Reset swapped to false at the start of each outer loop pass

            for (int j = 1; j < arr.length - i; j++) {
                /* 
                Comparing adjacent elements
                If previous element is greater, swap them to bring smaller elements forward
                */
                if (arr[j] < arr[j - 1]) {
                    swap(arr, j, j - 1);
                    swapped = true;
                }
            }

            /* 
            If no elements were swapped during the inner loop,
            that means the array is already sorted.
            So, we break early to save unnecessary iterations.
            */
            if (!swapped) {
                break;
            }
        }
    }

    /*
    Bubble Sort in Descending Order with Optimization 
    (Same logic but we swap when left element is smaller)
    */
    public static void bubbleSortDescending(int[] arr) {
        boolean swapped;
        for (int i = 0; i < arr.length; i++) {
            swapped = false;

            for (int j = 1; j < arr.length - i; j++) {
                /* 
                Comparing adjacent elements
                If previous element is smaller, swap them to bring larger elements forward
                */
                if (arr[j] > arr[j - 1]) {
                    swap(arr, j, j - 1);
                    swapped = true;
                }
            }

            /* 
            Breaking early if no swapping happened,
            indicating that the array is already sorted in descending order.
            */
            if (!swapped) {
                break;
            }
        }
    }

    /*
    Utility function to swap two elements in the array.
    */
    public static void swap(int[] arr, int first, int second) {
        int temp = arr[first];
        arr[first] = arr[second];
        arr[second] = temp;
    }
}

/*
===============================================================
Brute-Force Bubble Sort (No early stopping - purely traditional):
===============================================================

- Idea: Regardless of whether the array is sorted or not, 
  it completes all passes through the array.

Time Complexity: Always O(N^2)
Space Complexity: O(1)

Dry Run Example (Brute Force on [2, 9, 4, 8, 1]):
- Even if the array gets sorted before, brute-force approach will still continue remaining passes unnecessarily.
- Less efficient if the array is already sorted.
===============================================================
*/

import java.util.*;

class Main {

    /*
    ===========================
    Optimized Merge Sort Approach:
    ===========================
    - Merge Sort follows a Divide and Conquer strategy.
    - It divides the array into two halves recursively, sorts each half, and then merges them.
    - It is a stable sorting algorithm (does not swap equal elements unnecessarily).

    Stability: 
    - Merge Sort is stable because during merging, if two elements are equal,
      the one from the left subarray is picked first, preserving original order.

    Time Complexity: O(N log N) 
    Space Complexity: O(N) (extra space used for merging arrays)

    Dry Run Example:
    Input: [2, 9, 4, 8, 1, 2]

    1. Divide into [2, 9, 4] and [8, 1, 2]
    2. Further divide [2,9,4] -> [2] and [9,4]
    3. Divide [9,4] -> [9] and [4]
    4. Merge [9] and [4] -> [4,9]
    5. Merge [2] and [4,9] -> [2,4,9]
    6. Similarly for [8,1,2]: divide -> [8] and [1,2]; then merge
    7. Final merge -> [1,2,2,4,8,9]

    ===========================
    */

    public static void main(String[] args) {
        int[] arr = {2, 9, 4, 8, 1, 2};

        // Calling Merge Sort (Optimized version with extra space)
        arr = mergeSort(arr);
        System.out.println("Sorted using Merge Sort: " + Arrays.toString(arr));

        // Showing Merge Sort In-Place version separately
        int[] arr2 = {2, 9, 4, 8, 1, 2};
        mergeSortInPlace(arr2, 0, arr2.length);
        System.out.println("Sorted using In-Place Merge Sort: " + Arrays.toString(arr2));
    }

    // Merge Sort (Optimized Version using Extra Space)
    public static int[] mergeSort(int[] arr) {
        if (arr.length == 1) return arr; // Base case: array with 1 element is already sorted

        int mid = arr.length / 2;

        // Recursively sort left and right halves
        int[] left = mergeSort(Arrays.copyOfRange(arr, 0, mid));
        int[] right = mergeSort(Arrays.copyOfRange(arr, mid, arr.length));

        // Merge the sorted halves
        return merge(left, right);
    }

    // Merge two sorted arrays into one
    public static int[] merge(int[] left, int[] right) {
        int[] mix = new int[left.length + right.length];

        int i = 0, j = 0, k = 0;

        // Compare elements and add the smaller one
        while (i < left.length && j < right.length) {
            if (left[i] <= right[j]) { 
                // Pick left element if equal to maintain stability
                mix[k++] = left[i++];
            } else {
                mix[k++] = right[j++];
            }
        }

        // Copy remaining elements of left array (if any)
        while (i < left.length) {
            mix[k++] = left[i++];
        }

        // Copy remaining elements of right array (if any)
        while (j < right.length) {
            mix[k++] = right[j++];
        }

        return mix;
    }

    /*
    =====================================
    In-Place Merge Sort Approach:
    =====================================
    - Sorts the array without creating new arrays at each division step.
    - Saves space but merging in-place is slightly trickier.
    
    Stability:
    - In-place version may not be stable unless extra care is taken.
    (Here we keep stability since we only overwrite at proper positions.)

    Time Complexity: O(N log N)
    Space Complexity: O(1) (ignoring recursion stack)

    Dry Run Example (Simplified):
    Input: [2,9,4,8,1,2]
    - Sort left half [2,9,4], sort right half [8,1,2] without creating new arrays.
    - Merge them directly within the original array.
    =====================================
    */

    // In-Place Merge Sort
    public static void mergeSortInPlace(int[] arr, int start, int end) {
        if (end - start == 1) {
            // Base case: single element segment is sorted
            return;
        }

        int mid = start + (end - start) / 2;

        // Sort the left half
        mergeSortInPlace(arr, start, mid);
        
        // Sort the right half
        mergeSortInPlace(arr, mid, end);

        // Merge the two sorted halves
        mergeInPlace(arr, start, mid, end);
    }

    // Helper function for in-place merging
    public static void mergeInPlace(int[] arr, int start, int mid, int end) {
        int[] mix = new int[end - start];

        int i = start, j = mid, k = 0;

        // Compare and copy elements into the 'mix' array
        while (i < mid && j < end) {
            if (arr[i] <= arr[j]) {
                mix[k++] = arr[i++];
            } else {
                mix[k++] = arr[j++];
            }
        }

        // Copy remaining elements from left half
        while (i < mid) {
            mix[k++] = arr[i++];
        }

        // Copy remaining elements from right half
        while (j < end) {
            mix[k++] = arr[j++];
        }

        // Copy sorted 'mix' array back to original array
        for (int l = 0; l < mix.length; l++) {
            arr[start + l] = mix[l];
        }
    }
}

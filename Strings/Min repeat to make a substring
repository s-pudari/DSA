https://www.geeksforgeeks.org/batch/gfg-160-problems/track/string-bonus-problems/problem/minimum-times-a-has-to-be-repeated-such-that-b-is-a-substring-of-it--170645
class Solution {
    /*
    Approach:
    - We need to find the minimum times `s1` should be repeated so that `s2` becomes a substring of it.
    - Instead of manually appending `s1`, we calculate the minimum required repetitions using:
      count = ceil(s2.length() / s1.length())
    - We check if `s2` exists within these repetitions.
    - If not, we repeat `s1` once more and check again.
    - If still not found, return `-1`.

    Time Complexity: O(n) → Efficient substring check
    Space Complexity: O(n) → Due to `StringBuilder`
    */

    static int minRepeats(String s1, String s2) {
        // Calculate the minimum number of times `s1` needs to be repeated
        int count = (int) Math.ceil((double) s2.length() / s1.length());

        // Create the repeated string with the minimum repetitions
        StringBuilder repeated = new StringBuilder(s1.repeat(count));

        // Check if s2 is a substring of the repeated s1
        if (repeated.toString().contains(s2)) {
            return count;
        }

        // Try one extra repetition
        repeated.append(s1);
        if (repeated.toString().contains(s2)) {
            return count + 1;
        }

        return -1; // If s2 is not found, return -1
    }

    /*
    Brute Force Approach:
    - Try starting from each index in `s1` and attempt to match `s2` by repeating `s1` as needed.
    - If a match is found, return the number of repetitions used.
    - If no match is found after checking all possible start positions, return -1.

    Time Complexity: O(n * m) → Checking all possible start positions.
    Space Complexity: O(1) → No extra space used.

    */
    
    /*
    // Brute Force Implementation
    static int minRepeats(String s1, String s2) {
        int n = s1.length();
        int m = s2.length();

        for (int i = 0; i < n; i++) { // Try each starting position in s1
            int rep = 1; // Count of repetitions
            int idx1 = i; // Pointer in s1
            boolean found = true; // Flag to check if s2 is found

            for (int idx2 = 0; idx2 < m; idx2++) { // Check each character of s2
                if (s1.charAt(idx1) != s2.charAt(idx2)) {
                    found = false;
                    break; // Stop if a mismatch is found
                }
                idx1++;

                // If end of s1 is reached, restart and increase repetition count
                if (idx1 == n) {
                    idx1 = 0;
                    if (idx2 != m - 1) { // If s2 is not fully matched yet
                        rep++;
                    }
                }
            }
            if (found) {
                return rep; // Return the required repetitions
            }
        }
        return -1; // If no valid match found
    }
    */
}

https://www.geeksforgeeks.org/batch/gfg-160-problems/track/string-gfg-160/problem/add-binary-strings3805
Time Complexity and Space complexity --> O(max(n,m))
class Solution {
    public String addBinary(String s1, String s2) {
        int n = s1.length(); // Length of the first binary string
        int m = s2.length(); // Length of the second binary string
        
        // Ensure s1 is the longer string. Swap if needed.
        if (m > n) {
            String temp = s1;
            s1 = s2;
            s2 = temp;
            int tempLen = n;
            n = m;
            m = tempLen;
        }

        int carry = 0;  // Initialize carry
        StringBuilder result = new StringBuilder(); // To store the result
        int j = m - 1; // Pointer for the second string

        // Traverse the first string (longer string) from the end
        for (int i = n - 1; i >= 0; i--) {
            int bit1 = s1.charAt(i) - '0'; // Get the current bit of s1
            int bitSum = bit1 + carry; // Add current bit of s1 and carry

            // If there are remaining bits in s2, add them
            if (j >= 0) {
                int bit2 = s2.charAt(j) - '0'; // Get the current bit of s2
                bitSum += bit2;
                j--; // Move to the next bit in s2
            }

            // Calculate the result bit and update carry
            int bit = bitSum % 2; // Result bit is the remainder
            carry = bitSum / 2;   // Update carry for the next iteration
            result.append(bit); // Append result bit to the result
        }

        // If there's any carry left, append it to the result
        if (carry > 0) {
            result.append(carry);
        }

        // Reverse the result and remove leading zeros
        String finalResult = result.reverse().toString();
        // Remove leading zeros if present
        int idx = 0;
        while (idx < finalResult.length() && finalResult.charAt(idx) == '0') {
            idx++;
        }
        return idx == finalResult.length() ? "0" : finalResult.substring(idx);
    }
}

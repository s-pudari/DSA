/*
🔥 PROBLEM: Integer to Roman 🔥
-------------------------------
Given an integer `num` (1 ≤ num ≤ 3999), convert it to its Roman numeral representation.

📌 Roman Numeral Reference:
Symbol | Value
-------|------
M      | 1000
CM     | 900
D      | 500
CD     | 400
C      | 100
XC     | 90
L      | 50
XL     | 40
X      | 10
IX     | 9
V      | 5
IV     | 4
I      | 1

---

✅ OPTIMIZED GREEDY APPROACH
-------------------------------
💡 Idea:
Start from the largest Roman value and subtract it greedily from the number while adding the symbol to the result.

📦 Example:  
Input: `num = 1987`  
Steps:  
- 1000 → "M" (num = 987)  
- 900 → "CM" (num = 87)  
- 50 → "L" (num = 37)  
- 10 → "X" (3 times = "XXX", num = 7)  
- 5 → "V" (num = 2)  
- 1 → "II"  
Output: **MCMLXXXVII**

🕒 Time Complexity: O(1) — fixed loop of 13 symbols  
🧠 Space Complexity: O(1) — result string built in constant time

*/

class Solution {
    public String intToRoman(int num) {

        // Step 1: Define Roman values in descending order (including subtractive cases)
        int[] values = {
            1000, 900, 500, 400,
            100, 90, 50, 40,
            10, 9, 5, 4,
            1
        };

        String[] romans = {
            "M", "CM", "D", "CD",
            "C", "XC", "L", "XL",
            "X", "IX", "V", "IV",
            "I"
        };

        StringBuilder result = new StringBuilder();

        // Step 2: Greedily subtract and append symbols
        for (int i = 0; i < values.length; i++) {
            while (num >= values[i]) {
                num -= values[i];            // Subtract value
                result.append(romans[i]);    // Append matching Roman symbol
            }
        }

        return result.toString();
    }


    /*
    ❌ BRUTE-FORCE-LIKE MAPPING (COMMENTED OUT)
    --------------------------------------------
    💡 Idea:
    Build Roman numeral by predefining string arrays for each place value.
    Clean and readable, but not as flexible for changes in logic/range.

    Code: */
    String[] ones = {
        "", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX"
    };
    String[] tens = {
        "", "X", "XX", "XXX", "XL", "L", "LX", "LXX", "LXXX", "XC"
    };
    String[] hundreds = {
        "", "C", "CC", "CCC", "CD", "D", "DC", "DCC", "DCCC", "CM"
    };
    String[] thousands = {
        "", "M", "MM", "MMM"
    };

    return thousands[num / 1000] +
           hundreds[(num % 1000) / 100] +
           tens[(num % 100) / 10] +
           ones[num % 10];
    
}

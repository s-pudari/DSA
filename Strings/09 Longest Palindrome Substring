https://leetcode.com/problems/longest-palindromic-substring/
/*
🔥 PROBLEM: Longest Palindromic Substring 🔥
--------------------------------------------
Given a string `s`, return the longest substring of `s` that is a palindrome.

📌 What is a Palindrome?
A string that reads the same forward and backward. Example: "madam", "racecar".

---

✅ OPTIMIZED APPROACH: Expand Around Center
--------------------------------------------
💡 Idea:
- A palindrome mirrors around its center.
- There are 2n - 1 possible centers for a string of length n:
  - Each character (odd-length palindromes)
  - Each gap between characters (even-length palindromes)
- For each center, expand as long as characters match.
- Track the longest one.

🕒 Time Complexity: O(n²)  
🧠 Space Complexity: O(1)  
(n = length of input string)

---

🔍 DRY RUN EXAMPLE
--------------------
Input: "babad"

Loop:
- i = 0: odd center = "b", even center = ""
- i = 1: odd center = "aba" ✅, even center = "ba"
- i = 2: odd center = "bab" ✅, even center = "ab"
- i = 3: odd center = "a", even = "ad"
- i = 4: odd center = "d", even = ""

Result: "bab" or "aba" (both are correct)

*/

class Solution {
    public String longestPalindrome(String s) {

        String res = "";   // To store result
        int resLen = 0;    // To track the length of longest palindrome found

        for (int i = 0; i < s.length(); i++) {

            // Expand around odd-length palindrome center at i
            int l = i, r = i;
            while (l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)) {

                /* If the current palindrome length is longer than previous longest,
                   update the result and its length */
                if (r - l + 1 > resLen) {
                    res = s.substring(l, r + 1);
                    resLen = r - l + 1;
                }

                // Expand outward
                l--;
                r++;
            }

            // Expand around even-length palindrome center between i and i+1
            l = i;
            r = i + 1;
            while (l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)) {

                if (r - l + 1 > resLen) {
                    res = s.substring(l, r + 1);
                    resLen = r - l + 1;
                }

                l--;
                r++;
            }
        }

        return res;
    }

    /*
    🧠 BRUTE-FORCE APPROACH: Check All Substrings
    ----------------------------------------------
    💡 Idea:
    - Generate all substrings of the input string.
    - For each substring, check if it is a palindrome.
    - Track the longest one.

    🕒 Time Complexity: O(n³) (for generating + checking)
    🧠 Space Complexity: O(1)

    Code:

    public String longestPalindrome(String s) {
        String res = "";
        int maxLen = 0;

        for (int i = 0; i < s.length(); i++) {
            for (int j = i; j < s.length(); j++) {
                String sub = s.substring(i, j + 1);

                if (isPalindrome(sub) && sub.length() > maxLen) {
                    res = sub;
                    maxLen = sub.length();
                }
            }
        }

        return res;
    }

    private boolean isPalindrome(String str) {
        int l = 0, r = str.length() - 1;
        while (l < r) {
            if (str.charAt(l) != str.charAt(r)) return false;
            l++;
            r--;
        }
        return true;
    }
    ----------------------------------------------
    */
}

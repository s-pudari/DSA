// https://leetcode.com/problems/find-the-index-of-the-first-occurrence-in-a-string/

/*
==================================================
Problem: strStr (Implement indexOf)
==================================================
Given two strings `haystack` and `needle`, return the index of the first occurrence of `needle` 
in `haystack`, or -1 if `needle` is not part of `haystack`.

--------------------------------------------------
Brute Force Approach
--------------------------------------------------
Idea:
- Slide a window of length `needle.length()` over `haystack`
- Compare each substring with `needle`

Time Complexity: O(N * M)
Space Complexity: O(1)
Where:
- N = length of haystack
- M = length of needle

Dry Run:
haystack = "sadbutsad", needle = "sad"
i = 0 → "sad" == "sad" → return 0
--------------------------------------------------
*/

class StrStrBruteForce {
    public int strStr(String haystack, String needle) {
        int m = haystack.length();
        int n = needle.length();

        for (int i = 0; i <= m - n; i++) {
            if (haystack.substring(i, i + n).equals(needle)) {
                return i;
            }
        }
        return -1;
    }
}

/*
--------------------------------------------------
Optimized Approach (Java Built-in indexOf)
--------------------------------------------------
Idea:
- Use Java's built-in `indexOf()` method which is implemented efficiently internally.

Time Complexity: O(N * M) in worst case, but optimized in practice.
Space Complexity: O(1) if called directly on String, O(N) if using StringBuilder.

Dry Run:
haystack = "leetcode", needle = "leeto"
indexOf returns -1 because "leeto" not found
--------------------------------------------------
*/

class StrStrOptimized {
    public int strStr(String haystack, String needle) {
        return haystack.indexOf(needle);
    }
}

/*
--------------------------------------------------
Main Test
--------------------------------------------------
*/

public class Main {
    public static void main(String[] args) {
        StrStrBruteForce brute = new StrStrBruteForce();
        StrStrOptimized opt = new StrStrOptimized();

        String haystack = "sadbutsad";
        String needle = "sad";

        System.out.println("Brute Force Result: " + brute.strStr(haystack, needle));
        System.out.println("Optimized Result: " + opt.strStr(haystack, needle));
    }
}

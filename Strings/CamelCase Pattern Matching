https://www.geeksforgeeks.org/batch/gfg-160-problems/track/string-bonus-problems/problem/camelcase-pattern-matching2259
import java.util.*;

class Solution {
    /*
     * ‚úÖ Approach:
     * Given an array of strings `arr[]` and a pattern `pat`, we need to find all words in `arr[]`
     * that match the camel case pattern `pat` (i.e., uppercase letters should appear in the same order).
     *
     * üîπ **Optimized Approach (Two-Pointer Method - O(N * M))**
     *   1. Traverse each word in `arr[]`.
     *   2. Use **two pointers (`i` for word, `j` for pattern)**:
     *      - If `word[i]` is **lowercase**, continue.
     *      - If `word[i]` does **not match** `pat[j]`, break.
     *      - If `word[i]` matches `pat[j]`, move both pointers forward.
     *   3. If `j == pat.length()`, the pattern fully matches ‚Üí Add to result.
     *   4. Return the final list of matching words.
     *
     * üîπ **Brute Force Approach (O(N * M)) - Commented Out**
     *   - Extract only uppercase letters from each word.
     *   - Compare the extracted uppercase string with `pat`.
     *   - If they match, add the word to the result.
     *
     * ‚úÖ Time Complexity:
     * - **Optimized Approach:** O(N * M) (Iterate each word and scan characters)
     * - **Brute Force Approach:** O(N * M) (Extracting uppercase letters)
     *
     * ‚úÖ Space Complexity:
     * - **Both approaches:** O(K) (Size of the answer list)
     *
     * ‚úÖ Dry Run Example:
     * Input:
     *   arr = ["Hi", "Hello", "HelloWorld", "HiTech", "HiGeek", "HiTechWorld", "HiTechCity", "HiTechLab"]
     *   pat = "HT"
     * 
     * Steps:
     * - `"Hi"` ‚Üí Extract `"H"` (No `"T"` ‚Üí ‚ùå)
     * - `"Hello"` ‚Üí Extract `"H"` (No `"T"` ‚Üí ‚ùå)
     * - `"HelloWorld"` ‚Üí Extract `"HW"` (No `"T"` ‚Üí ‚ùå)
     * - `"HiTech"` ‚Üí Extract `"HT"` (‚úÖ Add to result)
     * - `"HiTechWorld"` ‚Üí Extract `"HTW"` (‚úÖ Add to result)
     * - `"HiTechCity"` ‚Üí Extract `"HTC"` (‚úÖ Add to result)
     * - `"HiTechLab"` ‚Üí Extract `"HTL"` (‚úÖ Add to result)
     *
     * Output: **["HiTech", "HiTechWorld", "HiTechCity", "HiTechLab"]**
     */

    public List<String> camelCase(String[] arr, String pat) {
        List<String> ans = new ArrayList<>();

        for (String word : arr) {
            int i = 0, j = 0;

            while (i < word.length() && j < pat.length()) {
                if (Character.isLowerCase(word.charAt(i))) {
                    i++; // Skip lowercase letters
                } else if (word.charAt(i) != pat.charAt(j)) {
                    break; // Uppercase letter mismatch
                } else {
                    i++;
                    j++;
                }
            }

            if (j == pat.length()) {
                ans.add(word); // Pattern fully matched
            }
        }
        return ans;
    }

    /*
     * üî¥ Corrected Brute Force Approach (O(N * M)) - Commented Out
     * - Extract only uppercase letters from each word.
     * - Compare the extracted uppercase sequence with `pat`.
     * - If they match, add to result.
     */

    /*
    public List<String> camelCase(String[] arr, String pat) {
        List<String> ans = new ArrayList<>();

        for (String word : arr) {
            StringBuilder extractedPattern = new StringBuilder();
            
            // Extract uppercase letters in order
            for (char c : word.toCharArray()) {
                if (Character.isUpperCase(c)) {
                    extractedPattern.append(c);
                }
            }
            
            // Check if extracted pattern matches `pat`
            if (extractedPattern.toString().startsWith(pat)) {
                ans.add(word);
            }
        }
        return ans;
    }
    */
}

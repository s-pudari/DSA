/*
Problem: Sort Characters By Frequency
------------------------------------
Given a string `s`, return a string where the characters are sorted in
descending order by their frequency (most frequent characters come first).

Link (LeetCode): https://leetcode.com/problems/sort-characters-by-frequency/

-------------------------
Structure followed (exactly):
  1) BRUTE-FORCE approach explanation + one-line time & space complexity
     + dry-run example
  2) BRUTE-FORCE implementation (code directly after its explanation)
  3) OPTIMIZED approach explanation + one-line time & space complexity
     + dry-run example
  4) OPTIMIZED implementation (code directly after its explanation)
  5) (Optional) commented driver at the end for quick testing

All explanatory multi-line comments use /* ... */ as requested and every
approach's code is placed immediately after its explanation/dry-run.
*/

import java.util.*;

public class Solution {

  

    /* =========================================================================
       APPROACH  — OPTIMIZED (HashMap + Sort by Frequency)
       ---------------------------------------------------------------------
       Idea:
       - Count frequency of every character in one pass using a HashMap.
       - Convert the map entries into a list and sort entries by frequency descending.
       - Build the result by repeating each character freq times (fast via String.repeat).

       Time Complexity: O(n log k)  — n = length of string, k = distinct characters.
       Space Complexity: O(k)       — hashmap and list of entries.

       Dry Run:
       Input: "tree"
       - Count pass: { 't':1, 'r':1, 'e':2 }
       - Sort entries by value descending -> [ ('e',2), ('t',1), ('r',1) ]
       - Build result -> "e".repeat(2) + "t".repeat(1) + "r".repeat(1) => "eetr" (or "eert")
       ========================================================================= */
    public String frequencySort(String s) {
        /* Step 1: Frequency count (single pass) */
        HashMap<Character, Integer> freq = new HashMap<>();
        for (char c : s.toCharArray()) {
            /* getOrDefault keeps logic compact and clear */
            freq.put(c, freq.getOrDefault(c, 0) + 1);
        }

        /* Step 2: Move map entries into a list so we can sort by frequency */
        List<Map.Entry<Character, Integer>> entries = new ArrayList<>(freq.entrySet());

        /* Step 3: Sort entries by frequency descending.
           If frequencies equal, we don't care about order (problem doesn't require tie-break).
         */
        entries.sort((a, b) -> b.getValue() - a.getValue());

        /* Step 4: Build the result string efficiently */
        StringBuilder sb = new StringBuilder(s.length());
        for (Map.Entry<Character, Integer> e : entries) {
            char ch = e.getKey();
            int count = e.getValue();

            /* Use String.repeat if available (Java 11+), else append in a loop.
               We'll use repeat for clarity — fallback loop would also be fine. */
            /* Convert char to String then repeat */
            sb.append(String.valueOf(ch).repeat(count));
        }

        return sb.toString();
    }

}

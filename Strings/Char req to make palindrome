https://www.geeksforgeeks.org/batch/gfg-160-problems/track/string-gfg-160/problem/minimum-characters-to-be-added-at-front-to-make-string-palindrome
//Approach 3 using lps array T.C --> O(n)  S.C-->O(n)
class Solution {
    public static int minChar(String s) {
        // Write your code here
        String reversed = new StringBuilder(s).reverse().toString();
        String combined = s + "#" + reversed;

        // Generate LPS (Longest Prefix Suffix) array for the combined string
        int[] lps = computeLPSArray(combined);

        // The number of characters to add is the difference between the length
        // of the original string and the longest palindromic suffix
        return s.length() - lps[combined.length() - 1];
    }

    public static int[] computeLPSArray(String str) {
        int n = str.length();
        int[] lps = new int[n];
        int length = 0; // Length of the previous longest prefix suffix
        int i = 1;

        while (i < n) {
            if (str.charAt(i) == str.charAt(length)) {
                length++;
                lps[i] = length;
                i++;
            } else {
                if (length != 0) {
                    length = lps[length - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }
}
//Approach 2 using Brute Force T.C --> O(n^2)  S.C-->O(1)
class Solution {
    public static int minChar(String s) {
        // Write your code here
        String processedStr = s.replaceAll("\\s+","").toLowerCase();
        int count=0;
        int i=s.length()-1;
        
        while(i>=0 && !isPalindrome(s,0,i)){
            i--;
            count++;
        }
        
        return count;
    }
   
    public static boolean isPalindrome(String str,int left,int right){
       
        while(left<right){
            if(str.charAt(left)!=str.charAt(right)){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}

//Approach 1 using Brute Force T.C --> O(n^2)  S.C-->O(n)
class Solution {
    public static int minChar(String s) {
        // Write your code here
        String processedStr = s.replaceAll("\\s+","").toLowerCase();
        
        return countMinChar(processedStr);
    }
    public static int countMinChar(String str){
        int count=0;
        while(!isPalindrome(str)){
            str=str.substring(0,str.length()-1);
            count++;
        }
        return count;
    }
    public static boolean isPalindrome(String str){
        int left=0;
        int right=str.length()-1;
        while(left<right){
            if(str.charAt(left)!=str.charAt(right)){
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}

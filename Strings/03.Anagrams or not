https://www.geeksforgeeks.org/batch/gfg-160-problems/track/string-gfg-160/problem/anagram-1587115620

//Approach 2  using hashmap
T.C--> O(n) S.C--> O(k)i.e no of distinct characters
 
/*
🔥 PROBLEM STATEMENT 🔥
-----------------------
Check if two strings are **anagrams** of each other.

Definition:
------------
Two strings are anagrams **if they contain the same characters with the same frequencies**, but possibly in a different order.

Examples:
----------
✅ Input : s1 = "listen", s2 = "silent"
✅ Output: true

❌ Input : s1 = "hello", s2 = "world"
❌ Output: false

---

💡 APPROACH OVERVIEW 💡
=======================

✅ Optimized Approach (Using HashMap Frequency Count):
------------------------------------------------------
1. Count character frequencies for both strings using **HashMap<Character, Integer>**.
2. Compare the two maps using `.equals()`.

🕒 Time Complexity : O(n + m) — where `n` and `m` are lengths of the two strings.
🧠 Space Complexity: O(1) — only 26 letters at most (assuming lowercase English letters).

✅ Brute-Force Approach (Commented Below):
------------------------------------------
1. Sort both strings.
2. If sorted strings are equal, they are anagrams.

🕒 Time Complexity : O(n log n + m log m)
🧠 Space Complexity: O(n + m) for the sorted arrays.

---

🔍 Dry Run Example:
-------------------
s1 = "anagram"
s2 = "nagaram"

hm1 = { a:3, n:1, g:1, r:1, m:1 }
hm2 = { n:1, a:3, g:1, r:1, m:1 }

Compare hm1.equals(hm2) → ✅ true
*/

import java.util.*;

class Solution {
    public static boolean areAnagrams(String s1, String s2) {

        int n = s1.length();
        int m = s2.length();

        // Step 1: If lengths are not equal, they can't be anagrams
        if (n != m) {
            return false;
        }

        // Step 2: Create frequency maps for both strings
        HashMap<Character, Integer> hm1 = new HashMap<>();
        HashMap<Character, Integer> hm2 = new HashMap<>();

        for (int i = 0; i < n; i++) {
            /* 
            Get current character from s1 and increment its count in map.
            getOrDefault() handles case when character hasn't been seen yet.
            */
            char ch1 = s1.charAt(i);
            hm1.put(ch1, hm1.getOrDefault(ch1, 0) + 1);

            char ch2 = s2.charAt(i); // Same index as strings are same length
            hm2.put(ch2, hm2.getOrDefault(ch2, 0) + 1);
        }

        // Step 3: Compare both frequency maps
        return hm1.equals(hm2); // true if all keys and their counts match
    }
}


/*
💭 BRUTE-FORCE APPROACH (Commented Below)
=========================================

This version sorts both strings and compares them.

public static boolean areAnagrams(String s1, String s2) {

    // Step 1: If lengths differ, not anagrams
    if (s1.length() != s2.length()) {
        return false;
    }

    // Step 2: Convert to char arrays and sort both
    char[] arr1 = s1.toCharArray();
    char[] arr2 = s2.toCharArray();

    Arrays.sort(arr1); // O(n log n)
    Arrays.sort(arr2); // O(m log m)

    // Step 3: Compare sorted arrays
    return Arrays.equals(arr1, arr2);
}

⚠️ Why less optimal?
---------------------
- Sorting takes O(n log n) vs O(n) for hashmap.
- Less efficient for very large inputs.
- Not as clean or flexible if character sets expand (e.g., Unicode).
*/

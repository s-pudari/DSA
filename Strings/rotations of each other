https://www.geeksforgeeks.org/batch/gfg-160-problems/track/string-gfg-160/problem/check-if-strings-are-rotations-of-each-other-or-not-1587115620
//Aproach 3 Using KMP algorithm
class Solution {
    // Function to check if two strings are rotations of each other or not.
 
    // Compute the LPS (Longest Prefix Suffix) array
    public static int[] computeLPSArray(String pat) {
        int n = pat.length();
        int[] lps = new int[n];

        // Length of the previous longest prefix suffix
        int patLen = 0;
        lps[0] = 0; // lps[0] is always 0

        int i = 1;
        while (i < n) {
            if (pat.charAt(i) == pat.charAt(patLen)) {
                patLen++;
                lps[i] = patLen;
                i++;
            } else {
                if (patLen != 0) {
                    patLen = lps[patLen - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }

        return lps;
    }

    // Check if s2 is a rotation of s1
    public static boolean areRotations(String s1, String s2) {
        if (s1.length() != s2.length()) {
            return false;
        }

        // Concatenate s1 with itself
        String txt = s1 + s1;
        String pat = s2;

        int n = txt.length();
        int m = pat.length();

        // Compute LPS array for the pattern
        int[] lps = computeLPSArray(pat);

        int i = 0; // Index for txt
        int j = 0; // Index for pat

        while (i < n) {
            if (pat.charAt(j) == txt.charAt(i)) {
                j++;
                i++;
            }

            if (j == m) {
                return true; // Pattern found
            } else if (i < n && pat.charAt(j) != txt.charAt(i)) {
                if (j != 0) {
                    j = lps[j - 1];
                } else {
                    i++;
                }
            }
        }

        return false;
    }

    
    
    
}
// Approach 2 using inbuilt functon 
class Solution {
    // Function to check if two strings are rotations of each other or not.
    public static boolean areRotations(String s1, String s2) {
        // Your code here
        int n=s1.length();
        int m=s2.length();
        if(n!=m) return false;
        
        String concatenated = s1+s1;
        
        return concatenated.contains(s2);
    }
}


//Approach 1 Using Brute Force T.C--> O(n^2) S.C--> O(1)
class Solution {
    // Function to check if two strings are rotations of each other or not.
    public static boolean areRotations(String s1, String s2) {
        // Your code here
        int n=s1.length();
        int m=s2.length();
        if(n!=m) return false;
        for(int i=0;i<n;i++){
            if(s1.equals(s2)){
                return true;
            }
            
            s1=s1.charAt(n-1)+s1.substring(0,n-1);
        }
        return false;
    }
}

/**
 * üîç PROBLEM: Implement `myAtoi(String s)`
 * --------------------------------------------
 * Convert a string to a 32-bit signed integer (just like the C/C++ atoi function).
 *
 * ‚úÖ Rules:
 * 1. Ignore leading whitespaces
 * 2. Optional '+' or '-' sign
 * 3. Read digits until a non-digit character or end of string
 * 4. Clamp values to Integer.MIN_VALUE (-2^31) or Integer.MAX_VALUE (2^31 - 1)
 *
 * üß† Example:
 * Input:  "   -42"
 * Output: -42
 *
 * Input:  "4193 with words"
 * Output: 4193
 *
 * Input:  "words and 987"
 * Output: 0
 *
 * --------------------------------------------------
 * ‚úÖ TIME: O(n) ‚Üí where n is length of the string
 * ‚úÖ SPACE: O(1)
 */

class Solution {
    public int myAtoi(String s) {
        int n = s.length();

        int idx = 0;
        int sign = 1;       // default positive
        int res = 0;

        // ‚úÖ 1. Skip leading whitespaces
        while (idx < n && s.charAt(idx) == ' ') {
            idx++;
        }

        // ‚úÖ 2. Check for optional '+' or '-' sign
        if (idx < n && (s.charAt(idx) == '+' || s.charAt(idx) == '-')) {
            sign = (s.charAt(idx) == '-') ? -1 : 1;
            idx++;
        }

        // ‚úÖ 3. Convert digits and stop at first non-digit
        while (idx < n && Character.isDigit(s.charAt(idx))) {
            int digit = s.charAt(idx) - '0';

            // ‚úÖ 4. Check for overflow/underflow before multiplication
            if (res > (Integer.MAX_VALUE - digit) / 10) {
                return (sign == 1) ? Integer.MAX_VALUE : Integer.MIN_VALUE;
            }

            res = res * 10 + digit;
            idx++;
        }

        // ‚úÖ 5. Return result with appropriate sign
        return res * sign;
    }
}

/*
🔥 PROBLEM: Reverse Words in a String 🔥
---------------------------------------
Given a string `s`, reverse the order of words in it.

🧾 Definition:
- A *word* is defined as a sequence of non-space characters.
- Words are separated by one or more spaces.
- Return a string with words in reversed order.
- Remove any leading, trailing, and multiple intermediate spaces.

Link: https://leetcode.com/problems/reverse-words-in-a-string/
*/


class Solution {

    /* ==========================================================
       ✅ APPROACH 1 — Using Stack (Beginner Friendly)
       ----------------------------------------------------------
       💡 Idea:
       - Traverse the string and manually build words.
       - Push each word into a stack.
       - Pop from stack to reverse order.

       🕒 Time Complexity: O(n)
       🧠 Space Complexity: O(n) for stack

       🔍 Dry Run Example:
       Input: " the sky is  blue "
       Steps:
       - Traverse → push "the", "sky", "is", "blue" onto stack
       - Pop → "blue is sky the"
       Output: "blue is sky the"
    ========================================================== */
    public String reverseWordsStack(String s) {
        Stack<String> st = new Stack<>();
        String str = "";
        s = s.trim(); // remove leading and trailing spaces

        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ' ') {
                if (!str.isEmpty()) {
                    st.push(str);
                    str = "";
                }
            } else {
                str += s.charAt(i);
            }
        }
        if (!str.isEmpty()) {
            st.push(str); // push last word
        }

        String ans = "";
        while (!st.isEmpty()) {
            ans += st.pop();
            if (!st.isEmpty()) ans += " ";
        }
        return ans;
    }


    /* ==========================================================
       ✅ APPROACH 2 — Two Pointers from the End
       ----------------------------------------------------------
       💡 Idea:
       - Start from the end of the string.
       - Skip spaces, extract each word, and append to result.
       - Efficient, avoids splitting into arrays.

       🕒 Time Complexity: O(n)
       🧠 Space Complexity: O(n)

       🔍 Dry Run Example:
       Input: "  hello   world  "
       Steps:
       - Start at r=12 → skip spaces → r=9
       - l moves to 6 → extract "world"
       - Append → "world "
       - Next word → "hello"
       Final → "world hello"
    ========================================================== */
    public String reverseWordsTwoPointers(String s) {
        StringBuilder ans = new StringBuilder();
        int l, r = s.length() - 1;

        while (r >= 0) {
            while (r >= 0 && s.charAt(r) == ' ') r--; // skip spaces
            if (r < 0) break;

            l = r;
            while (l >= 0 && s.charAt(l) != ' ') l--; // find word start

            for (int i = l + 1; i <= r; i++) {
                ans.append(s.charAt(i));
            }
            ans.append(' ');

            r = l - 1;
        }
        return ans.toString().trim(); // remove last space
    }


    /* ==========================================================
       ✅ APPROACH 3 — Optimized Using split() + Loop
       ----------------------------------------------------------
       💡 Idea:
       - Use `split("\\s+")` to handle multiple spaces.
       - Traverse words in reverse order and build result.

       🕒 Time Complexity: O(n)
       🧠 Space Complexity: O(n)

       🔍 Dry Run Example:
       Input: "  the   sky   is blue  "
       After split: ["the","sky","is","blue"]
       Reverse order: "blue is sky the"
    ========================================================== */
    public String reverseWords(String s) {
        String[] words = s.trim().split("\\s+");
        StringBuilder res = new StringBuilder();

        for (int i = words.length - 1; i >= 0; i--) {
            res.append(words[i]);
            if (i != 0) res.append(" ");
        }
        return res.toString();
    }


    /* ==========================================================
       QUICK TEST
    ========================================================== */
    public static void main(String[] args) {
        Solution sol = new Solution();
        String s = "  the   sky   is blue  ";

        System.out.println("Approach 1 (Stack): " + sol.reverseWordsStack(s));
        System.out.println("Approach 2 (Two Pointers): " + sol.reverseWordsTwoPointers(s));
        System.out.println("Approach 3 (split): " + sol.reverseWords(s));
    }
}

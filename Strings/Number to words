class Solution {
    /*
     * âœ… **Problem Statement:**
     * Convert an integer `n` into its English words representation.
     *
     * ðŸ”¹ **Optimized Approach (Recursive Division)**
     *   - The idea is to use a **divide-and-conquer** approach:
     *     1. **Divide the number** by place values (Billion, Million, Thousand, Hundred, etc.).
     *     2. **Recursively process** the quotient and remainder.
     *     3. **Concatenate words** properly for correct English representation.
     *   - Example: `1234567` is processed as:
     *     - **1 Million** (`convertToStr(1) + " Million"`)
     *     - **234 Thousand** (`convertToStr(234) + " Thousand"`)
     *     - **567** (`convertToStr(567)`)
     *
     * âœ… **Time Complexity:** `O(log n)` (Number is divided in each recursive call)
     * âœ… **Space Complexity:** `O(log n)` (Recursive stack space)
     *
     * âœ… **Dry Run Example:**
     * **Input:** n = 1234567
     * **Steps:**
     * - `convertToStr(1234567)` â†’ `convertToStr(1) + " Million" + convertToStr(234567)`
     * - `convertToStr(234567)` â†’ `convertToStr(234) + " Thousand" + convertToStr(567)`
     * - `convertToStr(567)` â†’ `convertToStr(5) + " Hundred" + convertToStr(67)`
     * - `convertToStr(67)` â†’ `convertToStr(60) + convertToStr(7)`
     * - `convertToStr(7)` â†’ `"Seven"`
     * - Final Output: **"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven"**
     */

    String convertToStr(int n, int[] values, String[] words) {
        String res = "";

        for (int i = 0; i < values.length; i++) {
            int value = values[i];
            String word = words[i];

            if (n >= value) {
                // If n is greater than or equal to the current value, process it
                if (n >= 100) {
                    res += convertToStr(n / value, values, words) + " "; // Process quotient
                }

                res += word; // Append corresponding word

                if (n % value > 0) {
                    res += " " + convertToStr(n % value, values, words); // Process remainder
                }
                return res;
            }
        }
        return res;
    }

    String convertToWords(int n) {
        if (n == 0) {
            return "Zero";
        }

        int[] values = {
            1000000000, 1000000, 1000, 100, 90, 80, 70, 60, 50, 40, 30, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10,
            9, 8, 7, 6, 5, 4, 3, 2, 1
        };

        String[] words = {
            "Billion", "Million", "Thousand", "Hundred", "Ninety", "Eighty", "Seventy", "Sixty", "Fifty", "Forty",
            "Thirty", "Twenty", "Nineteen", "Eighteen", "Seventeen", "Sixteen", "Fifteen", "Fourteen", "Thirteen",
            "Twelve", "Eleven", "Ten", "Nine", "Eight", "Seven", "Six", "Five", "Four", "Three", "Two", "One"
        };

        return convertToStr(n, values, words);
    }

    /*
     * ðŸ”´ **Approach 1: Iterative (Handling Groups of Three Digits)**
     * - **Break the number into chunks of three digits** (e.g., Thousands, Millions, etc.).
     * - Process each chunk using predefined words.
     * - Example:
     *   - `1234567` â†’ split into **1,234,567**.
     *   - Process each group and attach "Thousand", "Million", etc.
     */

    /*
    String convertToWords(int n) {
        if (n == 0) {
            return "Zero";
        }

        String units[] = {
            "", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve",
            "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"
        };

        String tens[] = {
            "", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"
        };

        String multipliers[] = {
            "", "Thousand", "Million", "Billion"
        };

        String res = "";
        int group = 0;

        while (n > 0) {
            if (n % 1000 != 0) {
                int value = n % 1000;
                String temp = "";

                if (value >= 100) {
                    temp = units[value / 100] + " Hundred ";
                    value %= 100;
                }

                if (value >= 20) {
                    temp += tens[value / 10] + " ";
                    value %= 10;
                }

                if (value > 0) {
                    temp += units[value] + " ";
                }

                temp += multipliers[group] + " ";
                res = temp + res; // Prepend for correct ordering
            }
            n /= 1000;
            group++;
        }

        return res.trim();
    }
    */
}

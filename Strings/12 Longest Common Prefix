//https://leetcode.com/problems/longest-common-prefix/
/*
🔥 PROBLEM: Longest Common Prefix 🔥
------------------------------------
Given an array of strings, find the **longest common prefix** among them.
If there is no common prefix, return an empty string `""`.

🧠 Example:
Input: ["flower", "flow", "flight"]
Output: "fl"

📌 Key Idea:
We iteratively compare the prefix with each string and shorten it when mismatches are found.

🕒 Time Complexity: O(N * M)
Where N = number of strings, M = length of the shortest string  
🧠 Space Complexity: O(1) — if we don't count the output string
*/

class Solution {
    public String longestCommonPrefix(String[] strs) {

        // Step 1: Edge case check (though constraints often guarantee non-empty input)
        if (strs == null || strs.length == 0) {
            return "";
        }

        int n = strs.length;

        // Step 2: Start with the first string as the current prefix
        StringBuilder ans = new StringBuilder(strs[0]);

        // Step 3: Compare this prefix with each next string
        for (int i = 1; i < n; i++) {
            ans = helper(ans.toString(), strs[i]);

            // If at any point the common prefix becomes empty, break early
            if (ans.length() == 0) break;
        }

        return ans.toString();
    }

    /*
    🛠️ Helper Function: Compares two strings and returns their common prefix
    Example:
    s1 = "flower", s2 = "flow" → returns "flow"
    */
    public StringBuilder helper(String s1, String s2) {
        int i = 0, j = 0;
        StringBuilder temp = new StringBuilder();

        while (i < s1.length() && j < s2.length()) {
            if (s1.charAt(i) == s2.charAt(j)) {
                temp.append(s1.charAt(i));
                i++;
                j++;
            } else {
                break; // mismatch found, stop here
            }
        }

        return temp;
    }

    
    ❌ Brute Force (Commented Idea)
    -------------------------------
    - Try all possible prefixes of the first string
    - Check if each prefix is common to all other strings
    - Inefficient for large input

    String prefix = strs[0];
    for (int i = 1; i < strs.length; i++) {
        while (!strs[i].startsWith(prefix)) {
            prefix = prefix.substring(0, prefix.length() - 1);
            if (prefix.isEmpty()) return "";
        }
    }
    return prefix;
    
}

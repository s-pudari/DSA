https://www.geeksforgeeks.org/batch/gfg-160-problems/track/string-gfg-160/problem/add-binary-strings3805

/*
🔥 PROBLEM STATEMENT 🔥
-----------------------
You're given two **binary strings** (e.g., "1010", "1011"). Return their **sum**, also as a binary string.

Example:
---------
Input : s1 = "1010", s2 = "1011"
Output: "10101"
Explanation: 10 (decimal) + 11 (decimal) = 21 (decimal) → "10101" (binary)

🎯 Goal:
Simulate **binary addition** manually, character by character, managing **carry** just like in grade-school addition.

---

💡 APPROACH OVERVIEW 💡
=======================

✅ Optimized Approach:
----------------------
- Traverse both strings from **right to left**.
- Add corresponding bits and keep track of the **carry**.
- If strings are unequal in length, pad the shorter one implicitly.
- Build result in a **StringBuilder** (efficient reverse building).
- Reverse at the end for correct order.

🕒 Time Complexity : O(max(n, m))
🧠 Space Complexity: O(max(n, m))

🔍 Dry Run Example:
-------------------
s1 = "1010"
s2 = "1011"

Right to Left:
---------------
i=3: 0 (s1) + 1 (s2) + 0 (carry) = 1 → result = "1", carry = 0  
i=2: 1 + 1 + 0 = 2 → bit = 0, carry = 1 → result = "01"  
i=1: 0 + 0 + 1 = 1 → bit = 1, carry = 0 → result = "101"  
i=0: 1 + 1 + 0 = 2 → bit = 0, carry = 1 → result = "0101"

Append carry → "10101" ✅
*/

class Solution {
    public String addBinary(String s1, String s2) {

        // Step 1: Make sure s1 is the longer string to simplify the loop
        int n = s1.length();
        int m = s2.length();

        if (n < m) {
            // If s2 is longer, swap them so s1 is always the longer one
            String temp = s1;
            s1 = s2;
            s2 = temp;

            int tempLen = n;
            n = m;
            m = tempLen;
        }

        int carry = 0; // Keeps track of carry between additions
        StringBuilder result = new StringBuilder(); // Efficient for string appending
        int j = m - 1; // Pointer for shorter string (s2)

        // Step 2: Traverse s1 (guaranteed longer or equal) from right to left
        for (int i = n - 1; i >= 0; i--) {

            int bit1 = s1.charAt(i) - '0';  // Convert char to int
            int bitSum = bit1 + carry;      // Start with s1's bit and carry

            if (j >= 0) {
                // If s2 has a bit left, add it
                int bit2 = s2.charAt(j) - '0';
                bitSum += bit2;
                j--; // Move left in s2
            }

            int bit = bitSum % 2;   // Actual bit to append (0 or 1)
            carry = bitSum / 2;     // Update carry for next iteration

            result.append(bit);     // Append current bit to result (in reverse)
        }

        // Step 3: If any carry is left after full traversal, append it
        if (carry > 0) {
            result.append(carry);
        }

        // Step 4: Reverse the result to get correct order
        String finalRes = result.reverse().toString();

        // Step 5: Remove leading zeros (like "00010101" → "10101")
        int idx = 0;
        while (idx < finalRes.length() && finalRes.charAt(idx) == '0') {
            idx++;
        }

        // If the whole string is zeros, return "0"
        return (idx == finalRes.length()) ? "0" : finalRes.substring(idx);
    }
}

/*
💭 BRUTE-FORCE APPROACH (Commented Out Below)
=============================================

This version uses built-in conversion functions — simple but not safe for large binaries.

public String addBinary(String s1, String s2) {

    // Step 1: Convert binary strings to integers
    int num1 = Integer.parseInt(s1, 2); // e.g., "1010" → 10
    int num2 = Integer.parseInt(s2, 2); // e.g., "1011" → 11

    // Step 2: Add them
    int sum = num1 + num2; // 10 + 11 = 21

    // Step 3: Convert result back to binary
    return Integer.toBinaryString(sum); // 21 → "10101"
}

⚠️ Why this is not ideal:
- `Integer.parseInt()` and `Integer.toBinaryString()` are easy to use...
- ...but break for inputs larger than 32-bit/64-bit integers (e.g., huge binaries).
- Interviewers prefer manual implementation to test your logic and attention to detail.
*/

https://leetcode.com/problems/jump-game-ii/
/**
 * Problem: Jump Game II (Leetcode 45)
 * 
 * Given an array `nums` where each element represents your maximum jump length at that position,
 * return the minimum number of jumps needed to reach the last index. Assume you can always reach the end.
 * 
 * Example:
 * Input: nums = [2,3,1,1,4]
 * Output: 2
 * Explanation: Jump from index 0 to 1, then from 1 to 4.
 * 
 * ------------------------------------------------------------
 * Optimized (Greedy) Approach:
 * - We keep track of the current range of indices we can reach (`l` to `r`), and find the farthest point 
 *   we can jump to from that range. Every time we finish exploring the current range, we increment the jump count.
 * 
 * Time Complexity: O(n)
 * Space Complexity: O(1)
 * 
 * Dry Run for Optimized Approach:
 * Input: [2,3,1,1,4]
 * Step 1: l=0, r=0
 *         i=0 → farthest = max(0+2, MIN) = 2
 *         Update l=1, r=2, jumps=1
 * Step 2: i=1 → farthest = max(1+3, 2) = 4
 *         i=2 → farthest = max(2+1, 4) = 4
 *         Update l=3, r=4, jumps=2
 * Step 3: r >= n-1 → break
 * Result: 2 jumps
 */

class Solution {
    // Optimized Greedy Approach
    public int jump(int[] nums) {
        int n = nums.length;
        int l = 0, r = 0; // l and r define the current window of indices we are exploring
        int jumps = 0;

        while (r < n - 1) {
            int farthest = Integer.MIN_VALUE;

            /* 
             * Explore the range [l, r] and find the farthest index reachable from any index in this range.
             * This helps us determine the next "window" of reachable indices.
             */
            for (int i = l; i <= r; i++) {
                farthest = Math.max(farthest, i + nums[i]);
            }

            // Move to the next window
            l = r + 1;
            r = farthest;
            jumps++; // We used one more jump to get to this new window
        }

        return jumps;
    }


    /*
     * ------------------------------------------------------------
     * Recursive + Memoization Approach (Brute-force - Commented)
     * 
     * This approach explores all jump possibilities recursively and memoizes results
     * to avoid recomputation.
     * 
     * Time Complexity: O(n^2) in worst case
     * Space Complexity: O(n^2) for memoization table
     * 
     * Dry Run:
     * nums = [2,3,1,1,4]
     * rec(0,0):
     *   nums[0] = 2 → Try jumps of 1 and 2
     *     → rec(1,1): nums[1]=3 → try 1,2,3 → reaches end with 2 more jumps
     *     → rec(2,1): nums[2]=1 → try 1 → reaches end with 3 jumps total
     *   min of those = 2
     */

    // public int jump(int[] nums) {
    //     int n = nums.length;
    //     int[][] dp = new int[n][n];
        
    //     // Initialize DP table with -1 to denote uncomputed states
    //     for (int[] row : dp) {
    //         Arrays.fill(row, -1);
    //     }

    //     return rec(nums, 0, 0, dp);
    // }

    // Recursive helper function
    // public int rec(int[] nums, int i, int jumps, int[][] dp) {
    //     // Base case: if we've reached or passed the last index, return jump count
    //     if (i >= nums.length - 1) return jumps;

    //     // Return memoized result if it exists
    //     if (dp[i][jumps] != -1) return dp[i][jumps];

    //     int min = Integer.MAX_VALUE;

    //     // Try every possible jump from current position (from 1 to nums[i])
    //     for (int j = 1; j <= nums[i]; j++) {
    //         min = Math.min(min, rec(nums, i + j, jumps + 1, dp));
    //     }

    //     // Memoize and return the result
    //     return dp[i][jumps] = min;
    // }
}

//Problem 1
 public int findDuplicate(int[] nums) {
        int slow = nums[0];
        int fast = nums[0];

        // ✅ Step 1: Detect cycle using Floyd’s Algorithm
        do {
            slow = nums[slow];         // Move `slow` by 1 step
            fast = nums[nums[fast]];   // Move `fast` by 2 steps
        } while (slow != fast);

        // ✅ Step 2: Reset fast pointer and find cycle start
        fast = nums[0];
        while (slow != fast) {
            slow = nums[slow];  // Move both by 1 step
            fast = nums[fast];
        }
        return slow; // Duplicate number
    }

//Problem 2
class ListNode {
    int val;
    ListNode next;
    ListNode(int x) {
        val = x;
        next = null;
    }
}

class Solution {
    /*
     * ✅ Approach:
     * - Use **two pointers (slow & fast)**:
     *   - `slow` moves **1 step** at a time.
     *   - `fast` moves **2 steps** at a time.
     *   - If they **meet**, a cycle exists.
     * - If `fast` reaches `null`, there is **no cycle**.
     *
     * ✅ Time Complexity: O(N) (Linear scan)
     * ✅ Space Complexity: O(1) (No extra space used)
     */
    
    public boolean hasCycle(ListNode head) {
        if (head == null || head.next == null) return false;
        
        ListNode slow = head;
        ListNode fast = head;
        
        while (fast != null && fast.next != null) {
            slow = slow.next;           // Move slow by 1 step
            fast = fast.next.next;      // Move fast by 2 steps

            if (slow == fast) return true;  // Cycle detected
        }
        return false;  // No cycle
    }
}
//Problem 3
class Solution {
    /*
     * ✅ Approach:
     * - First, use Floyd’s algorithm to detect the cycle.
     * - If a cycle exists:
     *   - Reset `fast` to `head`.
     *   - Move `slow` and `fast` **one step at a time**.
     *   - The node where they meet is the **cycle start**.
     *
     * ✅ Time Complexity: O(N)
     * ✅ Space Complexity: O(1)
     */
    
    public ListNode detectCycle(ListNode head) {
        if (head == null || head.next == null) return null;
        
        ListNode slow = head, fast = head;
        
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
            
            if (slow == fast) {  // Cycle detected
                fast = head;  // Reset fast to head
                
                while (slow != fast) { // Move both 1 step at a time
                    slow = slow.next;
                    fast = fast.next;
                }
                return slow; // Start of the cycle
            }
        }
        return null; // No cycle
    }
}
//Problem - 4
class Solution {
    /*
     * ✅ Approach:
     * - Use **slow & fast pointers**:
     *   - `slow` moves **1 step**.
     *   - `fast` moves **2 steps**.
     *   - When `fast` reaches the end, `slow` is at the middle.
     *
     * ✅ Time Complexity: O(N)
     * ✅ Space Complexity: O(1)
     */
    
    public ListNode findMiddle(ListNode head) {
        if (head == null) return null;

        ListNode slow = head, fast = head;
        
        while (fast != null && fast.next != null) {
            slow = slow.next;      // Move slow by 1 step
            fast = fast.next.next; // Move fast by 2 steps
        }
        return slow;  // Middle node
    }
}
//Problem-5
class Solution {
    /*
     * ✅ Approach:
     * - Move `fast` **N steps** ahead.
     * - Move `slow` and `fast` **one step at a time**.
     * - When `fast` reaches the end, `slow` is at the **Nth node from the end**.
     *
     * ✅ Time Complexity: O(N)
     * ✅ Space Complexity: O(1)
     */
    
    public ListNode findNthFromEnd(ListNode head, int n) {
        if (head == null) return null;

        ListNode slow = head, fast = head;
        
        // Move fast `n` steps ahead
        for (int i = 0; i < n; i++) {
            if (fast == null) return null; // Edge case: If n > length of list
            fast = fast.next;
        }
        
        // Move both pointers until fast reaches the end
        while (fast != null) {
            slow = slow.next;
            fast = fast.next;
        }
        return slow; // Nth node from end
    }
}

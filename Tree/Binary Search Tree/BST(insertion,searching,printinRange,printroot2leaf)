import java.util.*;
public class BST{
    static class Node{
        int data;
        Node left;
        Node right;

        Node(int data){
            this.data=data;
        }
        
    }

    public static Node insert(Node root,int val){
        if(root==null){
             root = new Node(val);
             return root;

        }

        if(root.data>val){
            root.left = insert(root.left,val);
        }
        else{
            root.right=insert(root.right,val);
        }
        return root;
    }

    public static void inOrder(Node root){
        if(root == null){
            return;
        }
        inOrder(root.left);
        System.out.print(root.data+" ");
        inOrder(root.right);
    }

    public static boolean searchVal(Node root,int val){//O(h)
        if(root==null){
            return false;
        }

        if(val<root.data){
            return searchVal(root.left,val);
        }

        else if(root.data==val){
            return true;
        }
        else{
            return searchVal(root.right,val);
        }

    }
     
    public static void printInRange(Node root,int x,int y){//x and y inclusive
        if(root==null){
            return;
        }
        if(x<=root.data && root.data<=y){
            printInRange(root.left,x,y);
            System.out.print(root.data+" ");
            printInRange(root.right,x,y);

        }
        else if(root.data<x){
            printInRange(root.left,x,y);
        }
        else{
            printInRange(root.right,x,y);
        }
    }

    public static void printRoot2Leaf(Node root,ArrayList<Integer> path){
        if(root==null){
            return;
        }
        path.add(root.data);

        if(root.left==null && root.right==null){
            System.out.println(path);
        }
        else{
            printRoot2Leaf(root.left, path);
            printRoot2Leaf(root.right, path);
        }
        path.remove(path.size()-1);



    }
    public static void main(String[] args) {
        int[] values={4,2,1,3,6,5,7};

        Node root=null;
         for(int i=0;i<values.length;i++){
            root=insert(root,values[i]);
         }

        inOrder(root);
        System.out.println();

        if(searchVal(root,6)){
            System.out.println("Found");
        }
        else{
            System.out.println("Not Found");
        }

        printInRange(root,2,8);

        printRoot2Leaf(root, new ArrayList<>());

    }
}
